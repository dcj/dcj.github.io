{"version":3,"sources":["vega/base.cljs"],"mappings":"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","names":["js/console.log","vega.base/window-resolve","symbol","p1__90736#","p2__90737#","cljs.core.reduce","js/window","cljs.core.conj","clojure.string.split","clojure.string/replace","cljs.core/namespace","cljs.core/name","vega.base/compile","form","sci.core.eval_string","cljs.core.pr_str","js/document","p__90738","map__90739","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vega.base/dataset-component","data->vega-spec","dependencies","data","cljs.core.atom","c","cljs.core.doall","cljs.core.map","p__90741","vec__90742","cljs.core.nth","dep-name","dep-path","fexpr__90745","r","cljs.core.swap_BANG_","cljs.core/assoc","js/module$node_modules$vega_embed$build$vega_embed.default","cljs.core/clj->js","G__90746","cljs.core/deref","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","vega.base/embed-component","seq90748","self__4724__auto__","cljs.core/seq","specs","iter__4529__auto__","s__90750","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__90752","cljs.core/chunk-buffer","i__90751","cljs.core/-nth","cljs.core/chunk-append","p1__90747#","cljs.core/chunk-cons","cljs.core/chunk","iter__90749","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","spec","vega.base/handler","p__90753","map__90754","id","type","payload","command","cljs.core._EQ_","cljs.core/chunk-first"],"sourcesContent":["(ns vega.base\n  (:require\n   [vega-lite :as vega-lite]\n   [vega-embed :default vega-embed]\n   [sci.core :as sci]\n   ))\n\n(js/console.log \"LOADED VEGA BASE\")\n\n(defn window-resolve [symbol]\n  (reduce #(aget %1 %2)\n          js/window\n          (conj (clojure.string/split (clojure.string/replace (namespace symbol) \"-\" \"_\")\n                                      \".\")\n                (clojure.string/replace (name symbol) \"-\" \"_\"))))\n\n(defn compile [form]\n  (sci/eval-string\n   (pr-str form)\n   {:bindings {'js/console.log js/console.log\n               'js/document    js/document}\n    :classes {:allow :all}}))\n\n(defn dataset-component [{:vega/keys [data->vega-spec]\n                          :dataset/keys [dependencies]}]\n  (let [data->vega-spec (compile (aget data->vega-spec \"rep\"))\n        data (atom {})]\n    [:div\n     {:ref (fn [c]\n             (doall (map (fn [[dep-name dep-path]]\n                           (.subscribe ((window-resolve 'browjure.state/get-or-create-subject)\n                                        dep-path nil)\n                                       (fn [r]\n                                         (swap! data assoc dep-name r)\n                                         (vega-embed c (clj->js (data->vega-spec @data))))))\n                         dependencies)))}]))\n\n(defn embed-component [& specs]\n  [:div (for [spec specs]\n          [:div {:ref #(vega-embed % (clj->js spec))}])])\n\n(def handler\n  (fn [{:keys [id type payload] :as command}]\n    (when (= type :visualize)\n      (js/console.log \"vega base handler\" command)\n      (vega-embed \"#app\" (clj->js payload)))))\n\n(comment\n  (brow/register\n   {:id :vega\n    :namespace \"vega\"\n    :sablono {:hiccup-tag->factory-symbol\n              {:vega 'vega.base/embed-component}}})\n  (brow/echo-to-clients\n   {:type :view-sablono\n    :payload [:div\n              [:h1 \"Embed example\"]\n              [:vega (clojure.data.json/read-str\n                      \"{\n  \\\"data\\\": {\\\"url\\\": \\\"/seattle-weather.csv\\\"},\n  \\\"mark\\\": \\\"bar\\\",\n  \\\"encoding\\\": {\n               \\\"x\\\": {\n                     \\\"timeUnit\\\": \\\"month\\\",\n                     \\\"field\\\": \\\"date\\\",\n                     \\\"type\\\": \\\"ordinal\\\"\n                     },\n               \\\"y\\\": {\n                     \\\"aggregate\\\": \\\"mean\\\",\n                     \\\"field\\\": \\\"precipitation\\\",\n                     \\\"type\\\": \\\"quantitative\\\"\n                     }\n               }\n  }\")]\n              [:h3 \"more html\"]\n              [:vega (clojure.data.json/read-str\n                      \"{\n  \\\"data\\\": {\\\"url\\\": \\\"/seattle-weather.csv\\\"},\n  \\\"mark\\\": \\\"bar\\\",\n  \\\"encoding\\\": {\n               \\\"x\\\": {\n                     \\\"timeUnit\\\": \\\"month\\\",\n                     \\\"field\\\": \\\"date\\\",\n                     \\\"type\\\": \\\"ordinal\\\"\n                     },\n               \\\"y\\\": {\n                     \\\"aggregate\\\": \\\"mean\\\",\n                     \\\"field\\\": \\\"precipitation\\\",\n                     \\\"type\\\": \\\"quantitative\\\"\n                     }\n               }\n  }\")]\n\n\n              ]})\n  )\n"]}