{"version":3,"sources":["sci/impl/io.cljc"],"mappings":"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","names":["sci.impl.io/in","*unrestricted*-orig-val__106178","*unrestricted*-temp-val__106179","sci.impl.unrestrict/*unrestricted*","G__106181","sci.impl.vars.dynamic_var","sci.impl.vars/unbind","sci.impl.io/out","*unrestricted*-orig-val__106184","*unrestricted*-temp-val__106185","G__106187","sci.impl.io/err","*unrestricted*-orig-val__106188","*unrestricted*-temp-val__106189","G__106191","sci.impl.io/print-meta","sci.impl.io/print-length","sci.impl.io/print-level","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","sci.impl.io/pr","seq106194","self__4724__auto__","cljs.core/seq","objs","*print-length*-orig-val__106198","*print-level*-orig-val__106199","*print-meta*-orig-val__106200","*print-length*-temp-val__106201","cljs.core/deref","*print-level*-temp-val__106202","*print-meta*-temp-val__106203","cljs.core/*print-length*","cljs.core/*print-level*","cljs.core/*print-meta*","cljs.core.apply","cljs.core/pr-str","sci.impl.io/flush","sci.impl.io/newline","sci.impl.io/println","sci.impl.io/pr-str","seq106227","*print-length*-orig-val__106240","*print-level*-orig-val__106241","*print-meta*-orig-val__106242","*print-length*-temp-val__106243","*print-level*-temp-val__106244","*print-meta*-temp-val__106245","sci.impl.io/prn","seq106253","*print-length*-orig-val__106260","*print-level*-orig-val__106261","*print-meta*-orig-val__106262","*print-length*-temp-val__106263","*print-level*-temp-val__106264","*print-meta*-temp-val__106265","cljs.core/prn-str","sci.impl.io/prn-str","seq106274","*print-length*-orig-val__106278","*print-level*-orig-val__106279","*print-meta*-orig-val__106280","*print-length*-temp-val__106281","*print-level*-temp-val__106282","*print-meta*-temp-val__106283","sci.impl.io/print","seq106292","*print-length*-orig-val__106296","*print-level*-orig-val__106297","*print-length*-temp-val__106298","*print-level*-temp-val__106299","cljs.core/print-str","sci.impl.io/print-str","seq106316","*print-length*-orig-val__106321","*print-level*-orig-val__106322","*print-meta*-orig-val__106323","*print-length*-temp-val__106324","*print-level*-temp-val__106325","*print-meta*-temp-val__106326","seq106329","*print-length*-orig-val__106332","*print-level*-orig-val__106333","*print-meta*-orig-val__106334","*print-length*-temp-val__106335","*print-level*-temp-val__106336","*print-meta*-temp-val__106337","cljs.core/println-str","sci.impl.io/with-out-str","cljs.core.sequence","cljs.core.concat","cljs.core/List","cljs.core/vec","seq106364","G__106365","cljs.core/first","cljs.core/next","G__106367","self__4723__auto__","_","body"],"sourcesContent":["(ns sci.impl.io\n  {:no-doc true}\n  (:refer-clojure :exclude [pr prn pr-str prn-str print print-str println\n                            newline flush with-out-str with-in-str read-line\n                            printf #?@(:cljs [string-print])])\n  (:require #?(:cljs [goog.string])\n            [sci.impl.unrestrict :refer [*unrestricted*]]\n            [sci.impl.vars :as vars]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(def in (binding [*unrestricted* true]\n          (doto (vars/dynamic-var '*in*)\n                                        (vars/unbind))))\n\n(def out (binding [*unrestricted* true]\n           (doto (vars/dynamic-var '*out*)\n             (vars/unbind))))\n\n(def err (binding [*unrestricted* true]\n           (doto (vars/dynamic-var '*err*)\n             (vars/unbind))))\n\n(def print-meta\n  (vars/dynamic-var '*print-meta* false))\n\n(def print-length (vars/dynamic-var '*print-length* nil))\n\n(def print-level (vars/dynamic-var '*print-level* nil))\n\n#?(:clj (defn pr-on\n          {:private true\n           :static true}\n          [x w]\n          (if *print-dup*\n            (print-dup x w)\n            (print-method x w))\n          nil))\n\n#?(:clj (defn pr\n          ([] nil)\n          ([x]\n           (binding [*print-length* @print-length\n                     *print-level* @print-level\n                     *print-meta* @print-meta]\n             (pr-on x @out)))\n          ([x & more]\n           (pr x)\n           (. ^java.io.Writer @out (append \\space))\n           (if-let [nmore (next more)]\n             (recur (first more) nmore)\n             (apply pr more))))\n   :cljs (defn pr\n           [& objs]\n           (binding [*print-length* @print-length\n                     *print-level* @print-level\n                     *print-meta* @print-meta]\n             (.append @out (apply cljs.core/pr-str objs)))))\n\n#?(:clj\n   (defn flush\n     []\n     (. ^java.io.Writer @out (flush))\n     nil)\n   :cljs (defn flush [] ;stub\n           nil))\n\n#?(:cljs (declare println))\n\n#?(:clj (defn newline\n          []\n          (. ^java.io.Writer @out (append ^String @#'clojure.core/system-newline))\n          nil)\n   :cljs (defn newline\n           []\n           (println)))\n\n#?(:clj\n   (defn pr-str\n     \"pr to a string, returning it\"\n     [& xs]\n     (let [sw (java.io.StringWriter.)]\n       (vars/with-bindings {out sw}\n         (apply pr xs))\n       (str sw)))\n   :cljs\n   (defn pr-str\n     \"pr to a string, returning it\"\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta]\n       (apply cljs.core/pr-str objs))))\n\n#?(:clj\n   (defn prn\n     [& more]\n     (apply pr more)\n     (newline)\n     (when *flush-on-newline*\n       (flush)))\n   :cljs\n   (defn prn\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta]\n       (.append @out (apply cljs.core/prn-str objs)))))\n\n#?(:clj\n   (defn prn-str\n     \"pr to a string, returning it\"\n     [& xs]\n     (let [sw (java.io.StringWriter.)]\n       (vars/with-bindings {out sw}\n         (apply prn xs))\n       (str sw)))\n   :cljs\n   (defn prn-str\n     \"pr to a string, returning it\"\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta]\n       (apply cljs.core/prn-str objs))))\n\n#?(:clj\n   (defn print\n     [& more]\n     (binding [*print-readably* nil]\n       (apply pr more)))\n   :cljs\n   (defn print\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level]\n       (.append @out (apply cljs.core/print-str objs)))))\n\n#?(:clj\n   (defn print-str\n     \"pr to a string, returning it\"\n     [& xs]\n     (let [sw (java.io.StringWriter.)]\n       (vars/with-bindings {out sw}\n         (apply print xs))\n       (str sw)))\n   :cljs\n   (defn print-str\n     \"pr to a string, returning it\"\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta]\n       (apply cljs.core/print-str objs))))\n\n#?(:clj\n   (defn println\n     [& more]\n     (binding [*print-readably* nil]\n       (apply prn more)))\n   :cljs\n   (defn println\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta]\n       (.append @out (apply println-str objs)))))\n\n#?(:clj\n   (defn printf\n     [fmt & args]\n     (print (apply format fmt args))))\n\n(defn with-out-str\n  [_ _ & body]\n  `(let [s# (new #?(:clj java.io.StringWriter\n                    :cljs goog.string.StringBuffer))]\n     (binding [*out* s#]\n       ~@body\n       (str s#))))\n\n#?(:clj\n   (defn with-in-str\n     [_ _ s & body]\n     `(with-open [s# (-> (java.io.StringReader. ~s) clojure.lang.LineNumberingPushbackReader.)]\n        (binding [*in* s#]\n          ~@body))))\n\n#?(:clj\n   (defn read-line\n     []\n     (if (instance? clojure.lang.LineNumberingPushbackReader @in)\n       (.readLine ^clojure.lang.LineNumberingPushbackReader @in)\n       (.readLine ^java.io.BufferedReader @in))))\n"]}