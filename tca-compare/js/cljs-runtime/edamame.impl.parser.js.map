{"version":3,"sources":["edamame/impl/parser.cljc"],"mappings":"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","names":["edamame.impl.parser/edn-read","ctx","reader","tools-reader-opts","cljs.tools.reader.edn.read","edamame.impl.parser/dispatch-macro?","ch","cljs.core/contains?","cljs.tools.reader.edn/read-token","edamame.impl.parser/read-token","cljs.tools.reader.impl.commons/parse-symbol","edamame.impl.parser/parse-symbol","edamame.impl.parser/location","edamame.impl.parser/kw-identical?","kw","v","cljs.core/keyword-identical?","edamame.impl.parser/parse-comment","cljs.tools.reader.reader-types/read-line","edamame.impl.parser/whitespace?","c","and__4115__auto__","edamame.impl.parser/skip-whitespace","_ctx","temp__5735__auto__","var_args","G__106788","edamame.impl.parser/throw-reader","js/Error","msg","edamame.impl.parser.throw_reader","data","loc","cljs.tools.reader.reader-types/get-column-number","l","cljs.tools.reader.reader-types/get-line-number","cljs.core.ex_info","cljs.core.merge","edamame.impl.parser/non-match","edamame.impl.parser/non-match?","G__106814","edamame.impl.parser/parse-to-delimiter","delimiter","edamame.impl.parser.parse_to_delimiter","into","row","col","opened","cljs.core.assoc","vals","cljs.core/transient","next-val","edamame.impl.parser/parse-next","cond-splice?","G__106846","cljs.core/meta","cljs.core/persistent!","seq__106850","cljs.core/seq","chunk__106851","count__106852","i__106853","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core.conj_BANG_","edamame.impl.parser/parse-list","cljs.core.apply","cljs.core/list","edamame.impl.parser/read-regex-pattern","sb","js/goog.string.StringBuffer","edamame.impl.parser/duplicate-keys-error","coll","seq","iter__4529__auto__","s__106927","cljs.core/LazySeq","c__4527__auto__","size__4528__auto__","b__106929","cljs.core/chunk-buffer","i__106928","vec__106940","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__106926","vec__106945","cljs.core/cons","cljs.core/rest","id","freq","cljs.core/frequencies","dups","duplicates","cljs.core/str","cljs.core.interpose","edamame.impl.parser/throw-dup-keys","kind","ks","clojure.string/capitalize","cljs.core/name","edamame.impl.parser/parse-set","start-loc","the-set","cljs.core/set","cljs.core._EQ_","edamame.impl.parser/parse-first-matching-condition","features","match","end?","k","match?","G__106983","G__106984","edamame.impl.parser/parse-reader-conditional","opt","splice?","cljs.tools.reader.impl.utils/reader-conditional","cljs.core/fn?","G__106991","cljs.core.vary_meta","cljs.core/assoc","p1__106986#","G__107005","edamame.impl.parser/get-auto-resolve","edamame.impl.parser.get_auto_resolve","temp__5733__auto__","or__4126__auto__","G__107018","edamame.impl.parser/auto-resolve","m","kns","edamame.impl.parser.auto_resolve","cljs.core.symbol","edamame.impl.parser/parse-namespaced-map","prefix","the-map","cljs.core/Keyword","ns","f","resolved-ns","cljs.core/zipmap","cljs.tools.reader.impl.utils/namespace-keys","cljs.core/keys","cljs.core/vals","edamame.impl.parser/parse-sharp","G__107034","pat","cljs.core/ifn?","cljs.core/re-pattern","fn-expr","edamame.impl.read-fn/read-fn","cljs.core/List","suppress?","sym","cljs.core.get","cljs.tagged-literals/*cljs-data-readers*","edamame.impl.parser/throw-odd-map","elements","cljs.tools.reader.impl.inspect.inspect","edamame.impl.parser/parse-map","cljs.core/odd?","cljs.core.take_nth","cljs.core/distinct?","cljs.core/hash-map","edamame.impl.parser/parse-keyword","init-c","token","auto-resolve?","vec__107046","cljs.core.subs","token-ns","token-name","cljs.core.keyword","edamame.impl.parser/dispatch","sharp?","G__107049","gensyms","cljs.core.atom","ret","edamame.impl.syntax-quote/syntax-quote","nc","expected","cljs.core.not_EQ_","map__107074","cljs.core/PROTOCOL_SENTINEL","char","map__107142","map__107217","meta-val","cljs.tools.reader.impl.utils/desugar-meta","val-val","cljs.core/merge","cljs.tools.reader.reader-types/peek-char","obj","cljs.core/native-satisfies?","cljs.core/IWithMeta","end-loc","p1__107245#","edamame.impl.parser/string-reader","s","cljs.tools.reader.reader_types.indexing_push_back_reader","cljs.tools.reader.reader_types.string_push_back_reader","this__4380__auto__","k__4381__auto__","this__4382__auto__","k107257","else__4383__auto__","G__107269","dispatch","deref","syntax-quote","unquote","unquote-splicing","quote","fn","var","read-eval","regex","row-key","col-key","end-row-key","end-col-key","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__107273","vec__107274","k__4403__auto__","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__107256","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this107258","other107259","this__4389__auto__","k__4390__auto__","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__107295","expr__107296","this__4392__auto__","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-conj","edamame.impl.parser/Options","this__4423__auto__","writer__4424__auto__","cljs.core/-write","G__107261","extmap__4419__auto__","G__107313","cljs.core/record?","edamame.impl.parser/->Options","edamame.impl.parser/map->Options","edamame.impl.parser/normalize-opts","opts","cljs.core.get_in","G__107323","cljs.core/not","edamame.impl.parser/parse-string","r","edamame.impl.parser/parse-string-all"],"sourcesContent":["(ns edamame.impl.parser\n  \"This code is largely inspired by rewrite-clj(sc), so thanks to all\n  who contribured to those projects.\"\n  {:no-doc true}\n  (:require\n   #?(:clj  [clojure.tools.reader.edn :as edn]\n      :cljs [cljs.tools.reader.edn :as edn])\n   #?(:clj  [clojure.tools.reader.reader-types :as r]\n      :cljs [cljs.tools.reader.reader-types :as r])\n   #?(:clj  [clojure.tools.reader.impl.inspect :as i]\n      :cljs [cljs.tools.reader.impl.inspect :as i])\n   #?(:clj [clojure.tools.reader.impl.utils :refer [desugar-meta namespace-keys]]\n      :cljs [cljs.tools.reader.impl.utils :refer [reader-conditional desugar-meta namespace-keys]])\n   #?(:clj [clojure.tools.reader.impl.commons :as commons]\n      :cljs [cljs.tools.reader.impl.commons :as commons])\n   #?(:cljs [cljs.tagged-literals :as cljs-tags])\n   [clojure.string :as str]\n   [edamame.impl.read-fn :refer [read-fn]]\n   [edamame.impl.syntax-quote :refer [syntax-quote]])\n  #?(:clj (:import [java.io Closeable]))\n  #?(:cljs (:import [goog.string StringBuffer])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;;;; tools.reader\n\n(defn edn-read [ctx #?(:cljs ^not-native reader :default reader)]\n  (let [tools-reader-opts (:tools.reader/opts ctx)]\n    (edn/read tools-reader-opts reader)))\n\n(defn dispatch-macro? [ch]\n  (contains? #{\\^  ;; deprecated\n               \\'\n               \\(\n               \\{\n               \\\"\n               \\!\n               \\_\n               \\?\n               \\:\n               \\#} ch))\n\n(def read-token #'edn/read-token)\n(def parse-symbol #'commons/parse-symbol)\n\n;;;; end tools.reader\n\n(defn location [#?(:cljs ^not-native reader :default reader)]\n  {:row (r/get-line-number reader)\n   :col (r/get-column-number reader)})\n\n(defn kw-identical? [kw v]\n  (#?(:clj identical? :cljs keyword-identical?) kw v))\n\n(declare parse-next)\n\n(defn parse-comment\n  [#?(:cljs ^not-native reader :default reader)]\n  (r/read-line reader)\n  reader)\n\n(defn whitespace?\n  [#?(:clj ^java.lang.Character c :default c)]\n  #?(:clj (and c (or (= c \\,) (Character/isWhitespace c)))\n     :cljs (and c (< -1 (.indexOf #js [\\return \\newline \\tab \\space \",\"] c)))))\n\n(defn skip-whitespace\n  \"Skips whitespace. Returns reader. If end of stream is reached, returns nil.\"\n  [_ctx #?(:cljs ^not-native reader :default reader)]\n  (loop []\n    (when-let [c (r/read-char reader)]\n      (if (whitespace? c)\n        (recur)\n        (do (r/unread reader c)\n            reader)))))\n\n(defn throw-reader\n  \"Throw reader exception, including line line/column. line/column is\n  read from the reader but it can be overriden by passing loc\n  optional parameter.\"\n  ([#?(:cljs ^:not-native reader :default reader) msg]\n   (throw-reader reader msg nil))\n  ([#?(:cljs ^:not-native reader :default reader) msg data]\n   (throw-reader reader msg data nil))\n  ([#?(:cljs ^:not-native reader :default reader) msg data loc]\n   (let [c (:col loc (r/get-column-number reader))\n         l (:row loc (r/get-line-number reader))]\n     (throw\n      (ex-info\n       (str msg\n            \" [at line \" l \", column \" c \"]\")\n       (merge {:type :edamame/error\n               :row l\n               :col c} data))))))\n\n(def non-match ::nil)\n\n(defn non-match? [v]\n  (kw-identical? v non-match))\n\n(defn parse-to-delimiter\n  ([ctx #?(:cljs ^not-native reader :default reader) delimiter]\n   (parse-to-delimiter ctx reader delimiter []))\n  ([ctx #?(:cljs ^not-native reader :default reader) delimiter into]\n   (let [row (r/get-line-number reader)\n         col (r/get-column-number reader)\n         opened (r/read-char reader)\n         ctx (assoc ctx\n                    ::expected-delimiter delimiter\n                    ::opened-delimiter {:char opened :row row :col col})]\n     (loop [vals (transient into)]\n       (let [;; if next-val is uneval, we get back the expected delimiter...\n             next-val (parse-next ctx reader)\n             cond-splice? (some-> next-val meta ::cond-splice)]\n         (cond\n           (kw-identical? ::eof next-val)\n           (throw-reader\n            reader\n            (str \"EOF while reading, expected \" delimiter \" to match \" opened \" at [\" row \",\" col \"]\"))\n           (kw-identical? ::expected-delimiter next-val)\n           (persistent! vals)\n           cond-splice? (do (doseq [v next-val]\n                              (conj! vals v))\n                            (recur vals))\n           (non-match? next-val) (recur vals)\n           :else\n           (recur (conj! vals next-val))))))))\n\n(defn parse-list [ctx #?(:cljs ^not-native reader :default reader)]\n  (apply list (parse-to-delimiter ctx reader \\))))\n\n(defn read-regex-pattern\n  \"Modeled after tools.reader/read-regex.\"\n  [_ctx #?(:cljs ^not-native reader :default reader)]\n  (r/read-char reader) ;; ignore leading double-quote\n  (let [sb #?(:clj (StringBuilder.)\n              :cljs (StringBuffer.))]\n    (loop [ch (r/read-char reader)]\n      (if (identical? \\\" ch)\n        #?(:clj (str sb)\n           :cljs (str sb))\n        (if (nil? ch)\n          (throw-reader reader \"Error while parsing regex\")\n          (do\n            (.append sb ch )\n            (when (identical? \\\\ ch)\n              (let [ch (r/read-char reader)]\n                (when (nil? ch)\n                  (throw-reader reader \"Error while parsing regex\"))\n                (.append sb ch)))\n            (recur (r/read-char reader))))))))\n\n(defn- duplicate-keys-error [msg coll]\n  ;; https://github.com/clojure/tools.reader/blob/97d5dac9f5e7c04d8fe6c4a52cd77d6ced560d76/src/main/cljs/cljs/tools/reader/impl/errors.cljs#L233\n  (letfn [(duplicates [seq]\n            (for [[id freq] (frequencies seq)\n                  :when (> freq 1)]\n              id))]\n    (let [dups (duplicates coll)]\n      (apply str msg\n             (when (> (count dups) 1) \"s\")\n             \": \" (interpose \", \" dups)))))\n\n(defn throw-dup-keys\n  [#?(:cljs ^not-native reader :default reader) loc kind ks]\n  (throw-reader\n   reader\n   (duplicate-keys-error\n    (str (str/capitalize (name kind)) \" literal contains duplicate key\")\n    ks)\n   nil\n   loc))\n\n(defn parse-set\n  [ctx #?(:cljs ^not-native reader :default reader)]\n  (let [start-loc (location reader)\n        coll (parse-to-delimiter ctx reader \\})\n        the-set (set coll)]\n    (when-not (= (count coll) (count the-set))\n      (throw-dup-keys reader start-loc :set coll))\n    the-set))\n\n(defn parse-first-matching-condition [ctx #?(:cljs ^not-native reader :default reader)]\n  (let [features (:features ctx)]\n    (loop [match non-match]\n      (skip-whitespace ctx reader)\n      (let [end? (= \\) (r/peek-char reader))]\n        (if end?\n          (do (r/read-char reader) ;; ignore closing \\)\n              match)\n          (let [k (parse-next ctx reader)\n                match? (and (non-match? match)\n                            (or (contains? features k)\n                                (kw-identical? k :default)))]\n            (if match? (recur (parse-next ctx reader))\n                (do\n                  (parse-next (assoc ctx ::suppress true)\n                              reader)\n                  (recur match)))))))))\n\n(defn parse-reader-conditional [ctx #?(:cljs ^not-native reader :default reader)]\n  (skip-whitespace ctx reader)\n  (let [opt (:read-cond ctx)\n        splice? (= \\@ (r/peek-char reader))]\n    (when splice? (r/read-char reader))\n    (cond (kw-identical? :preserve opt)\n          (reader-conditional (parse-next ctx reader) splice?)\n          (fn? opt)\n          (opt (vary-meta\n                (parse-next ctx reader)\n                assoc :edamame/read-cond-splicing splice?))\n          :else\n          (do\n            (r/read-char reader) ;; skip \\(\n            (let [match (parse-first-matching-condition ctx reader)]\n              (cond (non-match? match) reader\n                    splice? (vary-meta match\n                                       #(assoc % ::cond-splice true))\n                    :else match))))))\n\n(defn get-auto-resolve\n  ([ctx reader next-val]\n   (get-auto-resolve ctx reader next-val nil))\n  ([ctx reader next-val msg]\n   (if-let [v (:auto-resolve ctx)]\n     v\n     (throw-reader reader\n                   (or msg \"Use `:auto-resolve` to resolve aliases.\")\n                   {:expr (str \":\" next-val)}))))\n\n(defn auto-resolve\n  \"Returns namespace for given alias.\"\n  ([m kns reader next-val] (auto-resolve m kns reader next-val nil))\n  ([m kns reader next-val msg]\n   (if-let [kns (m kns)]\n     kns\n     (throw-reader reader\n                   (or msg (str \"Alias `\" (symbol kns) \"` not found in `:auto-resolve`\"))\n                   {:expr (str \":\" next-val)}))))\n\n(defn parse-namespaced-map [ctx reader]\n  (let [prefix (edn-read ctx reader)\n        the-map (parse-next ctx reader)]\n    (if (keyword? prefix)\n      ;; autoresolved\n      (let [ns (symbol (name prefix))\n            f (get-auto-resolve ctx reader ns)\n            resolved-ns (auto-resolve f ns reader prefix)]\n        (zipmap (namespace-keys (str resolved-ns) (keys the-map))\n                (vals the-map)))\n      (let [resolved-ns (name prefix)]\n        (zipmap (namespace-keys resolved-ns (keys the-map))\n                (vals the-map))))))\n\n(defn parse-sharp\n  [ctx #?(:cljs ^not-native reader :default reader)]\n  (let [c (r/peek-char reader)]\n    (case c\n      nil (throw-reader reader (str \"Unexpected EOF.\"))\n      \\\" (if-let [v (:regex ctx)]\n           (let [pat (read-regex-pattern ctx reader)]\n             (if (ifn? v)\n               (v pat)\n               (re-pattern pat)))\n           (throw-reader\n            reader\n            (str \"Regex not allowed. Use the `:regex` option\")))\n      \\( (if-let [v (:fn ctx)]\n           (let [fn-expr (parse-next ctx reader)]\n             (if (ifn? v)\n               (v fn-expr)\n               (read-fn fn-expr)))\n           (throw-reader\n            reader\n            (str \"Function literal not allowed. Use the `:fn` option\")))\n      \\' (if-let [v (:var ctx)]\n           (do\n             (r/read-char reader) ;; ignore quote\n             (let [next-val (parse-next ctx reader)]\n               (if (ifn? v)\n                 (v next-val)\n                 (list 'var next-val))))\n           (throw-reader\n            reader\n            (str \"Var literal not allowed. Use the `:var` option\")))\n      \\= (if-let [v (:read-eval ctx)]\n           (do\n             (r/read-char reader) ;; ignore =\n             (let [next-val (parse-next ctx reader)]\n               (if (ifn? v)\n                 (v next-val)\n                 (list 'read-eval next-val))))\n           (throw-reader\n            reader\n            (str \"Read-eval not allowed. Use the `:read-eval` option\")))\n      \\{ (parse-set ctx reader)\n      \\_ (do\n           (r/read-char reader) ;; read _\n           (parse-next ctx reader) ;; ignore next form\n           reader)\n      \\? (do\n           (when-not (:read-cond ctx)\n             (throw-reader\n              reader\n              (str \"Conditional read not allowed.\")))\n           (r/read-char reader) ;; ignore ?\n           (parse-reader-conditional ctx reader))\n      \\: (do\n           (r/read-char reader) ;; ignore :\n           (parse-namespaced-map ctx reader))\n      \\! (do\n           (parse-comment reader)\n           reader)\n      ;; catch-all\n      (if (dispatch-macro? c)\n        (do (r/unread reader \\#)\n            (edn-read ctx reader))\n        ;; reader tag\n        (let [suppress? (::suppress ctx)]\n          (if suppress?\n            (do\n              ;; read symbol\n              (parse-next ctx reader)\n              ;; read form\n              (parse-next ctx reader))\n            (let [sym (parse-next ctx reader)\n                  data (parse-next ctx reader)\n                  f (or (get (:readers ctx) sym)\n                        #?(:clj (default-data-readers sym)\n                           :cljs (cljs-tags/*cljs-data-readers* sym)))]\n              (if f (f data)\n                  (throw (new #?(:clj Exception :cljs js/Error)\n                              (str \"No reader function for tag \" sym)))))\n            #_(do (r/unread reader \\#)\n                  (edn-read ctx reader))))))))\n\n(defn throw-odd-map\n  [#?(:cljs ^not-native reader :default reader) loc elements]\n  (throw-reader\n   reader\n   (str\n    \"The map literal starting with \"\n    (i/inspect (first elements))\n    \" contains \"\n    (count elements)\n    \" form(s). Map literals must contain an even number of forms.\")\n   nil\n   loc))\n\n(defn parse-map\n  [ctx #?(:cljs ^not-native reader :default reader)]\n  (let [start-loc (location reader)\n        elements (parse-to-delimiter ctx reader \\})\n        c (count elements)]\n    (when (pos? c)\n      (when (odd? c)\n        (throw-odd-map reader start-loc elements))\n      (let [ks (take-nth 2 elements)]\n        (when-not (apply distinct? ks)\n          (throw-dup-keys reader start-loc :map ks))))\n    (apply hash-map elements)))\n\n(defn parse-keyword [ctx #?(:cljs ^not-native reader :default reader)]\n  (r/read-char reader) ;; ignore :\n  (let [init-c (r/read-char reader)]\n    (when (whitespace? init-c)\n      (throw-reader reader (str \"Invalid token: :\")))\n    (let [^String token (read-token reader :keyword init-c)\n          auto-resolve? (identical? \\: (.charAt token 0))]\n      (if auto-resolve?\n        (let [token (if auto-resolve? (subs token 1) token)\n              [token-ns token-name] (parse-symbol token)]\n          (if token-ns\n            (let [f (get-auto-resolve ctx reader token)\n                  kns (auto-resolve f (symbol token-ns) reader token-ns)]\n              (keyword (str kns) token-name))\n            ;; resolve current ns\n            (let [f (get-auto-resolve ctx reader token \"Use `:auto-resolve` + `:current` to resolve current namespace.\")\n                  kns (auto-resolve f :current reader token \"Use `:auto-resolve` + `:current` to resolve current namespace.\")]\n              (keyword (str kns) token-name))))\n        (keyword token)))))\n\n(defn dispatch\n  [ctx #?(:cljs ^not-native reader :default reader) c]\n  (let [sharp? (= \\# c)]\n    (if sharp? (do\n                 (r/read-char reader) ;; ignore sharp\n                 (parse-sharp ctx reader))\n        (case c\n          nil ::eof\n          \\@ (if-let [v (:deref ctx)]\n               (do\n                 (r/read-char reader) ;; skip @\n                 (let [next-val (parse-next ctx reader)]\n                   (if (ifn? v)\n                     (v next-val)\n                     (list 'clojure.core/deref next-val))))\n               (throw-reader\n                reader\n                (str \"Deref not allowed. Use the `:deref` option\")))\n          \\' (if-let [v (:quote ctx)]\n               (do\n                 (r/read-char reader) ;; skip '\n                 (let [next-val (parse-next ctx reader)]\n                   (if (ifn? v)\n                     (v next-val)\n                     (list 'quote next-val))))\n               ;; quote is allowed in normal EDN\n               (edn-read ctx reader))\n          \\` (if-let [v (:syntax-quote ctx)]\n               (do\n                 (r/read-char reader) ;; skip `\n                 (let [next-val (parse-next ctx reader)]\n                   (if (fn? v)\n                     (v next-val)\n                     (let [gensyms (atom {})\n                           ctx (assoc ctx :gensyms gensyms)\n                           ret (syntax-quote ctx reader next-val)]\n                       ret))))\n               (throw-reader\n                reader\n                (str \"Syntax quote not allowed. Use the `:syntax-quote` option\")))\n          \\~\n          (if-let [v (and (:syntax-quote ctx)\n                          (or (:unquote ctx)\n                              true))]\n            (do\n              (r/read-char reader) ;; skip `\n              (let [nc (r/peek-char reader)]\n                (if (identical? nc \\@)\n                  (if-let [v (and\n                              (:syntax-quote ctx)\n                              (or (:unquote-splicing ctx)\n                                  true))]\n                    (do\n                      (r/read-char reader) ;; ignore @\n                      (let [next-val (parse-next ctx reader)]\n                        (if (ifn? v)\n                          (v next-val)\n                          (list 'clojure.core/unquote-splicing next-val))))\n                    (throw-reader\n                     reader\n                     (str \"Syntax unquote splice not allowed. Use the `:syntax-quote` option\")))\n                  (let [next-val (parse-next ctx reader)]\n                    (if (ifn? v)\n                      (v next-val)\n                      (list 'clojure.core/unquote next-val))))))\n            (throw-reader\n             reader\n             (str \"Syntax unquote not allowed. Use the `:syntax-unquote` option\")))\n          \\( (parse-list ctx reader)\n          \\[ (parse-to-delimiter ctx reader \\])\n          \\{ (parse-map ctx reader)\n          (\\} \\] \\)) (let [expected (::expected-delimiter ctx)]\n                       (if (not= expected c)\n                         (let [loc (location reader)]\n                           (r/read-char reader) ;; ignore unexpected\n                           ;; delimiter to be able to\n                           ;; continue reading, fix for\n                           ;; babashka socket REPL\n                           (throw-reader reader\n                                         (str \"Unmatched delimiter: \" c\n                                              (when expected\n                                                (str \", expected: \" expected\n                                                     (when-let [{:keys [:row :col :char]} (::opened-delimiter ctx)]\n                                                       (str \" to match \" char \" at \" [row col])))))\n                                         ctx\n                                         loc))\n                         (do\n                           ;; read delimiter\n                           (r/read-char reader)\n                           ::expected-delimiter)))\n          \\; (parse-comment reader)\n          \\^ (do\n               (r/read-char reader) ;; ignore ^\n               (let [meta-val (parse-next ctx reader)\n                     meta-val (desugar-meta meta-val)\n                     val-val (vary-meta (parse-next ctx reader)\n                                        merge meta-val)]\n                 val-val))\n          \\: (parse-keyword ctx reader)\n          (edn-read ctx reader)))))\n\n(defn parse-next [ctx reader]\n  (if-let [c (and (skip-whitespace ctx reader)\n                  (r/peek-char reader))]\n    (let [loc (location reader)\n          obj (dispatch ctx reader c)]\n      (if (identical? reader obj)\n        (parse-next ctx reader)\n        (if #?(:clj\n               (instance? clojure.lang.IObj obj)\n               :cljs (satisfies? IWithMeta obj))\n          (let [end-loc (location reader)]\n            (vary-meta obj #(assoc %\n                                   (:row-key ctx) (:row loc)\n                                   (:col-key ctx) (:col loc)\n                                   (:end-row-key ctx) (:row end-loc)\n                                   (:end-col-key ctx) (:col end-loc))))\n          obj)))\n    ::eof))\n\n(defn string-reader\n  \"Create reader for strings.\"\n  [s]\n  (r/indexing-push-back-reader\n   (r/string-push-back-reader s)))\n\n(defrecord Options [dispatch deref syntax-quote unquote\n                    unquote-splicing quote fn var\n                    read-eval regex\n                    row-key col-key\n                    end-row-key end-col-key])\n\n(defn normalize-opts [opts]\n  (let [opts (if-let [dispatch (:dispatch opts)]\n               (into (dissoc opts :dispatch)\n                     [(when-let [v (get-in dispatch [\\@])]\n                        [:deref v])\n                      (when-let [v (get-in dispatch [\\`])]\n                        [:syntax-quote v])\n                      (when-let [v (get-in dispatch [\\~])]\n                        (if (fn? v)\n                          [:unquote v]\n                          (when-let [v (:default v)]\n                            [:unquote v])))\n                      (when-let [v (get-in dispatch [\\~ \\@])]\n                        [:unquote-splicing v])\n                      (when-let [v (get-in dispatch [\\'])]\n                        [:quote v])\n                      (when-let [v (get-in dispatch [\\# \\(])]\n                        [:fn v])\n                      (when-let [v (get-in dispatch [\\# \\'])]\n                        [:var v])\n                      (when-let [v (get-in dispatch [\\# \\=])]\n                        [:read-eval v])\n                      (when-let [v (get-in dispatch [\\# \\\"])]\n                        [:regex v])])\n               opts)\n        opts (if (:all opts)\n               (merge {:deref true\n                       :fn true\n                       :quote true\n                       :read-eval true\n                       :regex true\n                       :syntax-quote true\n                       :var true} opts)\n               opts)\n        opts (cond-> opts\n               (not (:row-key opts)) (assoc :row-key :row)\n               (not (:end-row-key opts)) (assoc :end-row-key :end-row)\n               (not (:col-key opts)) (assoc :col-key :col)\n               (not (:end-col-key opts)) (assoc :end-col-key :end-col))]\n    (map->Options opts)))\n\n(defn parse-string [s opts]\n  (let [opts (normalize-opts opts)\n        ^Closeable r (string-reader s)\n        ctx (assoc opts ::expected-delimiter nil)\n        v (parse-next ctx r)]\n    (if (kw-identical? ::eof v) nil v)))\n\n(defn parse-string-all [s opts]\n  (let [opts (normalize-opts opts)\n        ^Closeable r (string-reader s)\n        ctx (assoc opts ::expected-delimiter nil)]\n    (loop [ret (transient [])]\n      (let [next-val (parse-next ctx r)]\n        (if (kw-identical? ::eof next-val)\n          (persistent! ret)\n          (recur (conj! ret next-val)))))))\n\n;;;; Scratch\n\n(comment\n  )\n"]}