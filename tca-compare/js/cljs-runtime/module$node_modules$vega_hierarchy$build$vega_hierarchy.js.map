{
"version":3,
"file":"module$node_modules$vega_hierarchy$build$vega_hierarchy.js",
"lineCount":18,
"mappings":"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",
"sources":["node_modules/vega-hierarchy/build/vega-hierarchy.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_hierarchy$build$vega_hierarchy\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-dataflow'), require('vega-util'), require('d3-hierarchy')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-dataflow', 'vega-util', 'd3-hierarchy'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.vega = global.vega || {}, global.vega.transforms = {}), global.vega, global.vega, global.d3));\n}(this, (function (exports, vegaDataflow, vegaUtil, d3Hierarchy) { 'use strict';\n\n  // Build lookup table mapping tuple keys to tree node instances\n  function lookup(tree, key, filter) {\n    var map = {};\n    tree.each(node => {\n      var t = node.data;\n      if (filter(t)) map[key(t)] = node;\n    });\n    tree.lookup = map;\n    return tree;\n  }\n\n  /**\n    * Nest tuples into a tree structure, grouped by key values.\n    * @constructor\n    * @param {object} params - The parameters for this operator.\n    * @param {Array<function(object): *>} params.keys - The key fields to nest by, in order.\n    * @param {boolean} [params.generate=false] - A boolean flag indicating if\n    *   non-leaf nodes generated by this transform should be included in the\n    *   output. The default (false) includes only the input data (leaf nodes)\n    *   in the data stream.\n    */\n  function Nest(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Nest.Definition = {\n    'type': 'Nest',\n    'metadata': {'treesource': true, 'changes': true},\n    'params': [\n      { 'name': 'keys', 'type': 'field', 'array': true },\n      { 'name': 'generate', 'type': 'boolean' }\n    ]\n  };\n\n  const children = n => n.values;\n\n  vegaUtil.inherits(Nest, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (!pulse.source) {\n        vegaUtil.error('Nest transform requires an upstream data source.');\n      }\n\n      var gen = _.generate,\n          mod = _.modified(),\n          out = pulse.clone(),\n          tree = this.value;\n\n      if (!tree || mod || pulse.changed()) {\n        // collect nodes to remove\n        if (tree) {\n          tree.each(node => {\n            if (node.children && vegaDataflow.isTuple(node.data)) {\n              out.rem.push(node.data);\n            }\n          });\n        }\n\n        // generate new tree structure\n        this.value = tree = d3Hierarchy.hierarchy({\n          values: vegaUtil.array(_.keys)\n            .reduce((n, k) => { n.key(k); return n; }, nest())\n            .entries(out.source)\n        }, children);\n\n        // collect nodes to add\n        if (gen) {\n          tree.each(node => {\n            if (node.children) {\n              node = vegaDataflow.ingest(node.data);\n              out.add.push(node);\n              out.source.push(node);\n            }\n          });\n        }\n\n        // build lookup table\n        lookup(tree, vegaDataflow.tupleid, vegaDataflow.tupleid);\n      }\n\n      out.source.root = tree;\n      return out;\n    }\n  });\n\n  function nest() {\n    const keys = [],\n          nest = {\n            entries: array => entries(apply(array, 0), 0),\n            key: d => (keys.push(d), nest)\n          };\n\n    function apply(array, depth) {\n      if (depth >= keys.length) {\n        return array;\n      }\n\n      const n = array.length,\n            key = keys[depth++],\n            valuesByKey = {},\n            result = {};\n\n      let i = -1, keyValue, value, values;\n\n      while (++i < n) {\n        keyValue = key(value = array[i]) + '';\n        if (values = valuesByKey[keyValue]) {\n          values.push(value);\n        } else {\n          valuesByKey[keyValue] = [value];\n        }\n      }\n\n      for (keyValue in valuesByKey) {\n        result[keyValue] = apply(valuesByKey[keyValue], depth);\n      }\n\n      return result;\n    }\n\n    function entries(map, depth) {\n      if (++depth > keys.length) return map;\n      const array = [];\n      for (const key in map) {\n        array.push({\n          key,\n          values: entries(map[key], depth)\n        });\n      }\n      return array;\n    }\n\n    return nest;\n  }\n\n  /**\n   * Abstract class for tree layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n  function HierarchyLayout(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  const defaultSeparation = (a, b) => a.parent === b.parent ? 1 : 2;\n\n  vegaUtil.inherits(HierarchyLayout, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (!pulse.source || !pulse.source.root) {\n        vegaUtil.error(this.constructor.name\n          + ' transform requires a backing tree data source.');\n      }\n\n      const layout = this.layout(_.method),\n            fields = this.fields,\n            root = pulse.source.root,\n            as = _.as || fields;\n\n      if (_.field) root.sum(_.field); else root.count();\n      if (_.sort) root.sort(vegaDataflow.stableCompare(_.sort, d => d.data));\n\n      setParams(layout, this.params, _);\n      if (layout.separation) {\n        layout.separation(_.separation !== false ? defaultSeparation : vegaUtil.one);\n      }\n\n      try {\n        this.value = layout(root);\n      } catch (err) {\n        vegaUtil.error(err);\n      }\n      root.each(node => setFields(node, fields, as));\n\n      return pulse.reflow(_.modified()).modifies(as).modifies('leaf');\n    }\n  });\n\n  function setParams(layout, params, _) {\n    for (let p, i=0, n=params.length; i<n; ++i) {\n      p = params[i];\n      if (p in _) layout[p](_[p]);\n    }\n  }\n\n  function setFields(node, fields, as) {\n    const t = node.data,\n          n = fields.length - 1;\n    for (let i=0; i<n; ++i) {\n      t[as[i]] = node[fields[i]];\n    }\n    t[as[n]] = node.children ? node.children.length : 0;\n  }\n\n  const Output = ['x', 'y', 'r', 'depth', 'children'];\n\n  /**\n   * Packed circle tree layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size nodes.\n   */\n  function Pack(params) {\n    HierarchyLayout.call(this, params);\n  }\n\n  Pack.Definition = {\n    'type': 'Pack',\n    'metadata': {'tree': true, 'modifies': true},\n    'params': [\n      { 'name': 'field', 'type': 'field' },\n      { 'name': 'sort', 'type': 'compare' },\n      { 'name': 'padding', 'type': 'number', 'default': 0 },\n      { 'name': 'radius', 'type': 'field', 'default': null },\n      { 'name': 'size', 'type': 'number', 'array': true, 'length': 2 },\n      { 'name': 'as', 'type': 'string', 'array': true, 'length': Output.length, 'default': Output }\n    ]\n  };\n\n  vegaUtil.inherits(Pack, HierarchyLayout, {\n    layout: d3Hierarchy.pack,\n    params: ['radius', 'size', 'padding'],\n    fields: Output\n  });\n\n  const Output$1 = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];\n\n  /**\n   * Partition tree layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size nodes.\n   */\n  function Partition(params) {\n    HierarchyLayout.call(this, params);\n  }\n\n  Partition.Definition = {\n    'type': 'Partition',\n    'metadata': {'tree': true, 'modifies': true},\n    'params': [\n      { 'name': 'field', 'type': 'field' },\n      { 'name': 'sort', 'type': 'compare' },\n      { 'name': 'padding', 'type': 'number', 'default': 0 },\n      { 'name': 'round', 'type': 'boolean', 'default': false },\n      { 'name': 'size', 'type': 'number', 'array': true, 'length': 2 },\n      { 'name': 'as', 'type': 'string', 'array': true, 'length': Output$1.length, 'default': Output$1 }\n    ]\n  };\n\n  vegaUtil.inherits(Partition, HierarchyLayout, {\n    layout: d3Hierarchy.partition,\n    params: ['size', 'round', 'padding'],\n    fields: Output$1\n  });\n\n  /**\n    * Stratify a collection of tuples into a tree structure based on\n    * id and parent id fields.\n    * @constructor\n    * @param {object} params - The parameters for this operator.\n    * @param {function(object): *} params.key - Unique key field for each tuple.\n    * @param {function(object): *} params.parentKey - Field with key for parent tuple.\n    */\n  function Stratify(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Stratify.Definition = {\n    'type': 'Stratify',\n    'metadata': {'treesource': true},\n    'params': [\n      { 'name': 'key', 'type': 'field', 'required': true },\n      { 'name': 'parentKey', 'type': 'field', 'required': true  }\n    ]\n  };\n\n  vegaUtil.inherits(Stratify, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (!pulse.source) {\n        vegaUtil.error('Stratify transform requires an upstream data source.');\n      }\n\n      let tree = this.value;\n\n      const mod = _.modified(),\n            out = pulse.fork(pulse.ALL).materialize(pulse.SOURCE),\n            run = !tree\n              || mod\n              || pulse.changed(pulse.ADD_REM)\n              || pulse.modified(_.key.fields)\n              || pulse.modified(_.parentKey.fields);\n\n      // prevent upstream source pollution\n      out.source = out.source.slice();\n\n      if (run) {\n        tree = out.source.length\n          ? lookup(\n              d3Hierarchy.stratify().id(_.key).parentId(_.parentKey)(out.source),\n              _.key,\n              vegaUtil.truthy\n            )\n          : lookup(d3Hierarchy.stratify()([{}]), _.key, _.key);\n      }\n\n      out.source.root = this.value = tree;\n      return out;\n    }\n  });\n\n  var Layouts = {\n    tidy: d3Hierarchy.tree,\n    cluster: d3Hierarchy.cluster\n  };\n\n  const Output$2 = ['x', 'y', 'depth', 'children'];\n\n  /**\n   * Tree layout. Depending on the method parameter, performs either\n   * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n  function Tree(params) {\n    HierarchyLayout.call(this, params);\n  }\n\n  Tree.Definition = {\n    'type': 'Tree',\n    'metadata': {'tree': true, 'modifies': true},\n    'params': [\n      { 'name': 'field', 'type': 'field' },\n      { 'name': 'sort', 'type': 'compare' },\n      { 'name': 'method', 'type': 'enum', 'default': 'tidy', 'values': ['tidy', 'cluster'] },\n      { 'name': 'size', 'type': 'number', 'array': true, 'length': 2 },\n      { 'name': 'nodeSize', 'type': 'number', 'array': true, 'length': 2 },\n      { 'name': 'separation', 'type': 'boolean', 'default': true },\n      { 'name': 'as', 'type': 'string', 'array': true, 'length': Output$2.length, 'default': Output$2 }\n    ]\n  };\n\n  vegaUtil.inherits(Tree, HierarchyLayout, {\n    /**\n     * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.\n     */\n    layout(method) {\n      var m = method || 'tidy';\n      if (vegaUtil.hasOwnProperty(Layouts, m)) return Layouts[m]();\n      else vegaUtil.error('Unrecognized Tree layout method: ' + m);\n    },\n    params: ['size', 'nodeSize'],\n    fields: Output$2\n  });\n\n  /**\n    * Generate tuples representing links between tree nodes.\n    * The resulting tuples will contain 'source' and 'target' fields,\n    * which point to parent and child node tuples, respectively.\n    * @constructor\n    * @param {object} params - The parameters for this operator.\n    */\n  function TreeLinks(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n\n  TreeLinks.Definition = {\n    'type': 'TreeLinks',\n    'metadata': {'tree': true, 'generates': true, 'changes': true},\n    'params': []\n  };\n\n  vegaUtil.inherits(TreeLinks, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const links = this.value,\n            tree = pulse.source && pulse.source.root,\n            out = pulse.fork(pulse.NO_SOURCE),\n            lut = {};\n\n      if (!tree) vegaUtil.error('TreeLinks transform requires a tree data source.');\n\n      if (pulse.changed(pulse.ADD_REM)) {\n        // remove previous links\n        out.rem = links;\n\n        // build lookup table of valid tuples\n        pulse.visit(pulse.SOURCE, t => lut[vegaDataflow.tupleid(t)] = 1);\n\n        // generate links for all edges incident on valid tuples\n        tree.each(node => {\n          const t = node.data,\n                p = node.parent && node.parent.data;\n          if (p && lut[vegaDataflow.tupleid(t)] && lut[vegaDataflow.tupleid(p)]) {\n            out.add.push(vegaDataflow.ingest({source: p, target: t}));\n          }\n        });\n        this.value = out.add;\n      }\n\n      else if (pulse.changed(pulse.MOD)) {\n        // build lookup table of modified tuples\n        pulse.visit(pulse.MOD, t => lut[vegaDataflow.tupleid(t)] = 1);\n\n        // gather links incident on modified tuples\n        links.forEach(link => {\n          if (lut[vegaDataflow.tupleid(link.source)] || lut[vegaDataflow.tupleid(link.target)]) {\n            out.mod.push(link);\n          }\n        });\n      }\n\n      return out;\n    }\n  });\n\n  const Tiles = {\n    binary: d3Hierarchy.treemapBinary,\n    dice: d3Hierarchy.treemapDice,\n    slice: d3Hierarchy.treemapSlice,\n    slicedice: d3Hierarchy.treemapSliceDice,\n    squarify: d3Hierarchy.treemapSquarify,\n    resquarify: d3Hierarchy.treemapResquarify\n  };\n\n  const Output$3 = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];\n\n  /**\n   * Treemap layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size nodes.\n   */\n  function Treemap(params) {\n    HierarchyLayout.call(this, params);\n  }\n\n  Treemap.Definition = {\n    'type': 'Treemap',\n    'metadata': {'tree': true, 'modifies': true},\n    'params': [\n      { 'name': 'field', 'type': 'field' },\n      { 'name': 'sort', 'type': 'compare' },\n      { 'name': 'method', 'type': 'enum', 'default': 'squarify',\n        'values': ['squarify', 'resquarify', 'binary', 'dice', 'slice', 'slicedice'] },\n      { 'name': 'padding', 'type': 'number', 'default': 0 },\n      { 'name': 'paddingInner', 'type': 'number', 'default': 0 },\n      { 'name': 'paddingOuter', 'type': 'number', 'default': 0 },\n      { 'name': 'paddingTop', 'type': 'number', 'default': 0 },\n      { 'name': 'paddingRight', 'type': 'number', 'default': 0 },\n      { 'name': 'paddingBottom', 'type': 'number', 'default': 0 },\n      { 'name': 'paddingLeft', 'type': 'number', 'default': 0 },\n      { 'name': 'ratio', 'type': 'number', 'default': 1.618033988749895 },\n      { 'name': 'round', 'type': 'boolean', 'default': false },\n      { 'name': 'size', 'type': 'number', 'array': true, 'length': 2 },\n      { 'name': 'as', 'type': 'string', 'array': true, 'length': Output$3.length, 'default': Output$3 }\n    ]\n  };\n\n  vegaUtil.inherits(Treemap, HierarchyLayout, {\n    /**\n     * Treemap layout generator. Adds 'method' and 'ratio' parameters\n     * to configure the underlying tile method.\n     */\n    layout() {\n      const x = d3Hierarchy.treemap();\n\n      x.ratio = _ => {\n        const t = x.tile();\n        if (t.ratio) x.tile(t.ratio(_));\n      };\n\n      x.method = _ => {\n        if (vegaUtil.hasOwnProperty(Tiles, _)) x.tile(Tiles[_]);\n        else vegaUtil.error('Unrecognized Treemap layout method: ' + _);\n      };\n\n      return x;\n    },\n\n    params: [\n      'method', 'ratio', 'size', 'round',\n      'padding', 'paddingInner', 'paddingOuter',\n      'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'\n    ],\n\n    fields: Output$3\n  });\n\n  exports.nest = Nest;\n  exports.pack = Pack;\n  exports.partition = Partition;\n  exports.stratify = Stratify;\n  exports.tree = Tree;\n  exports.treelinks = TreeLinks;\n  exports.treemap = Treemap;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","globalThis","self","vega","transforms","d3","vegaDataflow","vegaUtil","d3Hierarchy","lookup","tree","key","filter","map","each","node","t","data","Nest","params","Transform","call","nest","apply","array","depth","keys","length","n","valuesByKey","result","i","keyValue","value","values","push","entries","d","HierarchyLayout","setParams","layout","_","p","Pack","Partition","Stratify","Tree","TreeLinks","Treemap","Definition","children","inherits","transform","pulse","source","error","gen","generate","mod","modified","out","clone","changed","isTuple","rem","hierarchy","reduce","k","ingest","add","tupleid","root","defaultSeparation","a","b","parent","constructor","name","method","fields","as","field","sum","count","sort","stableCompare","separation","one","err","reflow","modifies","Output","pack","Output$1","partition","fork","ALL","materialize","SOURCE","run","ADD_REM","parentKey","slice","stratify","id","parentId","truthy","Layouts","tidy","cluster","Output$2","m","hasOwnProperty","links","NO_SOURCE","lut","visit","target","MOD","forEach","link","Tiles","binary","treemapBinary","dice","treemapDice","treemapSlice","slicedice","treemapSliceDice","squarify","treemapSquarify","resquarify","treemapResquarify","Output$3","x","treemap","ratio","x.ratio","tile","x.method","treelinks","Object","defineProperty"]
}
