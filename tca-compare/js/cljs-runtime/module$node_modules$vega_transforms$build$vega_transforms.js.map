{
"version":3,
"file":"module$node_modules$vega_transforms$build$vega_transforms.js",
"lineCount":113,
"mappings":"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",
"sources":["node_modules/vega-transforms/build/vega-transforms.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_transforms$build$vega_transforms\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util'), require('vega-dataflow'), require('vega-statistics'), require('d3-array'), require('vega-time')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-util', 'vega-dataflow', 'vega-statistics', 'd3-array', 'vega-time'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.vega = global.vega || {}, global.vega.transforms = {}), global.vega, global.vega, global.vega, global.d3, global.vega));\n}(this, (function (exports, vegaUtil, vegaDataflow, vegaStatistics, d3Array, vegaTime) { 'use strict';\n\n  function multikey(f) {\n    return x => {\n      const n = f.length;\n      let i = 1,\n          k = String(f[0](x));\n\n      for (; i<n; ++i) {\n        k += '|' + f[i](x);\n      }\n\n      return k;\n    };\n  }\n\n  function groupkey(fields) {\n    return !fields || !fields.length ? function() { return ''; }\n      : fields.length === 1 ? fields[0]\n      : multikey(fields);\n  }\n\n  function measureName(op, field, as) {\n    return as || (op + (!field ? '' : '_' + field));\n  }\n\n  const noop = () => {};\n\n  const base_op = {\n    init: noop,\n    add:  noop,\n    rem:  noop,\n    idx:  0\n  };\n\n  const AggregateOps = {\n    values: {\n      init:  m => m.cell.store = true,\n      value: m => m.cell.data.values(),\n      idx:  -1\n    },\n    count: {\n      value: m => m.cell.num\n    },\n    __count__: {\n      value: m => m.missing + m.valid\n    },\n    missing: {\n      value: m => m.missing\n    },\n    valid: {\n      value: m => m.valid\n    },\n    sum: {\n      init:  m => m.sum = 0,\n      value: m => m.sum,\n      add:  (m, v) => m.sum += +v,\n      rem:  (m, v) => m.sum -= v\n    },\n    product: {\n      init:  m => m.product = 1,\n      value: m => m.valid ? m.product : undefined,\n      add:  (m, v) => m.product *= v,\n      rem:  (m, v) => m.product /= v\n    },\n    mean: {\n      init:  m => m.mean = 0,\n      value: m => m.valid ? m.mean : undefined,\n      add:  (m, v) => (m.mean_d = v - m.mean, m.mean += m.mean_d / m.valid),\n      rem:  (m, v) => (m.mean_d = v - m.mean, m.mean -= m.valid ? m.mean_d / m.valid : m.mean)\n    },\n    average: {\n      value: m => m.valid ? m.mean : undefined,\n      req:  ['mean'], idx: 1\n    },\n    variance: {\n      init:  m => m.dev = 0,\n      value: m => m.valid > 1 ? m.dev / (m.valid - 1) : undefined,\n      add:  (m, v) => m.dev += m.mean_d * (v - m.mean),\n      rem:  (m, v) => m.dev -= m.mean_d * (v - m.mean),\n      req:  ['mean'], idx: 1\n    },\n    variancep: {\n      value: m => m.valid > 1 ? m.dev / m.valid : undefined,\n      req:  ['variance'], idx: 2\n    },\n    stdev: {\n      value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid - 1)) : undefined,\n      req:  ['variance'], idx: 2\n    },\n    stdevp: {\n      value: m => m.valid > 1 ? Math.sqrt(m.dev / m.valid) : undefined,\n      req:  ['variance'], idx: 2\n    },\n    stderr: {\n      value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid * (m.valid - 1))) : undefined,\n      req:  ['variance'], idx: 2\n    },\n    distinct: {\n      value: m => m.cell.data.distinct(m.get),\n      req:  ['values'], idx: 3\n    },\n    ci0: {\n      value: m => m.cell.data.ci0(m.get),\n      req:  ['values'], idx: 3\n    },\n    ci1: {\n      value: m => m.cell.data.ci1(m.get),\n      req:  ['values'], idx: 3\n    },\n    median: {\n      value: m => m.cell.data.q2(m.get),\n      req:  ['values'], idx: 3\n    },\n    q1: {\n      value: m => m.cell.data.q1(m.get),\n      req: ['values'], idx: 3\n    },\n    q3: {\n      value: m => m.cell.data.q3(m.get),\n      req:  ['values'], idx: 3\n    },\n    min: {\n      init:  m => m.min = undefined,\n      value: m => m.min = (Number.isNaN(m.min) ? m.cell.data.min(m.get) : m.min),\n      add:  (m, v) => { if (v < m.min || m.min === undefined) m.min = v; },\n      rem:  (m, v) => { if (v <= m.min) m.min = NaN; },\n      req:  ['values'], idx: 4\n    },\n    max: {\n      init:  m => m.max = undefined,\n      value: m => m.max = (Number.isNaN(m.max) ? m.cell.data.max(m.get) : m.max),\n      add:  (m, v) => { if (v > m.max || m.max === undefined) m.max = v; },\n      rem:  (m, v) => { if (v >= m.max) m.max = NaN; },\n      req:  ['values'], idx: 4\n    },\n    argmin: {\n      init:  m => m.argmin = undefined,\n      value: m => m.argmin || m.cell.data.argmin(m.get),\n      add:  (m, v, t) => { if (v < m.min) m.argmin = t; },\n      rem:  (m, v) => { if (v <= m.min) m.argmin = undefined; },\n      req:  ['min', 'values'], idx: 3\n    },\n    argmax: {\n      init:  m => m.argmax = undefined,\n      value: m => m.argmax || m.cell.data.argmax(m.get),\n      add:  (m, v, t) => { if (v > m.max) m.argmax = t; },\n      rem:  (m, v) => { if (v >= m.max) m.argmax = undefined; },\n      req:  ['max', 'values'], idx: 3\n    }\n  };\n\n  const ValidAggregateOps = Object.keys(AggregateOps);\n\n  function measure(key, value) {\n    return out => vegaUtil.extend({\n      name: key,\n      out: out || key\n    }, base_op, value);\n  }\n\n  ValidAggregateOps.forEach(key => {\n    AggregateOps[key] = measure(key, AggregateOps[key]);\n  });\n\n  function createMeasure(op, name) {\n    return AggregateOps[op](name);\n  }\n\n  function compareIndex(a, b) {\n    return a.idx - b.idx;\n  }\n\n  function resolve(agg) {\n    const map = {};\n    agg.forEach(a => map[a.name] = a);\n\n    const getreqs = a => {\n      if (!a.req) return;\n      a.req.forEach(key => {\n        if (!map[key]) getreqs(map[key] = AggregateOps[key]());\n      });\n    };\n    agg.forEach(getreqs);\n\n    return Object.values(map).sort(compareIndex);\n  }\n\n  function init() {\n    this.valid = 0;\n    this.missing = 0;\n    this._ops.forEach(op => op.init(this));\n  }\n\n  function add(v, t) {\n    if (v == null || v === '') { ++this.missing; return; }\n    if (v !== v) return;\n    ++this.valid;\n    this._ops.forEach(op => op.add(this, v, t));\n  }\n\n  function rem(v, t) {\n    if (v == null || v === '') { --this.missing; return; }\n    if (v !== v) return;\n    --this.valid;\n    this._ops.forEach(op => op.rem(this, v, t));\n  }\n\n  function set(t) {\n    this._out.forEach(op => t[op.out] = op.value(this));\n    return t;\n  }\n\n  function compileMeasures(agg, field) {\n    const get = field || vegaUtil.identity,\n          ops = resolve(agg),\n          out = agg.slice().sort(compareIndex);\n\n    function ctr(cell) {\n      this._ops = ops;\n      this._out = out;\n      this.cell = cell;\n      this.init();\n    }\n\n    ctr.prototype.init = init;\n    ctr.prototype.add = add;\n    ctr.prototype.rem = rem;\n    ctr.prototype.set = set;\n    ctr.prototype.get = get;\n    ctr.fields = agg.map(op => op.out);\n\n    return ctr;\n  }\n\n  function TupleStore(key) {\n    this._key = key ? vegaUtil.field(key) : vegaDataflow.tupleid;\n    this.reset();\n  }\n\n  const prototype = TupleStore.prototype;\n\n  prototype.reset = function() {\n    this._add = [];\n    this._rem = [];\n    this._ext = null;\n    this._get = null;\n    this._q = null;\n  };\n\n  prototype.add = function(v) {\n    this._add.push(v);\n  };\n\n  prototype.rem = function(v) {\n    this._rem.push(v);\n  };\n\n  prototype.values = function() {\n    this._get = null;\n    if (this._rem.length === 0) return this._add;\n\n    const a = this._add,\n          r = this._rem,\n          k = this._key,\n          n = a.length,\n          m = r.length,\n          x = Array(n - m),\n          map = {};\n    let i, j, v;\n\n    // use unique key field to clear removed values\n    for (i=0; i<m; ++i) {\n      map[k(r[i])] = 1;\n    }\n    for (i=0, j=0; i<n; ++i) {\n      if (map[k(v = a[i])]) {\n        map[k(v)] = 0;\n      } else {\n        x[j++] = v;\n      }\n    }\n\n    this._rem = [];\n    return (this._add = x);\n  };\n\n  // memoizing statistics methods\n\n  prototype.distinct = function(get) {\n    const v = this.values(),\n          map = {};\n\n    let n = v.length,\n        count = 0, s;\n\n    while (--n >= 0) {\n      s = get(v[n]) + '';\n      if (!vegaUtil.hasOwnProperty(map, s)) {\n        map[s] = 1;\n        ++count;\n      }\n    }\n\n    return count;\n  };\n\n  prototype.extent = function(get) {\n    if (this._get !== get || !this._ext) {\n      const v = this.values(),\n            i = vegaUtil.extentIndex(v, get);\n      this._ext = [v[i[0]], v[i[1]]];\n      this._get = get;\n    }\n    return this._ext;\n  };\n\n  prototype.argmin = function(get) {\n    return this.extent(get)[0] || {};\n  };\n\n  prototype.argmax = function(get) {\n    return this.extent(get)[1] || {};\n  };\n\n  prototype.min = function(get) {\n    const m = this.extent(get)[0];\n    return m != null ? get(m) : undefined;\n  };\n\n  prototype.max = function(get) {\n    const m = this.extent(get)[1];\n    return m != null ? get(m) : undefined;\n  };\n\n  prototype.quartile = function(get) {\n    if (this._get !== get || !this._q) {\n      this._q = vegaStatistics.quartiles(this.values(), get);\n      this._get = get;\n    }\n    return this._q;\n  };\n\n  prototype.q1 = function(get) {\n    return this.quartile(get)[0];\n  };\n\n  prototype.q2 = function(get) {\n    return this.quartile(get)[1];\n  };\n\n  prototype.q3 = function(get) {\n    return this.quartile(get)[2];\n  };\n\n  prototype.ci = function(get) {\n    if (this._get !== get || !this._ci) {\n      this._ci = vegaStatistics.bootstrapCI(this.values(), 1000, 0.05, get);\n      this._get = get;\n    }\n    return this._ci;\n  };\n\n  prototype.ci0 = function(get) {\n    return this.ci(get)[0];\n  };\n\n  prototype.ci1 = function(get) {\n    return this.ci(get)[1];\n  };\n\n  /**\n   * Group-by aggregation operator.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.\n   * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.\n   * @param {Array<string>} [params.as] - An array of output field names for aggregated values.\n   * @param {boolean} [params.cross=false] - A flag indicating that the full\n   *   cross-product of groupby values should be generated, including empty cells.\n   *   If true, the drop parameter is ignored and empty cells are retained.\n   * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.\n   */\n  function Aggregate(params) {\n    vegaDataflow.Transform.call(this, null, params);\n\n    this._adds = []; // array of added output tuples\n    this._mods = []; // array of modified output tuples\n    this._alen = 0;  // number of active added tuples\n    this._mlen = 0;  // number of active modified tuples\n    this._drop = true;   // should empty aggregation cells be removed\n    this._cross = false; // produce full cross-product of group-by values\n\n    this._dims = [];   // group-by dimension accessors\n    this._dnames = []; // group-by dimension names\n\n    this._measures = []; // collection of aggregation monoids\n    this._countOnly = false; // flag indicating only count aggregation\n    this._counts = null; // collection of count fields\n    this._prev = null;   // previous aggregation cells\n\n    this._inputs = null;  // array of dependent input tuple field names\n    this._outputs = null; // array of output tuple field names\n  }\n\n  Aggregate.Definition = {\n    'type': 'Aggregate',\n    'metadata': {'generates': true, 'changes': true},\n    'params': [\n      { 'name': 'groupby', 'type': 'field', 'array': true },\n      { 'name': 'ops', 'type': 'enum', 'array': true, 'values': ValidAggregateOps },\n      { 'name': 'fields', 'type': 'field', 'null': true, 'array': true },\n      { 'name': 'as', 'type': 'string', 'null': true, 'array': true },\n      { 'name': 'drop', 'type': 'boolean', 'default': true },\n      { 'name': 'cross', 'type': 'boolean', 'default': false },\n      { 'name': 'key', 'type': 'field' }\n    ]\n  };\n\n  vegaUtil.inherits(Aggregate, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const aggr = this,\n            out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n            mod = _.modified();\n\n      aggr.stamp = out.stamp;\n\n      if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n        aggr._prev = aggr.value;\n        aggr.value = mod ? aggr.init(_) : {};\n        pulse.visit(pulse.SOURCE, t => aggr.add(t));\n      } else {\n        aggr.value = aggr.value || aggr.init(_);\n        pulse.visit(pulse.REM, t => aggr.rem(t));\n        pulse.visit(pulse.ADD, t => aggr.add(t));\n      }\n\n      // Indicate output fields and return aggregate tuples.\n      out.modifies(aggr._outputs);\n\n      // Should empty cells be dropped?\n      aggr._drop = _.drop !== false;\n\n      // If domain cross-product requested, generate empty cells as needed\n      // and ensure that empty cells are not dropped\n      if (_.cross && aggr._dims.length > 1) {\n        aggr._drop = false;\n        aggr.cross();\n      }\n\n      if (pulse.clean() && aggr._drop) {\n        out.clean(true).runAfter(() => this.clean());\n      }\n\n      return aggr.changes(out);\n    },\n\n    cross() {\n      const aggr = this,\n            curr = aggr.value,\n            dims = aggr._dnames,\n            vals = dims.map(() => ({})),\n            n = dims.length;\n\n      // collect all group-by domain values\n      function collect(cells) {\n        let key, i, t, v;\n        for (key in cells) {\n          t = cells[key].tuple;\n          for (i=0; i<n; ++i) {\n            vals[i][(v = t[dims[i]])] = v;\n          }\n        }\n      }\n      collect(aggr._prev);\n      collect(curr);\n\n      // iterate over key cross-product, create cells as needed\n      function generate(base, tuple, index) {\n        const name = dims[index],\n            v = vals[index++];\n\n        for (const k in v) {\n          const key = base ? base + '|' + k : k;\n          tuple[name] = v[k];\n          if (index < n) generate(key, tuple, index);\n          else if (!curr[key]) aggr.cell(key, tuple);\n        }\n      }\n      generate('', {}, 0);\n    },\n\n    init(_) {\n      // initialize input and output fields\n      const inputs = (this._inputs = []),\n            outputs = (this._outputs = []),\n            inputMap = {};\n\n      function inputVisit(get) {\n        const fields = vegaUtil.array(vegaUtil.accessorFields(get)),\n              n = fields.length;\n        let i = 0, f;\n        for (; i<n; ++i) {\n          if (!inputMap[f=fields[i]]) {\n            inputMap[f] = 1;\n            inputs.push(f);\n          }\n        }\n      }\n\n      // initialize group-by dimensions\n      this._dims = vegaUtil.array(_.groupby);\n      this._dnames = this._dims.map(d => {\n        var dname = vegaUtil.accessorName(d);\n        inputVisit(d);\n        outputs.push(dname);\n        return dname;\n      });\n      this.cellkey = _.key ? _.key : groupkey(this._dims);\n\n      // initialize aggregate measures\n      this._countOnly = true;\n      this._counts = [];\n      this._measures = [];\n\n      const fields = _.fields || [null],\n            ops = _.ops || ['count'],\n            as = _.as || [],\n            n = fields.length,\n            map = {};\n      let field, op, m, mname, outname, i;\n\n      if (n !== ops.length) {\n        vegaUtil.error('Unmatched number of fields and aggregate ops.');\n      }\n\n      for (i=0; i<n; ++i) {\n        field = fields[i];\n        op = ops[i];\n\n        if (field == null && op !== 'count') {\n          vegaUtil.error('Null aggregate field specified.');\n        }\n        mname = vegaUtil.accessorName(field);\n        outname = measureName(op, mname, as[i]);\n        outputs.push(outname);\n\n        if (op === 'count') {\n          this._counts.push(outname);\n          continue;\n        }\n\n        m = map[mname];\n        if (!m) {\n          inputVisit(field);\n          m = (map[mname] = []);\n          m.field = field;\n          this._measures.push(m);\n        }\n\n        if (op !== 'count') this._countOnly = false;\n        m.push(createMeasure(op, outname));\n      }\n\n      this._measures = this._measures.map(m => compileMeasures(m, m.field));\n\n      return {}; // aggregation cells (this.value)\n    },\n\n    // -- Cell Management -----\n\n    cellkey: groupkey(),\n\n    cell(key, t) {\n      let cell = this.value[key];\n      if (!cell) {\n        cell = this.value[key] = this.newcell(key, t);\n        this._adds[this._alen++] = cell;\n      } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {\n        cell.stamp = this.stamp;\n        this._adds[this._alen++] = cell;\n      } else if (cell.stamp < this.stamp) {\n        cell.stamp = this.stamp;\n        this._mods[this._mlen++] = cell;\n      }\n      return cell;\n    },\n\n    newcell(key, t) {\n      const cell = {\n        key:   key,\n        num:   0,\n        agg:   null,\n        tuple: this.newtuple(t, this._prev && this._prev[key]),\n        stamp: this.stamp,\n        store: false\n      };\n\n      if (!this._countOnly) {\n        const measures = this._measures,\n              n = measures.length;\n\n        cell.agg = Array(n);\n        for (let i=0; i<n; ++i) {\n          cell.agg[i] = new measures[i](cell);\n        }\n      }\n\n      if (cell.store) {\n        cell.data = new TupleStore();\n      }\n\n      return cell;\n    },\n\n    newtuple(t, p) {\n      const names = this._dnames,\n            dims = this._dims,\n            n = dims.length,\n            x = {};\n\n      for (let i=0; i<n; ++i) {\n        x[names[i]] = dims[i](t);\n      }\n\n      return p ? vegaDataflow.replace(p.tuple, x) : vegaDataflow.ingest(x);\n    },\n\n    clean() {\n      const cells = this.value;\n      for (const key in cells) {\n        if (cells[key].num === 0) {\n          delete cells[key];\n        }\n      }\n    },\n\n    // -- Process Tuples -----\n\n    add(t) {\n      const key = this.cellkey(t),\n            cell = this.cell(key, t);\n\n      cell.num += 1;\n      if (this._countOnly) return;\n\n      if (cell.store) cell.data.add(t);\n\n      const agg = cell.agg;\n      for (let i=0, n=agg.length; i<n; ++i) {\n        agg[i].add(agg[i].get(t), t);\n      }\n    },\n\n    rem(t) {\n      const key = this.cellkey(t),\n            cell = this.cell(key, t);\n\n      cell.num -= 1;\n      if (this._countOnly) return;\n\n      if (cell.store) cell.data.rem(t);\n\n      const agg = cell.agg;\n      for (let i=0, n=agg.length; i<n; ++i) {\n        agg[i].rem(agg[i].get(t), t);\n      }\n    },\n\n    celltuple(cell) {\n      const tuple = cell.tuple,\n            counts = this._counts;\n\n      // consolidate stored values\n      if (cell.store) {\n        cell.data.values();\n      }\n\n      // update tuple properties\n      for (let i=0, n=counts.length; i<n; ++i) {\n        tuple[counts[i]] = cell.num;\n      }\n      if (!this._countOnly) {\n        const agg = cell.agg;\n        for (let i=0, n=agg.length; i<n; ++i) {\n          agg[i].set(tuple);\n        }\n      }\n\n      return tuple;\n    },\n\n    changes(out) {\n      const adds = this._adds,\n            mods = this._mods,\n            prev = this._prev,\n            drop = this._drop,\n            add = out.add,\n            rem = out.rem,\n            mod = out.mod;\n\n      let cell, key, i, n;\n\n      if (prev) for (key in prev) {\n        cell = prev[key];\n        if (!drop || cell.num) rem.push(cell.tuple);\n      }\n\n      for (i=0, n=this._alen; i<n; ++i) {\n        add.push(this.celltuple(adds[i]));\n        adds[i] = null; // for garbage collection\n      }\n\n      for (i=0, n=this._mlen; i<n; ++i) {\n        cell = mods[i];\n        (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));\n        mods[i] = null; // for garbage collection\n      }\n\n      this._alen = this._mlen = 0; // reset list of active cells\n      this._prev = null;\n      return out;\n    }\n  });\n\n  // epsilon bias to offset floating point error (#1737)\n  const EPSILON = 1e-14;\n\n  /**\n   * Generates a binning function for discretizing data.\n   * @constructor\n   * @param {object} params - The parameters for this operator. The\n   *   provided values should be valid options for the {@link bin} function.\n   * @param {function(object): *} params.field - The data field to bin.\n   */\n  function Bin(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Bin.Definition = {\n    'type': 'Bin',\n    'metadata': {'modifies': true},\n    'params': [\n      { 'name': 'field', 'type': 'field', 'required': true },\n      { 'name': 'interval', 'type': 'boolean', 'default': true },\n      { 'name': 'anchor', 'type': 'number' },\n      { 'name': 'maxbins', 'type': 'number', 'default': 20 },\n      { 'name': 'base', 'type': 'number', 'default': 10 },\n      { 'name': 'divide', 'type': 'number', 'array': true, 'default': [5, 2] },\n      { 'name': 'extent', 'type': 'number', 'array': true, 'length': 2, 'required': true },\n      { 'name': 'span', 'type': 'number' },\n      { 'name': 'step', 'type': 'number' },\n      { 'name': 'steps', 'type': 'number', 'array': true },\n      { 'name': 'minstep', 'type': 'number', 'default': 0 },\n      { 'name': 'nice', 'type': 'boolean', 'default': true },\n      { 'name': 'name', 'type': 'string' },\n      { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': ['bin0', 'bin1'] }\n    ]\n  };\n\n  vegaUtil.inherits(Bin, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const band = _.interval !== false,\n          bins = this._bins(_),\n          start = bins.start,\n          step = bins.step,\n          as = _.as || ['bin0', 'bin1'],\n          b0 = as[0],\n          b1 = as[1];\n\n      let flag;\n      if (_.modified()) {\n        pulse = pulse.reflow(true);\n        flag = pulse.SOURCE;\n      } else {\n        flag = pulse.modified(vegaUtil.accessorFields(_.field)) ? pulse.ADD_MOD : pulse.ADD;\n      }\n\n      pulse.visit(flag, band\n        ? t => {\n            const v = bins(t);\n            // minimum bin value (inclusive)\n            t[b0] = v;\n            // maximum bin value (exclusive)\n            // use convoluted math for better floating point agreement\n            // see https://github.com/vega/vega/issues/830\n            // infinite values propagate through this formula! #2227\n            t[b1] = v == null ? null : start + step * (1 + (v - start) / step);\n          }\n        : t => t[b0] = bins(t)\n      );\n\n      return pulse.modifies(band ? as : b0);\n    },\n\n    _bins(_) {\n      if (this.value && !_.modified()) {\n        return this.value;\n      }\n\n      const field = _.field,\n            bins  = vegaStatistics.bin(_),\n            step  = bins.step;\n      let start = bins.start,\n          stop  = start + Math.ceil((bins.stop - start) / step) * step,\n          a, d;\n\n      if ((a = _.anchor) != null) {\n        d = a - (start + step * Math.floor((a - start) / step));\n        start += d;\n        stop += d;\n      }\n\n      const f = function(t) {\n        let v = vegaUtil.toNumber(field(t));\n        return v == null ? null\n          : v < start ? -Infinity\n          : v > stop ? +Infinity\n          : (\n              v = Math.max(start, Math.min(v, stop - step)),\n              start + step * Math.floor(EPSILON + (v - start) / step)\n            );\n      };\n\n      f.start = start;\n      f.stop = bins.stop;\n      f.step = step;\n\n      return this.value = vegaUtil.accessor(\n        f,\n        vegaUtil.accessorFields(field),\n        _.name || 'bin_' + vegaUtil.accessorName(field)\n      );\n    }\n  });\n\n  function SortedList(idFunc, source, input) {\n    const $ = idFunc;\n    let data = source || [],\n        add = input || [],\n        rem = {},\n        cnt = 0;\n\n    return {\n      add: t => add.push(t),\n      remove: t => rem[$(t)] = ++cnt,\n      size: () => data.length,\n      data: (compare, resort) => {\n        if (cnt) {\n          data = data.filter(t => !rem[$(t)]);\n          rem = {};\n          cnt = 0;\n        }\n        if (resort && compare) {\n          data.sort(compare);\n        }\n        if (add.length) {\n          data = compare\n            ? vegaUtil.merge(compare, data, add.sort(compare))\n            : data.concat(add);\n          add = [];\n        }\n        return data;\n      }\n    };\n  }\n\n  /**\n   * Collects all data tuples that pass through this operator.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - An optional\n   *   comparator function for additionally sorting the collected tuples.\n   */\n  function Collect(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n\n  Collect.Definition = {\n    'type': 'Collect',\n    'metadata': {'source': true},\n    'params': [\n      { 'name': 'sort', 'type': 'compare' }\n    ]\n  };\n\n  vegaUtil.inherits(Collect, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.ALL),\n            list = SortedList(vegaDataflow.tupleid, this.value, out.materialize(out.ADD).add),\n            sort = _.sort,\n            mod = pulse.changed() || (sort &&\n                  (_.modified('sort') || pulse.modified(sort.fields)));\n\n      out.visit(out.REM, list.remove);\n\n      this.modified(mod);\n      this.value = out.source = list.data(vegaDataflow.stableCompare(sort), mod);\n\n      // propagate tree root if defined\n      if (pulse.source && pulse.source.root) {\n        this.value.root = pulse.source.root;\n      }\n\n      return out;\n    }\n  });\n\n  /**\n   * Generates a comparator function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<string|function>} params.fields - The fields to compare.\n   * @param {Array<string>} [params.orders] - The sort orders.\n   *   Each entry should be one of \"ascending\" (default) or \"descending\".\n   */\n  function Compare(params) {\n    vegaDataflow.Operator.call(this, null, update, params);\n  }\n\n  vegaUtil.inherits(Compare, vegaDataflow.Operator);\n\n  function update(_) {\n    return (this.value && !_.modified())\n      ? this.value\n      : vegaUtil.compare(_.fields, _.orders);\n  }\n\n  /**\n   * Count regexp-defined pattern occurrences in a text field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - An accessor for the text field.\n   * @param {string} [params.pattern] - RegExp string defining the text pattern.\n   * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.\n   * @param {string} [params.stopwords] - RegExp string of words to ignore.\n   */\n  function CountPattern(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  CountPattern.Definition = {\n    'type': 'CountPattern',\n    'metadata': {'generates': true, 'changes': true},\n    'params': [\n      { 'name': 'field', 'type': 'field', 'required': true },\n      { 'name': 'case', 'type': 'enum', 'values': ['upper', 'lower', 'mixed'], 'default': 'mixed' },\n      { 'name': 'pattern', 'type': 'string', 'default': '[\\\\w\"]+' },\n      { 'name': 'stopwords', 'type': 'string', 'default': '' },\n      { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': ['text', 'count'] }\n    ]\n  };\n\n  function tokenize(text, tcase, match) {\n    switch (tcase) {\n      case 'upper': text = text.toUpperCase(); break;\n      case 'lower': text = text.toLowerCase(); break;\n    }\n    return text.match(match);\n  }\n\n  vegaUtil.inherits(CountPattern, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const process = update => tuple => {\n        var tokens = tokenize(get(tuple), _.case, match) || [], t;\n        for (var i=0, n=tokens.length; i<n; ++i) {\n          if (!stop.test(t = tokens[i])) update(t);\n        }\n      };\n\n      const init = this._parameterCheck(_, pulse),\n            counts = this._counts,\n            match = this._match,\n            stop = this._stop,\n            get = _.field,\n            as = _.as || ['text', 'count'],\n            add = process(t => counts[t] = 1 + (counts[t] || 0)),\n            rem = process(t => counts[t] -= 1);\n\n      if (init) {\n        pulse.visit(pulse.SOURCE, add);\n      } else {\n        pulse.visit(pulse.ADD, add);\n        pulse.visit(pulse.REM, rem);\n      }\n\n      return this._finish(pulse, as); // generate output tuples\n    },\n\n    _parameterCheck(_, pulse) {\n      let init = false;\n\n      if (_.modified('stopwords') || !this._stop) {\n        this._stop = new RegExp('^' + (_.stopwords || '') + '$', 'i');\n        init = true;\n      }\n\n      if (_.modified('pattern') || !this._match) {\n        this._match = new RegExp((_.pattern || '[\\\\w\\']+'), 'g');\n        init = true;\n      }\n\n      if (_.modified('field') || pulse.modified(_.field.fields)) {\n        init = true;\n      }\n\n      if (init) this._counts = {};\n      return init;\n    },\n\n    _finish(pulse, as) {\n      const counts = this._counts,\n            tuples = this._tuples || (this._tuples = {}),\n            text = as[0],\n            count = as[1],\n            out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n      let w, t, c;\n\n      for (w in counts) {\n        t = tuples[w];\n        c = counts[w] || 0;\n        if (!t && c) {\n          tuples[w] = (t = vegaDataflow.ingest({}));\n          t[text] = w;\n          t[count] = c;\n          out.add.push(t);\n        } else if (c === 0) {\n          if (t) out.rem.push(t);\n          counts[w] = null;\n          tuples[w] = null;\n        } else if (t[count] !== c) {\n          t[count] = c;\n          out.mod.push(t);\n        }\n      }\n\n      return out.modifies(as);\n    }\n  });\n\n  /**\n   * Perform a cross-product of a tuple stream with itself.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object):boolean} [params.filter] - An optional filter\n   *   function for selectively including tuples in the cross product.\n   * @param {Array<string>} [params.as] - The names of the output fields.\n   */\n  function Cross(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Cross.Definition = {\n    'type': 'Cross',\n    'metadata': {'generates': true},\n    'params': [\n      { 'name': 'filter', 'type': 'expr' },\n      { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': ['a', 'b'] }\n    ]\n  };\n\n  vegaUtil.inherits(Cross, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            as = _.as || ['a', 'b'],\n            a = as[0], b = as[1],\n            reset = !this.value\n                || pulse.changed(pulse.ADD_REM)\n                || _.modified('as')\n                || _.modified('filter');\n\n      let data = this.value;\n      if (reset) {\n        if (data) out.rem = data;\n        data = pulse.materialize(pulse.SOURCE).source;\n        out.add = this.value = cross(data, a, b, _.filter || vegaUtil.truthy);\n      } else {\n        out.mod = data;\n      }\n\n      out.source = this.value;\n      return out.modifies(as);\n    }\n  });\n\n  function cross(input, a, b, filter) {\n    var data = [],\n        t = {},\n        n = input.length,\n        i = 0,\n        j, left;\n\n    for (; i<n; ++i) {\n      t[a] = left = input[i];\n      for (j=0; j<n; ++j) {\n        t[b] = input[j];\n        if (filter(t)) {\n          data.push(vegaDataflow.ingest(t));\n          t = {};\n          t[a] = left;\n        }\n      }\n    }\n\n    return data;\n  }\n\n  const Distributions = {\n    kde:       vegaStatistics.randomKDE,\n    mixture:   vegaStatistics.randomMixture,\n    normal:    vegaStatistics.randomNormal,\n    lognormal: vegaStatistics.randomLogNormal,\n    uniform:   vegaStatistics.randomUniform\n  };\n\n  const DISTRIBUTIONS = 'distributions',\n        FUNCTION = 'function',\n        FIELD = 'field';\n\n  /**\n   * Parse a parameter object for a probability distribution.\n   * @param {object} def - The distribution parameter object.\n   * @param {function():Array<object>} - A method for requesting\n   *   source data. Used for distributions (such as KDE) that\n   *   require sample data points. This method will only be\n   *   invoked if the 'from' parameter for a target data source\n   *   is not provided. Typically this method returns backing\n   *   source data for a Pulse object.\n   * @return {object} - The output distribution object.\n   */\n  function parse(def, data) {\n    const func = def[FUNCTION];\n    if (!vegaUtil.hasOwnProperty(Distributions, func)) {\n      vegaUtil.error('Unknown distribution function: ' + func);\n    }\n\n    const d = Distributions[func]();\n\n    for (const name in def) {\n      // if data field, extract values\n      if (name === FIELD) {\n        d.data((def.from || data()).map(def[name]));\n      }\n\n      // if distribution mixture, recurse to parse each definition\n      else if (name === DISTRIBUTIONS) {\n        d[name](def[name].map(_ => parse(_, data)));\n      }\n\n      // otherwise, simply set the parameter\n      else if (typeof d[name] === FUNCTION) {\n        d[name](def[name]);\n      }\n    }\n\n    return d;\n  }\n\n  /**\n   * Grid sample points for a probability density. Given a distribution and\n   * a sampling extent, will generate points suitable for plotting either\n   * PDF (probability density function) or CDF (cumulative distribution\n   * function) curves.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {object} params.distribution - The probability distribution. This\n   *   is an object parameter dependent on the distribution type.\n   * @param {string} [params.method='pdf'] - The distribution method to sample.\n   *   One of 'pdf' or 'cdf'.\n   * @param {Array<number>} [params.extent] - The [min, max] extent over which\n   *   to sample the distribution. This argument is required in most cases, but\n   *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method\n   *   that returns numerical sample points from which the extent can be deduced.\n   * @param {number} [params.minsteps=25] - The minimum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.steps] - The exact number of curve samples for\n   *   plotting the density. If specified, overrides both minsteps and maxsteps\n   *   to set an exact number of uniform samples. Useful in conjunction with\n   *   a fixed extent to ensure consistent sample points for stacked densities.\n   */\n  function Density(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  var distributions = [\n    {\n      'key': {'function': 'normal'},\n      'params': [\n        { 'name': 'mean', 'type': 'number', 'default': 0 },\n        { 'name': 'stdev', 'type': 'number', 'default': 1 }\n      ]\n    },\n    {\n      'key': {'function': 'lognormal'},\n      'params': [\n        { 'name': 'mean', 'type': 'number', 'default': 0 },\n        { 'name': 'stdev', 'type': 'number', 'default': 1 }\n      ]\n    },\n    {\n      'key': {'function': 'uniform'},\n      'params': [\n        { 'name': 'min', 'type': 'number', 'default': 0 },\n        { 'name': 'max', 'type': 'number', 'default': 1 }\n      ]\n    },\n    {\n      'key': {'function': 'kde'},\n      'params': [\n        { 'name': 'field', 'type': 'field', 'required': true },\n        { 'name': 'from', 'type': 'data' },\n        { 'name': 'bandwidth', 'type': 'number', 'default': 0 }\n      ]\n    }\n  ];\n\n  var mixture = {\n    'key': {'function': 'mixture'},\n    'params': [\n      { 'name': 'distributions', 'type': 'param', 'array': true,\n        'params': distributions },\n      { 'name': 'weights', 'type': 'number', 'array': true }\n    ]\n  };\n\n  Density.Definition = {\n    'type': 'Density',\n    'metadata': {'generates': true},\n    'params': [\n      { 'name': 'extent', 'type': 'number', 'array': true, 'length': 2 },\n      { 'name': 'steps', 'type': 'number' },\n      { 'name': 'minsteps', 'type': 'number', 'default': 25 },\n      { 'name': 'maxsteps', 'type': 'number', 'default': 200 },\n      { 'name': 'method', 'type': 'string', 'default': 'pdf',\n        'values': ['pdf', 'cdf'] },\n      { 'name': 'distribution', 'type': 'param',\n        'params': distributions.concat(mixture) },\n      { 'name': 'as', 'type': 'string', 'array': true,\n        'default': ['value', 'density'] }\n    ]\n  };\n\n  vegaUtil.inherits(Density, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n      if (!this.value || pulse.changed() || _.modified()) {\n        const dist = parse(_.distribution, source(pulse)),\n              minsteps = _.steps || _.minsteps || 25,\n              maxsteps = _.steps || _.maxsteps || 200;\n        let method = _.method || 'pdf';\n\n        if (method !== 'pdf' && method !== 'cdf') {\n          vegaUtil.error('Invalid density method: ' + method);\n        }\n        if (!_.extent && !dist.data) {\n          vegaUtil.error('Missing density extent parameter.');\n        }\n        method = dist[method];\n\n        const as = _.as || ['value', 'density'],\n              domain = _.extent || vegaUtil.extent(dist.data()),\n              values = vegaStatistics.sampleCurve(method, domain, minsteps, maxsteps)\n                .map(v => {\n                  const tuple = {};\n                  tuple[as[0]] = v[0];\n                  tuple[as[1]] = v[1];\n                  return vegaDataflow.ingest(tuple);\n                });\n\n        if (this.value) out.rem = this.value;\n        this.value = out.add = out.source = values;\n      }\n\n      return out;\n    }\n  });\n\n  function source(pulse) {\n    return () => pulse.materialize(pulse.SOURCE).source;\n  }\n\n  // use either provided alias or accessor field name\n  function fieldNames(fields, as) {\n    if (!fields) return null;\n    return fields.map((f, i) => as[i] || vegaUtil.accessorName(f));\n  }\n\n  function partition(data, groupby, field) {\n    const groups = [],\n          get = f => f(t);\n    let map, i, n, t, k, g;\n\n    // partition data points into groups\n    if (groupby == null) {\n      groups.push(data.map(field));\n    } else {\n      for (map={}, i=0, n=data.length; i<n; ++i) {\n        t = data[i];\n        k = groupby.map(get);\n        g = map[k];\n        if (!g) {\n          map[k] = (g = []);\n          g.dims = k;\n          groups.push(g);\n        }\n        g.push(field(t));\n      }\n    }\n\n    return groups;\n  }\n\n  const Output = 'bin';\n\n  /**\n   * Dot density binning for dot plot construction.\n   * Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n   * https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to bin.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {number} [params.step] - The step size (bin width) within which dots should be\n   *   stacked. Defaults to 1/30 of the extent of the data *field*.\n   * @param {boolean} [params.smooth=false] - A boolean flag indicating if dot density\n   *   stacks should be smoothed to reduce variance.\n   */\n  function DotBin(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  DotBin.Definition = {\n    'type': 'DotBin',\n    'metadata': {'modifies': true},\n    'params': [\n      { 'name': 'field', 'type': 'field', 'required': true },\n      { 'name': 'groupby', 'type': 'field', 'array': true },\n      { 'name': 'step', 'type': 'number' },\n      { 'name': 'smooth', 'type': 'boolean', 'default': false },\n      { 'name': 'as', 'type': 'string', 'default': Output }\n    ]\n  };\n\n  const autostep = (data, field) => vegaUtil.span(vegaUtil.extent(data, field)) / 30;\n\n  vegaUtil.inherits(DotBin, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (this.value && !(_.modified() || pulse.changed())) {\n        return pulse; // early exit\n      }\n\n      const source = pulse.materialize(pulse.SOURCE).source,\n            groups = partition(pulse.source, _.groupby, vegaUtil.identity),\n            smooth = _.smooth || false,\n            field = _.field,\n            step = _.step || autostep(source, field),\n            sort = vegaDataflow.stableCompare((a, b) => field(a) - field(b)),\n            as = _.as || Output,\n            n = groups.length;\n\n      // compute dotplot bins per group\n      let min = Infinity, max = -Infinity, i = 0, j;\n      for (; i<n; ++i) {\n        const g = groups[i].sort(sort);\n        j = -1;\n        for (const v of vegaStatistics.dotbin(g, step, smooth, field)) {\n          if (v < min) min = v;\n          if (v > max) max = v;\n          g[++j][as] = v;\n        }\n      }\n\n      this.value = {\n        start: min,\n        stop: max,\n        step: step\n      };\n      return pulse.reflow(true).modifies(as);\n    }\n  });\n\n  /**\n   * Wraps an expression function with access to external parameters.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function} params.expr - The expression function. The\n   *  function should accept both a datum and a parameter object.\n   *  This operator's value will be a new function that wraps the\n   *  expression function with access to this operator's parameters.\n   */\n  function Expression(params) {\n    vegaDataflow.Operator.call(this, null, update$1, params);\n    this.modified(true);\n  }\n\n  vegaUtil.inherits(Expression, vegaDataflow.Operator);\n\n  function update$1(_) {\n    const expr = _.expr;\n    return this.value && !_.modified('expr')\n      ? this.value\n      : vegaUtil.accessor(\n          datum => expr(datum, _),\n          vegaUtil.accessorFields(expr),\n          vegaUtil.accessorName(expr)\n        );\n  }\n\n  /**\n   * Computes extents (min/max) for a data field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The field over which to compute extends.\n   */\n  function Extent(params) {\n    vegaDataflow.Transform.call(this, [undefined, undefined], params);\n  }\n\n  Extent.Definition = {\n    'type': 'Extent',\n    'metadata': {},\n    'params': [\n      { 'name': 'field', 'type': 'field', 'required': true }\n    ]\n  };\n\n  vegaUtil.inherits(Extent, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const extent = this.value,\n            field = _.field,\n            mod = pulse.changed()\n              || pulse.modified(field.fields)\n              || _.modified('field');\n\n      let min = extent[0],\n          max = extent[1];\n      if (mod || min == null) {\n        min = +Infinity;\n        max = -Infinity;\n      }\n\n      pulse.visit(mod ? pulse.SOURCE : pulse.ADD, t => {\n        const v = vegaUtil.toNumber(field(t));\n        if (v != null) {\n          // NaNs will fail all comparisons!\n          if (v < min) min = v;\n          if (v > max) max = v;\n        }\n      });\n\n      if (!Number.isFinite(min) || !Number.isFinite(max)) {\n        let name = vegaUtil.accessorName(field);\n        if (name) name = ` for field \"${name}\"`;\n        pulse.dataflow.warn(`Infinite extent${name}: [${min}, ${max}]`);\n        min = max = undefined;\n      }\n      this.value = [min, max];\n    }\n  });\n\n  /**\n   * Provides a bridge between a parent transform and a target subflow that\n   * consumes only a subset of the tuples that pass through the parent.\n   * @constructor\n   * @param {Pulse} pulse - A pulse to use as the value of this operator.\n   * @param {Transform} parent - The parent transform (typically a Facet instance).\n   */\n  function Subflow(pulse, parent) {\n    vegaDataflow.Operator.call(this, pulse);\n    this.parent = parent;\n    this.count = 0;\n  }\n\n  vegaUtil.inherits(Subflow, vegaDataflow.Operator, {\n    /**\n     * Routes pulses from this subflow to a target transform.\n     * @param {Transform} target - A transform that receives the subflow of tuples.\n     */\n    connect(target) {\n      this.detachSubflow = target.detachSubflow;\n      this.targets().add(target);\n      return (target.source = this);\n    },\n\n    /**\n     * Add an 'add' tuple to the subflow pulse.\n     * @param {Tuple} t - The tuple being added.\n     */\n    add(t) {\n      this.count += 1;\n      this.value.add.push(t);\n    },\n\n    /**\n     * Add a 'rem' tuple to the subflow pulse.\n     * @param {Tuple} t - The tuple being removed.\n     */\n    rem(t) {\n      this.count -= 1;\n      this.value.rem.push(t);\n    },\n\n    /**\n     * Add a 'mod' tuple to the subflow pulse.\n     * @param {Tuple} t - The tuple being modified.\n     */\n    mod(t) {\n      this.value.mod.push(t);\n    },\n\n    /**\n     * Re-initialize this operator's pulse value.\n     * @param {Pulse} pulse - The pulse to copy from.\n     * @see Pulse.init\n     */\n    init(pulse) {\n      this.value.init(pulse, pulse.NO_SOURCE);\n    },\n\n    /**\n     * Evaluate this operator. This method overrides the\n     * default behavior to simply return the contained pulse value.\n     * @return {Pulse}\n     */\n    evaluate() {\n      // assert: this.value.stamp === pulse.stamp\n      return this.value;\n    }\n  });\n\n  /**\n   * Facets a dataflow into a set of subflows based on a key.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Dataflow, string): Operator} params.subflow - A function\n   *   that generates a subflow of operators and returns its root operator.\n   * @param {function(object): *} params.key - The key field to facet by.\n   */\n  function Facet(params) {\n    vegaDataflow.Transform.call(this, {}, params);\n    this._keys = vegaUtil.fastmap(); // cache previously calculated key values\n\n    // keep track of active subflows, use as targets array for listeners\n    // this allows us to limit propagation to only updated subflows\n    const a = this._targets = [];\n    a.active = 0;\n    a.forEach = f => {\n      for (let i=0, n=a.active; i<n; ++i) {\n        f(a[i], i, a);\n      }\n    };\n  }\n\n  vegaUtil.inherits(Facet, vegaDataflow.Transform, {\n    activate(flow) {\n      this._targets[this._targets.active++] = flow;\n    },\n\n    // parent argument provided by PreFacet subclass\n    subflow(key, flow, pulse, parent) {\n      const flows = this.value;\n      let sf = vegaUtil.hasOwnProperty(flows, key) && flows[key],\n          df, p;\n\n      if (!sf) {\n        p = parent || (p = this._group[key]) && p.tuple;\n        df = pulse.dataflow;\n        sf = new Subflow(pulse.fork(pulse.NO_SOURCE), this);\n        df.add(sf).connect(flow(df, key, p));\n        flows[key] = sf;\n        this.activate(sf);\n      } else if (sf.value.stamp < pulse.stamp) {\n        sf.init(pulse);\n        this.activate(sf);\n      }\n\n      return sf;\n    },\n\n    clean() {\n      const flows = this.value;\n      for (const key in flows) {\n        if (flows[key].count === 0) {\n          const detach = flows[key].detachSubflow;\n          if (detach) detach();\n          delete flows[key];\n        }\n      }\n    },\n\n    initTargets() {\n      const a = this._targets,\n            n = a.length;\n      for (let i=0; i<n && a[i] != null; ++i) {\n        a[i] = null; // ensure old flows can be garbage collected\n      }\n      a.active = 0;\n    },\n\n    transform(_, pulse) {\n      const df = pulse.dataflow,\n            key = _.key,\n            flow = _.subflow,\n            cache = this._keys,\n            rekey = _.modified('key'),\n            subflow = key => this.subflow(key, flow, pulse);\n\n      this._group = _.group || {};\n      this.initTargets(); // reset list of active subflows\n\n      pulse.visit(pulse.REM, t => {\n        const id = vegaDataflow.tupleid(t),\n              k = cache.get(id);\n        if (k !== undefined) {\n          cache.delete(id);\n          subflow(k).rem(t);\n        }\n      });\n\n      pulse.visit(pulse.ADD, t => {\n        const k = key(t);\n        cache.set(vegaDataflow.tupleid(t), k);\n        subflow(k).add(t);\n      });\n\n      if (rekey || pulse.modified(key.fields)) {\n        pulse.visit(pulse.MOD, t => {\n          const id = vegaDataflow.tupleid(t),\n                k0 = cache.get(id),\n                k1 = key(t);\n          if (k0 === k1) {\n            subflow(k1).mod(t);\n          } else {\n            cache.set(id, k1);\n            subflow(k0).rem(t);\n            subflow(k1).add(t);\n          }\n        });\n      } else if (pulse.changed(pulse.MOD)) {\n        pulse.visit(pulse.MOD, t => {\n          subflow(cache.get(vegaDataflow.tupleid(t))).mod(t);\n        });\n      }\n\n      if (rekey) {\n        pulse.visit(pulse.REFLOW, t => {\n          const id = vegaDataflow.tupleid(t),\n                k0 = cache.get(id),\n                k1 = key(t);\n          if (k0 !== k1) {\n            cache.set(id, k1);\n            subflow(k0).rem(t);\n            subflow(k1).add(t);\n          }\n        });\n      }\n\n      if (pulse.clean()) {\n        df.runAfter(() => { this.clean(); cache.clean(); });\n      } else if (cache.empty > df.cleanThreshold) {\n        df.runAfter(cache.clean);\n      }\n\n      return pulse;\n    }\n  });\n\n  /**\n   * Generates one or more field accessor functions.\n   * If the 'name' parameter is an array, an array of field accessors\n   * will be created and the 'as' parameter will be ignored.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {string} params.name - The field name(s) to access.\n   * @param {string} params.as - The accessor function name.\n   */\n  function Field(params) {\n    vegaDataflow.Operator.call(this, null, update$2, params);\n  }\n\n  vegaUtil.inherits(Field, vegaDataflow.Operator);\n\n  function update$2(_) {\n    return (this.value && !_.modified()) ? this.value\n      : vegaUtil.isArray(_.name) ? vegaUtil.array(_.name).map(f => vegaUtil.field(f))\n      : vegaUtil.field(_.name, _.as);\n  }\n\n  /**\n   * Filters data tuples according to a predicate function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.expr - The predicate expression function\n   *   that determines a tuple's filter status. Truthy values pass the filter.\n   */\n  function Filter(params) {\n    vegaDataflow.Transform.call(this, vegaUtil.fastmap(), params);\n  }\n\n  Filter.Definition = {\n    'type': 'Filter',\n    'metadata': {'changes': true},\n    'params': [\n      { 'name': 'expr', 'type': 'expr', 'required': true }\n    ]\n  };\n\n  vegaUtil.inherits(Filter, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const df = pulse.dataflow,\n            cache = this.value, // cache ids of filtered tuples\n            output = pulse.fork(),\n            add = output.add,\n            rem = output.rem,\n            mod = output.mod,\n            test = _.expr;\n      let isMod = true;\n\n      pulse.visit(pulse.REM, t => {\n        var id = vegaDataflow.tupleid(t);\n        if (!cache.has(id)) rem.push(t);\n        else cache.delete(id);\n      });\n\n      pulse.visit(pulse.ADD, t => {\n        if (test(t, _)) add.push(t);\n        else cache.set(vegaDataflow.tupleid(t), 1);\n      });\n\n      function revisit(t) {\n        const id = vegaDataflow.tupleid(t),\n              b = test(t, _),\n              s = cache.get(id);\n        if (b && s) {\n          cache.delete(id);\n          add.push(t);\n        } else if (!b && !s) {\n          cache.set(id, 1);\n          rem.push(t);\n        } else if (isMod && b && !s) {\n          mod.push(t);\n        }\n      }\n\n      pulse.visit(pulse.MOD, revisit);\n\n      if (_.modified()) {\n        isMod = false;\n        pulse.visit(pulse.REFLOW, revisit);\n      }\n\n      if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);\n      return output;\n    }\n  });\n\n  /**\n   * Flattens array-typed field values into new data objects.\n   * If multiple fields are specified, they are treated as parallel arrays,\n   * with output values included for each matching index (or null if missing).\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} params.fields - An array of field\n   *   accessors for the tuple fields that should be flattened.\n   * @param {string} [params.index] - Optional output field name for index\n   *   value. If unspecified, no index field is included in the output.\n   * @param {Array<string>} [params.as] - Output field names for flattened\n   *   array fields. Any unspecified fields will use the field name provided\n   *   by the fields accessors.\n   */\n  function Flatten(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n\n  Flatten.Definition = {\n    'type': 'Flatten',\n    'metadata': {'generates': true},\n    'params': [\n      { 'name': 'fields', 'type': 'field', 'array': true, 'required': true },\n      { 'name': 'index', 'type': 'string' },\n      { 'name': 'as', 'type': 'string', 'array': true }\n    ]\n  };\n\n  vegaUtil.inherits(Flatten, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            fields = _.fields,\n            as = fieldNames(fields, _.as || []),\n            index = _.index || null,\n            m = as.length;\n\n      // remove any previous results\n      out.rem = this.value;\n\n      // generate flattened tuples\n      pulse.visit(pulse.SOURCE, t => {\n        const arrays = fields.map(f => f(t)),\n              maxlen = arrays.reduce((l, a) => Math.max(l, a.length), 0);\n        let i = 0, j, d, v;\n\n        for (; i<maxlen; ++i) {\n          d = vegaDataflow.derive(t);\n          for (j=0; j<m; ++j) {\n            d[as[j]] = (v = arrays[j][i]) == null ? null : v;\n          }\n          if (index) {\n            d[index] = i;\n          }\n          out.add.push(d);\n        }\n      });\n\n      this.value = out.source = out.add;\n      if (index) out.modifies(index);\n      return out.modifies(as);\n    }\n  });\n\n  /**\n   * Folds one more tuple fields into multiple tuples in which the field\n   * name and values are available under new 'key' and 'value' fields.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.fields - An array of field accessors\n   *   for the tuple fields that should be folded.\n   * @param {Array<string>} [params.as] - Output field names for folded key\n   *   and value fields, defaults to ['key', 'value'].\n   */\n  function Fold(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n\n  Fold.Definition = {\n    'type': 'Fold',\n    'metadata': {'generates': true},\n    'params': [\n      { 'name': 'fields', 'type': 'field', 'array': true, 'required': true },\n      { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': ['key', 'value'] }\n    ]\n  };\n\n  vegaUtil.inherits(Fold, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            fields = _.fields,\n            fnames = fields.map(vegaUtil.accessorName),\n            as = _.as || ['key', 'value'],\n            k = as[0],\n            v = as[1],\n            n = fields.length;\n\n      out.rem = this.value;\n\n      pulse.visit(pulse.SOURCE, t => {\n        for (let i=0, d; i<n; ++i) {\n          d = vegaDataflow.derive(t);\n          d[k] = fnames[i];\n          d[v] = fields[i](t);\n          out.add.push(d);\n        }\n      });\n\n      this.value = out.source = out.add;\n      return out.modifies(as);\n    }\n  });\n\n  /**\n   * Invokes a function for each data tuple and saves the results as a new field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.expr - The formula function to invoke for each tuple.\n   * @param {string} params.as - The field name under which to save the result.\n   * @param {boolean} [params.initonly=false] - If true, the formula is applied to\n   *   added tuples only, and does not update in response to modifications.\n   */\n  function Formula(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Formula.Definition = {\n    'type': 'Formula',\n    'metadata': {'modifies': true},\n    'params': [\n      { 'name': 'expr', 'type': 'expr', 'required': true },\n      { 'name': 'as', 'type': 'string', 'required': true },\n      { 'name': 'initonly', 'type': 'boolean' }\n    ]\n  };\n\n  vegaUtil.inherits(Formula, vegaDataflow.Transform, {\n    transform (_, pulse) {\n      const func = _.expr,\n            as = _.as,\n            mod = _.modified(),\n            flag = _.initonly ? pulse.ADD\n              : mod ? pulse.SOURCE\n              : pulse.modified(func.fields) || pulse.modified(as) ? pulse.ADD_MOD\n              : pulse.ADD;\n\n      if (mod) {\n        // parameters updated, need to reflow\n        pulse = pulse.materialize().reflow(true);\n      }\n\n      if (!_.initonly) {\n        pulse.modifies(as);\n      }\n\n      return pulse.visit(flag, t => t[as] = func(t, _));\n    }\n  });\n\n  /**\n   * Generates data tuples using a provided generator function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Parameters): object} params.generator - A tuple generator\n   *   function. This function is given the operator parameters as input.\n   *   Changes to any additional parameters will not trigger re-calculation\n   *   of previously generated tuples. Only future tuples are affected.\n   * @param {number} params.size - The number of tuples to produce.\n   */\n  function Generate(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n\n  vegaUtil.inherits(Generate, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.ALL),\n            gen = _.generator;\n\n      let data = this.value,\n          num = _.size - data.length,\n          add, rem, t;\n\n      if (num > 0) {\n        // need more tuples, generate and add\n        for (add=[]; --num >= 0;) {\n          add.push(t = vegaDataflow.ingest(gen(_)));\n          data.push(t);\n        }\n        out.add = out.add.length\n          ? out.materialize(out.ADD).add.concat(add)\n          : add;\n      } else {\n        // need fewer tuples, remove\n        rem = data.slice(0, -num);\n        out.rem = out.rem.length\n          ? out.materialize(out.REM).rem.concat(rem)\n          : rem;\n        data = data.slice(-num);\n      }\n\n      out.source = this.value = data;\n      return out;\n    }\n  });\n\n  const Methods = {\n    value: 'value',\n    median: d3Array.median,\n    mean: d3Array.mean,\n    min: d3Array.min,\n    max: d3Array.max\n  };\n\n  const Empty = [];\n\n  /**\n   * Impute missing values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to impute.\n   * @param {Array<function(object): *>} [params.groupby] - An array of\n   *   accessors to determine series within which to perform imputation.\n   * @param {function(object): *} params.key - An accessor for a key value.\n   *   Each key value should be unique within a group. New tuples will be\n   *   imputed for any key values that are not found within a group.\n   * @param {Array<*>} [params.keyvals] - Optional array of required key\n   *   values. New tuples will be imputed for any key values that are not\n   *   found within a group. In addition, these values will be automatically\n   *   augmented with the key values observed in the input data.\n   * @param {string} [method='value'] - The imputation method to use. One of\n   *   'value', 'mean', 'median', 'max', 'min'.\n   * @param {*} [value=0] - The constant value to use for imputation\n   *   when using method 'value'.\n   */\n  function Impute(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n\n  Impute.Definition = {\n    'type': 'Impute',\n    'metadata': {'changes': true},\n    'params': [\n      { 'name': 'field', 'type': 'field', 'required': true },\n      { 'name': 'key', 'type': 'field', 'required': true },\n      { 'name': 'keyvals', 'array': true },\n      { 'name': 'groupby', 'type': 'field', 'array': true },\n      { 'name': 'method', 'type': 'enum', 'default': 'value',\n        'values': ['value', 'mean', 'median', 'max', 'min'] },\n      { 'name': 'value', 'default': 0 }\n    ]\n  };\n\n  function getValue(_) {\n    var m = _.method || Methods.value, v;\n\n    if (Methods[m] == null) {\n      vegaUtil.error('Unrecognized imputation method: ' + m);\n    } else if (m === Methods.value) {\n      v = _.value !== undefined ? _.value : 0;\n      return () => v;\n    } else {\n      return Methods[m];\n    }\n  }\n\n  function getField(_) {\n    var f = _.field;\n    return t => t ? f(t) : NaN;\n  }\n\n  vegaUtil.inherits(Impute, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      var out = pulse.fork(pulse.ALL),\n          impute = getValue(_),\n          field = getField(_),\n          fName = vegaUtil.accessorName(_.field),\n          kName = vegaUtil.accessorName(_.key),\n          gNames = (_.groupby || []).map(vegaUtil.accessorName),\n          groups = partition$1(pulse.source, _.groupby, _.key, _.keyvals),\n          curr = [],\n          prev = this.value,\n          m = groups.domain.length,\n          group, value, gVals, kVal, g, i, j, l, n, t;\n\n      for (g=0, l=groups.length; g<l; ++g) {\n        group = groups[g];\n        gVals = group.values;\n        value = NaN;\n\n        // add tuples for missing values\n        for (j=0; j<m; ++j) {\n          if (group[j] != null) continue;\n          kVal = groups.domain[j];\n\n          t = {_impute: true};\n          for (i=0, n=gVals.length; i<n; ++i) t[gNames[i]] = gVals[i];\n          t[kName] = kVal;\n          t[fName] = Number.isNaN(value) ? (value = impute(group, field)) : value;\n\n          curr.push(vegaDataflow.ingest(t));\n        }\n      }\n\n      // update pulse with imputed tuples\n      if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);\n      if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);\n      this.value = curr;\n\n      return out;\n    }\n  });\n\n  function partition$1(data, groupby, key, keyvals) {\n    var get = f => f(t),\n        groups = [],\n        domain = keyvals ? keyvals.slice() : [],\n        kMap = {},\n        gMap = {}, gVals, gKey,\n        group, i, j, k, n, t;\n\n    domain.forEach((k, i) => kMap[k] = i + 1);\n\n    for (i=0, n=data.length; i<n; ++i) {\n      t = data[i];\n      k = key(t);\n      j = kMap[k] || (kMap[k] = domain.push(k));\n\n      gKey = (gVals = groupby ? groupby.map(get) : Empty) + '';\n      if (!(group = gMap[gKey])) {\n        group = (gMap[gKey] = []);\n        groups.push(group);\n        group.values = gVals;\n      }\n      group[j-1] = t;\n    }\n\n    groups.domain = domain;\n    return groups;\n  }\n\n  /**\n   * Extend input tuples with aggregate values.\n   * Calcuates aggregate values and joins them with the input stream.\n   * @constructor\n   */\n  function JoinAggregate(params) {\n    Aggregate.call(this, params);\n  }\n\n  JoinAggregate.Definition = {\n    'type': 'JoinAggregate',\n    'metadata': {'modifies': true},\n    'params': [\n      { 'name': 'groupby', 'type': 'field', 'array': true },\n      { 'name': 'fields', 'type': 'field', 'null': true, 'array': true },\n      { 'name': 'ops', 'type': 'enum', 'array': true, 'values': ValidAggregateOps },\n      { 'name': 'as', 'type': 'string', 'null': true, 'array': true },\n      { 'name': 'key', 'type': 'field' }\n    ]\n  };\n\n  vegaUtil.inherits(JoinAggregate, Aggregate, {\n    transform(_, pulse) {\n      const aggr = this,\n            mod = _.modified();\n      let cells;\n\n      // process all input tuples to calculate aggregates\n      if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n        cells = aggr.value = mod ? aggr.init(_) : {};\n        pulse.visit(pulse.SOURCE, t => aggr.add(t));\n      } else {\n        cells = aggr.value = aggr.value || this.init(_);\n        pulse.visit(pulse.REM, t => aggr.rem(t));\n        pulse.visit(pulse.ADD, t => aggr.add(t));\n      }\n\n      // update aggregation cells\n      aggr.changes();\n\n      // write aggregate values to input tuples\n      pulse.visit(pulse.SOURCE, t => {\n        vegaUtil.extend(t, cells[aggr.cellkey(t)].tuple);\n      });\n\n      return pulse.reflow(mod).modifies(this._outputs);\n    },\n\n    changes() {\n      const adds = this._adds,\n            mods = this._mods;\n      let i, n;\n\n      for (i=0, n=this._alen; i<n; ++i) {\n        this.celltuple(adds[i]);\n        adds[i] = null; // for garbage collection\n      }\n\n      for (i=0, n=this._mlen; i<n; ++i) {\n        this.celltuple(mods[i]);\n        mods[i] = null; // for garbage collection\n      }\n\n      this._alen = this._mlen = 0; // reset list of active cells\n    }\n  });\n\n  /**\n   * Compute kernel density estimates (KDE) for one or more data groups.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *   to groupby.\n   * @param {function(object): *} params.field - An accessor for the data field\n   *   to estimate.\n   * @param {number} [params.bandwidth=0] - The KDE kernel bandwidth.\n   *   If zero or unspecified, the bandwidth is automatically determined.\n   * @param {boolean} [params.counts=false] - A boolean flag indicating if the\n   *   output values should be probability estimates (false, default) or\n   *   smoothed counts (true).\n   * @param {string} [params.cumulative=false] - A boolean flag indicating if a\n   *   density (false) or cumulative distribution (true) should be generated.\n   * @param {Array<number>} [params.extent] - The domain extent over which to\n   *   plot the density. If unspecified, the [min, max] data extent is used.\n   * @param {string} [params.resolve='independent'] - Indicates how parameters for\n   *   multiple densities should be resolved. If \"independent\" (the default), each\n   *   density may have its own domain extent and dynamic number of curve sample\n   *   steps. If \"shared\", the KDE transform will ensure that all densities are\n   *   defined over a shared domain and curve steps, enabling stacking.\n   * @param {number} [params.minsteps=25] - The minimum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.steps] - The exact number of curve samples for\n   *   plotting the density. If specified, overrides both minsteps and maxsteps\n   *   to set an exact number of uniform samples. Useful in conjunction with\n   *   a fixed extent to ensure consistent sample points for stacked densities.\n   */\n  function KDE(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  KDE.Definition = {\n    'type': 'KDE',\n    'metadata': {'generates': true},\n    'params': [\n      { 'name': 'groupby', 'type': 'field', 'array': true },\n      { 'name': 'field', 'type': 'field', 'required': true },\n      { 'name': 'cumulative', 'type': 'boolean', 'default': false },\n      { 'name': 'counts', 'type': 'boolean', 'default': false },\n      { 'name': 'bandwidth', 'type': 'number', 'default': 0 },\n      { 'name': 'extent', 'type': 'number', 'array': true, 'length': 2 },\n      { 'name': 'resolve', 'type': 'enum', 'values': ['shared', 'independent'], 'default': 'independent' },\n      { 'name': 'steps', 'type': 'number' },\n      { 'name': 'minsteps', 'type': 'number', 'default': 25 },\n      { 'name': 'maxsteps', 'type': 'number', 'default': 200 },\n      { 'name': 'as', 'type': 'string', 'array': true, 'default': ['value', 'density'] }\n    ]\n  };\n\n  vegaUtil.inherits(KDE, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n      if (!this.value || pulse.changed() || _.modified()) {\n        const source = pulse.materialize(pulse.SOURCE).source,\n              groups = partition(source, _.groupby, _.field),\n              names = (_.groupby || []).map(vegaUtil.accessorName),\n              bandwidth = _.bandwidth,\n              method = _.cumulative ? 'cdf' : 'pdf',\n              as = _.as || ['value', 'density'],\n              values = [];\n\n        let domain = _.extent,\n            minsteps = _.steps || _.minsteps || 25,\n            maxsteps = _.steps || _.maxsteps || 200;\n\n        if (method !== 'pdf' && method !== 'cdf') {\n          vegaUtil.error('Invalid density method: ' + method);\n        }\n\n        if (_.resolve === 'shared') {\n          if (!domain) domain = vegaUtil.extent(source, _.field);\n          minsteps = maxsteps = _.steps || maxsteps;\n        }\n\n        groups.forEach(g => {\n          const density = vegaStatistics.randomKDE(g, bandwidth)[method],\n                scale = _.counts ? g.length : 1,\n                local = domain || vegaUtil.extent(g);\n\n          vegaStatistics.sampleCurve(density, local, minsteps, maxsteps)\n            .forEach(v => {\n              const t = {};\n              for (let i=0; i<names.length; ++i) {\n                t[names[i]] = g.dims[i];\n              }\n              t[as[0]] = v[0];\n              t[as[1]] = v[1] * scale;\n              values.push(vegaDataflow.ingest(t));\n            });\n        });\n\n        if (this.value) out.rem = this.value;\n        this.value = out.add = out.source = values;\n      }\n\n      return out;\n    }\n  });\n\n  /**\n   * Generates a key function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<string>} params.fields - The field name(s) for the key function.\n   * @param {boolean} params.flat - A boolean flag indicating if the field names\n   *  should be treated as flat property names, side-stepping nested field\n   *  lookups normally indicated by dot or bracket notation.\n   */\n  function Key(params) {\n    vegaDataflow.Operator.call(this, null, update$3, params);\n  }\n\n  vegaUtil.inherits(Key, vegaDataflow.Operator);\n\n  function update$3(_) {\n    return (this.value && !_.modified()) ? this.value : vegaUtil.key(_.fields, _.flat);\n  }\n\n  /**\n   * Load and parse data from an external source. Marshalls parameter\n   * values and then invokes the Dataflow request method.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {string} params.url - The URL to load from.\n   * @param {object} params.format - The data format options.\n   */\n  function Load(params) {\n    vegaDataflow.Transform.call(this, [], params);\n    this._pending = null;\n  }\n\n  vegaUtil.inherits(Load, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const df = pulse.dataflow;\n\n      if (this._pending) {\n        // update state and return pulse\n        return output(this, pulse, this._pending);\n      }\n\n      if (stop(_)) return pulse.StopPropagation;\n\n      if (_.values) {\n        // parse and ingest values, return output pulse\n        return output(this, pulse, df.parse(_.values, _.format));\n      } else if (_.async) {\n        // return promise for non-blocking async loading\n        const p = df.request(_.url, _.format).then(res => {\n          this._pending = vegaUtil.array(res.data);\n          return df => df.touch(this);\n        });\n        return {async: p};\n      } else {\n        // return promise for synchronous loading\n        return df.request(_.url, _.format)\n          .then(res => output(this, pulse, vegaUtil.array(res.data)));\n      }\n    }\n  });\n\n  function stop(_) {\n    return _.modified('async') && !(\n      _.modified('values') || _.modified('url') || _.modified('format')\n    );\n  }\n\n  function output(op, pulse, data) {\n    data.forEach(vegaDataflow.ingest);\n    const out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);\n    out.rem = op.value;\n    op.value = out.source = out.add = data;\n    op._pending = null;\n    if (out.rem.length) out.clean(true);\n    return out;\n  }\n\n  /**\n   * Extend tuples by joining them with values from a lookup table.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Map} params.index - The lookup table map.\n   * @param {Array<function(object): *} params.fields - The fields to lookup.\n   * @param {Array<string>} params.as - Output field names for each lookup value.\n   * @param {*} [params.default] - A default value to use if lookup fails.\n   */\n  function Lookup(params) {\n    vegaDataflow.Transform.call(this, {}, params);\n  }\n\n  Lookup.Definition = {\n    'type': 'Lookup',\n    'metadata': {'modifies': true},\n    'params': [\n      { 'name': 'index', 'type': 'index', 'params': [\n          {'name': 'from', 'type': 'data', 'required': true },\n          {'name': 'key', 'type': 'field', 'required': true }\n        ] },\n      { 'name': 'values', 'type': 'field', 'array': true },\n      { 'name': 'fields', 'type': 'field', 'array': true, 'required': true },\n      { 'name': 'as', 'type': 'string', 'array': true },\n      { 'name': 'default', 'default': null }\n    ]\n  };\n\n  vegaUtil.inherits(Lookup, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const keys = _.fields,\n            index = _.index,\n            values = _.values,\n            defaultValue = _.default==null ? null : _.default,\n            reset = _.modified(),\n            n = keys.length;\n\n      let flag = reset ? pulse.SOURCE : pulse.ADD,\n          out = pulse,\n          as = _.as,\n          set, m, mods;\n\n      if (values) {\n        m = values.length;\n\n        if (n > 1 && !as) {\n          vegaUtil.error('Multi-field lookup requires explicit \"as\" parameter.');\n        }\n        if (as && as.length !== n * m) {\n          vegaUtil.error('The \"as\" parameter has too few output field names.');\n        }\n        as = as || values.map(vegaUtil.accessorName);\n\n        set = function(t) {\n          for (var i=0, k=0, j, v; i<n; ++i) {\n            v = index.get(keys[i](t));\n            if (v == null) for (j=0; j<m; ++j, ++k) t[as[k]] = defaultValue;\n            else for (j=0; j<m; ++j, ++k) t[as[k]] = values[j](v);\n          }\n        };\n      } else {\n        if (!as) {\n          vegaUtil.error('Missing output field names.');\n        }\n\n        set = function(t) {\n          for (var i=0, v; i<n; ++i) {\n            v = index.get(keys[i](t));\n            t[as[i]] = v==null ? defaultValue : v;\n          }\n        };\n      }\n\n      if (reset) {\n        out = pulse.reflow(true);\n      } else {\n        mods = keys.some(k =>pulse.modified(k.fields));\n        flag |= (mods ? pulse.MOD : 0);\n      }\n      pulse.visit(flag, set);\n\n      return out.modifies(as);\n    }\n  });\n\n  /**\n   * Computes global min/max extents over a collection of extents.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<Array<number>>} params.extents - The input extents.\n   */\n  function MultiExtent(params) {\n    vegaDataflow.Operator.call(this, null, update$4, params);\n  }\n\n  vegaUtil.inherits(MultiExtent, vegaDataflow.Operator);\n\n  function update$4(_) {\n    if (this.value && !_.modified()) {\n      return this.value;\n    }\n\n    const ext = _.extents,\n          n = ext.length;\n\n    let min = +Infinity,\n        max = -Infinity,\n        i, e;\n\n    for (i = 0; i < n; ++i) {\n      e = ext[i];\n      if (e[0] < min) min = e[0];\n      if (e[1] > max) max = e[1];\n    }\n    return [min, max];\n  }\n\n  /**\n   * Merge a collection of value arrays.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<Array<*>>} params.values - The input value arrrays.\n   */\n  function MultiValues(params) {\n    vegaDataflow.Operator.call(this, null, update$5, params);\n  }\n\n  vegaUtil.inherits(MultiValues, vegaDataflow.Operator);\n\n  function update$5(_) {\n    return (this.value && !_.modified())\n      ? this.value\n      : _.values.reduce((data, _) => data.concat(_), []);\n  }\n\n  /**\n   * Operator whose value is simply its parameter hash. This operator is\n   * useful for enabling reactive updates to values of nested objects.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n  function Params(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  vegaUtil.inherits(Params, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      this.modified(_.modified());\n      this.value = _;\n      return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples\n    }\n  });\n\n  /**\n   * Aggregate and pivot selected field values to become new fields.\n   * This operator is useful to construction cross-tabulations.\n   * @constructor\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *  to groupby. These fields act just like groupby fields of an Aggregate transform.\n   * @param {function(object): *} params.field - The field to pivot on. The unique\n   *  values of this field become new field names in the output stream.\n   * @param {function(object): *} params.value - The field to populate pivoted fields.\n   *  The aggregate values of this field become the values of the new pivoted fields.\n   * @param {string} [params.op] - The aggregation operation for the value field,\n   *  applied per cell in the output stream. The default is \"sum\".\n   * @param {number} [params.limit] - An optional parameter indicating the maximum\n   *  number of pivoted fields to generate. The pivoted field names are sorted in\n   *  ascending order prior to enforcing the limit.\n   */\n  function Pivot(params) {\n    Aggregate.call(this, params);\n  }\n\n  Pivot.Definition = {\n    'type': 'Pivot',\n    'metadata': {'generates': true, 'changes': true},\n    'params': [\n      { 'name': 'groupby', 'type': 'field', 'array': true },\n      { 'name': 'field', 'type': 'field', 'required': true },\n      { 'name': 'value', 'type': 'field', 'required': true },\n      { 'name': 'op', 'type': 'enum', 'values': ValidAggregateOps, 'default': 'sum' },\n      { 'name': 'limit', 'type': 'number', 'default': 0 },\n      { 'name': 'key', 'type': 'field' }\n    ]\n  };\n\n  vegaUtil.inherits(Pivot, Aggregate, {\n    _transform: Aggregate.prototype.transform,\n    transform(_, pulse) {\n      return this._transform(aggregateParams(_, pulse), pulse);\n    }\n  });\n\n  // Shoehorn a pivot transform into an aggregate transform!\n  // First collect all unique pivot field values.\n  // Then generate aggregate fields for each output pivot field.\n  function aggregateParams(_, pulse) {\n    const key    = _.field,\n          value  = _.value,\n          op     = (_.op === 'count' ? '__count__' : _.op) || 'sum',\n          fields = vegaUtil.accessorFields(key).concat(vegaUtil.accessorFields(value)),\n          keys   = pivotKeys(key, _.limit || 0, pulse);\n\n    // if data stream content changes, pivot fields may change\n    // flag parameter modification to ensure re-initialization\n    if (pulse.changed()) _.set('__pivot__', null, null, true);\n\n    return {\n      key:      _.key,\n      groupby:  _.groupby,\n      ops:      keys.map(() => op),\n      fields:   keys.map(k => get(k, key, value, fields)),\n      as:       keys.map(k => k + ''),\n      modified: _.modified.bind(_)\n    };\n  }\n\n  // Generate aggregate field accessor.\n  // Output NaN for non-existent values; aggregator will ignore!\n  function get(k, key, value, fields) {\n    return vegaUtil.accessor(\n      d => key(d) === k ? value(d) : NaN,\n      fields,\n      k + ''\n    );\n  }\n\n  // Collect (and optionally limit) all unique pivot values.\n  function pivotKeys(key, limit, pulse) {\n    const map = {},\n          list = [];\n\n    pulse.visit(pulse.SOURCE, t => {\n      const k = key(t);\n      if (!map[k]) {\n        map[k] = 1;\n        list.push(k);\n      }\n    });\n\n    list.sort(vegaUtil.ascending);\n\n    return limit ? list.slice(0, limit) : list;\n  }\n\n  /**\n   * Partitions pre-faceted data into tuple subflows.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Dataflow, string): Operator} params.subflow - A function\n   *   that generates a subflow of operators and returns its root operator.\n   * @param {function(object): Array<object>} params.field - The field\n   *   accessor for an array of subflow tuple objects.\n   */\n  function PreFacet(params) {\n    Facet.call(this, params);\n  }\n\n  vegaUtil.inherits(PreFacet, Facet, {\n    transform(_, pulse) {\n      const flow = _.subflow,\n            field = _.field,\n            subflow = t => this.subflow(vegaDataflow.tupleid(t), flow, pulse, t);\n\n      if (_.modified('field') || field && pulse.modified(vegaUtil.accessorFields(field))) {\n        vegaUtil.error('PreFacet does not support field modification.');\n      }\n\n      this.initTargets(); // reset list of active subflows\n\n      if (field) {\n        pulse.visit(pulse.MOD, t => {\n          const sf = subflow(t);\n          field(t).forEach(_ => sf.mod(_));\n        });\n\n        pulse.visit(pulse.ADD, t => {\n          const sf = subflow(t);\n          field(t).forEach(_ => sf.add(vegaDataflow.ingest(_)));\n        });\n\n        pulse.visit(pulse.REM, t => {\n          const sf = subflow(t);\n          field(t).forEach(_ => sf.rem(_));\n        });\n      } else {\n        pulse.visit(pulse.MOD, t => subflow(t).mod(t));\n        pulse.visit(pulse.ADD, t => subflow(t).add(t));\n        pulse.visit(pulse.REM, t => subflow(t).rem(t));\n      }\n\n      if (pulse.clean()) {\n        pulse.runAfter(() => this.clean());\n      }\n\n      return pulse;\n    }\n  });\n\n  /**\n   * Performs a relational projection, copying selected fields from source\n   * tuples to a new set of derived tuples.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *} params.fields - The fields to project,\n   *   as an array of field accessors. If unspecified, all fields will be\n   *   copied with names unchanged.\n   * @param {Array<string>} [params.as] - Output field names for each projected\n   *   field. Any unspecified fields will use the field name provided by\n   *   the field accessor.\n   */\n  function Project(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Project.Definition = {\n    'type': 'Project',\n    'metadata': {'generates': true, 'changes': true},\n    'params': [\n      { 'name': 'fields', 'type': 'field', 'array': true },\n      { 'name': 'as', 'type': 'string', 'null': true, 'array': true }\n    ]\n  };\n\n  vegaUtil.inherits(Project, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            fields = _.fields,\n            as = fieldNames(_.fields, _.as || []),\n            derive = fields\n              ? (s, t) => project(s, t, fields, as)\n              : vegaDataflow.rederive;\n\n      let lut;\n      if (this.value) {\n        lut = this.value;\n      } else {\n        pulse = pulse.addAll();\n        lut = this.value = {};\n      }\n\n      pulse.visit(pulse.REM, t => {\n        const id = vegaDataflow.tupleid(t);\n        out.rem.push(lut[id]);\n        lut[id] = null;\n      });\n\n      pulse.visit(pulse.ADD, t => {\n        const dt = derive(t, vegaDataflow.ingest({}));\n        lut[vegaDataflow.tupleid(t)] = dt;\n        out.add.push(dt);\n      });\n\n      pulse.visit(pulse.MOD, t => {\n        out.mod.push(derive(t, lut[vegaDataflow.tupleid(t)]));\n      });\n\n      return out;\n    }\n  });\n\n  function project(s, t, fields, as) {\n    for (let i=0, n=fields.length; i<n; ++i) {\n      t[as[i]] = fields[i](s);\n    }\n    return t;\n  }\n\n  /**\n   * Proxy the value of another operator as a pure signal value.\n   * Ensures no tuples are propagated.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {*} params.value - The value to proxy, becomes the value of this operator.\n   */\n  function Proxy(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  vegaUtil.inherits(Proxy, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      this.value = _.value;\n      return _.modified('value')\n        ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS)\n        : pulse.StopPropagation;\n    }\n  });\n\n  /**\n   * Generates sample quantile values from an input data stream.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - An accessor for the data field\n   *   over which to calculate quantile values.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *   to groupby.\n   * @param {Array<number>} [params.probs] - An array of probabilities in\n   *   the range (0, 1) for which to compute quantile values. If not specified,\n   *   the *step* parameter will be used.\n   * @param {Array<number>} [params.step=0.01] - A probability step size for\n   *   sampling quantile values. All values from one-half the step size up to\n   *   1 (exclusive) will be sampled. This parameter is only used if the\n   *   *quantiles* parameter is not provided.\n   */\n  function Quantile(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Quantile.Definition = {\n    'type': 'Quantile',\n    'metadata': {'generates': true, 'changes': true},\n    'params': [\n      { 'name': 'groupby', 'type': 'field', 'array': true },\n      { 'name': 'field', 'type': 'field', 'required': true },\n      { 'name': 'probs', 'type': 'number', 'array': true },\n      { 'name': 'step', 'type': 'number', 'default': 0.01 },\n      { 'name': 'as', 'type': 'string', 'array': true, 'default': ['prob', 'value'] }\n    ]\n  };\n\n  const EPSILON$1 = 1e-14;\n\n  vegaUtil.inherits(Quantile, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n            as = _.as || ['prob', 'value'];\n\n      if (this.value && !_.modified() && !pulse.changed()) {\n        out.source = this.value;\n        return out;\n      }\n\n      const source = pulse.materialize(pulse.SOURCE).source,\n            groups = partition(source, _.groupby, _.field),\n            names = (_.groupby || []).map(vegaUtil.accessorName),\n            values = [],\n            step = _.step || 0.01,\n            p = _.probs || d3Array.range(step/2, 1 - EPSILON$1, step),\n            n = p.length;\n\n      groups.forEach(g => {\n        const q = vegaStatistics.quantiles(g, p);\n\n        for (let i=0; i<n; ++i) {\n          const t = {};\n          for (let i=0; i<names.length; ++i) {\n            t[names[i]] = g.dims[i];\n          }\n          t[as[0]] = p[i];\n          t[as[1]] = q[i];\n          values.push(vegaDataflow.ingest(t));\n        }\n      });\n\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n\n      return out;\n    }\n  });\n\n  /**\n   * Relays a data stream between data processing pipelines.\n   * If the derive parameter is set, this transform will create derived\n   * copies of observed tuples. This provides derived data streams in which\n   * modifications to the tuples do not pollute an upstream data source.\n   * @param {object} params - The parameters for this operator.\n   * @param {number} [params.derive=false] - Boolean flag indicating if\n   *   the transform should make derived copies of incoming tuples.\n   * @constructor\n   */\n  function Relay(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  vegaUtil.inherits(Relay, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      let out, lut;\n\n      if (this.value) {\n        lut = this.value;\n      } else {\n        out = pulse = pulse.addAll();\n        lut = this.value = {};\n      }\n\n      if (_.derive) {\n        out = pulse.fork(pulse.NO_SOURCE);\n\n        pulse.visit(pulse.REM, t => {\n          const id = vegaDataflow.tupleid(t);\n          out.rem.push(lut[id]);\n          lut[id] = null;\n        });\n\n        pulse.visit(pulse.ADD, t => {\n          const dt = vegaDataflow.derive(t);\n          lut[vegaDataflow.tupleid(t)] = dt;\n          out.add.push(dt);\n        });\n\n        pulse.visit(pulse.MOD, t => {\n          const dt = lut[vegaDataflow.tupleid(t)];\n          for (const k in t) {\n            dt[k] = t[k];\n            // down stream writes may overwrite re-derived tuples\n            // conservatively mark all source fields as modified\n            out.modifies(k);\n          }\n          out.mod.push(dt);\n        });\n      }\n\n      return out;\n    }\n  });\n\n  /**\n   * Samples tuples passing through this operator.\n   * Uses reservoir sampling to maintain a representative sample.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {number} [params.size=1000] - The maximum number of samples.\n   */\n  function Sample(params) {\n    vegaDataflow.Transform.call(this, [], params);\n    this.count = 0;\n  }\n\n  Sample.Definition = {\n    'type': 'Sample',\n    'metadata': {},\n    'params': [\n      { 'name': 'size', 'type': 'number', 'default': 1000 }\n    ]\n  };\n\n  vegaUtil.inherits(Sample, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            mod = _.modified('size'),\n            num = _.size,\n            map = this.value.reduce((m, t) => (m[vegaDataflow.tupleid(t)] = 1, m), {});\n\n      let res = this.value,\n          cnt = this.count,\n          cap = 0;\n\n      // sample reservoir update function\n      function update(t) {\n        let p, idx;\n\n        if (res.length < num) {\n          res.push(t);\n        } else {\n          idx = ~~((cnt + 1) * vegaStatistics.random());\n          if (idx < res.length && idx >= cap) {\n            p = res[idx];\n            if (map[vegaDataflow.tupleid(p)]) out.rem.push(p); // eviction\n            res[idx] = t;\n          }\n        }\n        ++cnt;\n      }\n\n      if (pulse.rem.length) {\n        // find all tuples that should be removed, add to output\n        pulse.visit(pulse.REM, t => {\n          const id = vegaDataflow.tupleid(t);\n          if (map[id]) {\n            map[id] = -1;\n            out.rem.push(t);\n          }\n          --cnt;\n        });\n\n        // filter removed tuples out of the sample reservoir\n        res = res.filter(t => map[vegaDataflow.tupleid(t)] !== -1);\n      }\n\n      if ((pulse.rem.length || mod) && res.length < num && pulse.source) {\n        // replenish sample if backing data source is available\n        cap = cnt = res.length;\n        pulse.visit(pulse.SOURCE, t => {\n          // update, but skip previously sampled tuples\n          if (!map[vegaDataflow.tupleid(t)]) update(t);\n        });\n        cap = -1;\n      }\n\n      if (mod && res.length > num) {\n        const n = res.length-num;\n        for (let i=0; i<n; ++i) {\n          map[vegaDataflow.tupleid(res[i])] = -1;\n          out.rem.push(res[i]);\n        }\n        res = res.slice(n);\n      }\n\n      if (pulse.mod.length) {\n        // propagate modified tuples in the sample reservoir\n        pulse.visit(pulse.MOD, t => {\n          if (map[vegaDataflow.tupleid(t)]) out.mod.push(t);\n        });\n      }\n\n      if (pulse.add.length) {\n        // update sample reservoir\n        pulse.visit(pulse.ADD, update);\n      }\n\n      if (pulse.add.length || cap < 0) {\n        // output newly added tuples\n        out.add = res.filter(t => !map[vegaDataflow.tupleid(t)]);\n      }\n\n      this.count = cnt;\n      this.value = out.source = res;\n      return out;\n    }\n  });\n\n  /**\n   * Generates data tuples for a specified sequence range of numbers.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {number} params.start - The first number in the sequence.\n   * @param {number} params.stop - The last number (exclusive) in the sequence.\n   * @param {number} [params.step=1] - The step size between numbers in the sequence.\n   */\n  function Sequence(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Sequence.Definition = {\n    'type': 'Sequence',\n    'metadata': {'generates': true, 'changes': true},\n    'params': [\n      { 'name': 'start', 'type': 'number', 'required': true },\n      { 'name': 'stop', 'type': 'number', 'required': true },\n      { 'name': 'step', 'type': 'number', 'default': 1 },\n      { 'name': 'as', 'type': 'string', 'default': 'data' }\n    ]\n  };\n\n  vegaUtil.inherits(Sequence, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (this.value && !_.modified()) return;\n\n      const out = pulse.materialize().fork(pulse.MOD),\n            as = _.as || 'data';\n\n      out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;\n\n      this.value = d3Array.range(_.start, _.stop, _.step || 1).map(v => {\n        const t = {};\n        t[as] = v;\n        return vegaDataflow.ingest(t);\n      });\n\n      out.add = pulse.add.concat(this.value);\n\n      return out;\n    }\n  });\n\n  /**\n   * Propagates a new pulse without any tuples so long as the input\n   * pulse contains some added, removed or modified tuples.\n   * @param {object} params - The parameters for this operator.\n   * @constructor\n   */\n  function Sieve(params) {\n    vegaDataflow.Transform.call(this, null, params);\n    this.modified(true); // always treat as modified\n  }\n\n  vegaUtil.inherits(Sieve, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      this.value = pulse.source;\n      return pulse.changed()\n        ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS)\n        : pulse.StopPropagation;\n    }\n  });\n\n  /**\n   * Discretize dates to specific time units.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The data field containing date/time values.\n   */\n  function TimeUnit(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  const OUTPUT = ['unit0', 'unit1'];\n\n  TimeUnit.Definition = {\n    'type': 'TimeUnit',\n    'metadata': {'modifies': true},\n    'params': [\n      { 'name': 'field', 'type': 'field', 'required': true },\n      { 'name': 'interval', 'type': 'boolean', 'default': true },\n      { 'name': 'units', 'type': 'enum', 'values': vegaTime.TIME_UNITS, 'array': true },\n      { 'name': 'step', 'type': 'number', 'default': 1 },\n      { 'name': 'maxbins', 'type': 'number', 'default': 40 },\n      { 'name': 'extent', 'type': 'date', 'array': true},\n      { 'name': 'timezone', 'type': 'enum', 'default': 'local', 'values': ['local', 'utc'] },\n      { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': OUTPUT }\n    ]\n  };\n\n  vegaUtil.inherits(TimeUnit, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const field = _.field,\n            band = _.interval !== false,\n            utc = _.timezone === 'utc',\n            floor = this._floor(_, pulse),\n            offset = (utc ? vegaTime.utcInterval : vegaTime.timeInterval)(floor.unit).offset,\n            as = _.as || OUTPUT,\n            u0 = as[0],\n            u1 = as[1],\n            step = floor.step;\n\n      let min = floor.start || Infinity,\n          max = floor.stop || -Infinity,\n          flag = pulse.ADD;\n\n      if (_.modified() || pulse.modified(vegaUtil.accessorFields(field))) {\n        pulse = pulse.reflow(true);\n        flag = pulse.SOURCE;\n        min = Infinity;\n        max = -Infinity;\n      }\n\n      pulse.visit(flag, t => {\n        const v = field(t);\n        let a, b;\n        if (v == null) {\n          t[u0] = null;\n          if (band) t[u1] = null;\n        } else {\n          t[u0] = a = b = floor(v);\n          if (band) t[u1] = b = offset(a, step);\n          if (a < min) min = a;\n          if (b > max) max = b;\n        }\n      });\n\n      floor.start = min;\n      floor.stop = max;\n\n      return pulse.modifies(band ? as : u0);\n    },\n\n    _floor(_, pulse) {\n      const utc = _.timezone === 'utc';\n\n      // get parameters\n      const {units, step} = _.units\n        ? {units: _.units, step: _.step || 1}\n        : vegaTime.timeBin({\n          extent:  _.extent || vegaUtil.extent(pulse.materialize(pulse.SOURCE).source, _.field),\n          maxbins: _.maxbins\n        });\n\n      // check / standardize time units\n      const tunits = vegaTime.timeUnits(units),\n            prev = this.value || {},\n            floor = (utc ? vegaTime.utcFloor : vegaTime.timeFloor)(tunits, step);\n\n      floor.unit = vegaUtil.peek(tunits);\n      floor.units = tunits;\n      floor.step = step;\n      floor.start = prev.start;\n      floor.stop = prev.stop;\n      return this.value = floor;\n    }\n  });\n\n  /**\n   * An index that maps from unique, string-coerced, field values to tuples.\n   * Assumes that the field serves as a unique key with no duplicate values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The field accessor to index.\n   */\n  function TupleIndex(params) {\n    vegaDataflow.Transform.call(this, vegaUtil.fastmap(), params);\n  }\n\n  vegaUtil.inherits(TupleIndex, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const df = pulse.dataflow,\n          field = _.field,\n          index = this.value,\n          set = t => index.set(field(t), t);\n\n      let mod = true;\n\n      if (_.modified('field') || pulse.modified(field.fields)) {\n        index.clear();\n        pulse.visit(pulse.SOURCE, set);\n      } else if (pulse.changed()) {\n        pulse.visit(pulse.REM, t => index.delete(field(t)));\n        pulse.visit(pulse.ADD, set);\n      } else {\n        mod = false;\n      }\n\n      this.modified(mod);\n      if (index.empty > df.cleanThreshold) df.runAfter(index.clean);\n      return pulse.fork();\n    }\n  });\n\n  /**\n   * Extracts an array of values. Assumes the source data has already been\n   * reduced as needed (e.g., by an upstream Aggregate transform).\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The domain field to extract.\n   * @param {function(*,*): number} [params.sort] - An optional\n   *   comparator function for sorting the values. The comparator will be\n   *   applied to backing tuples prior to value extraction.\n   */\n  function Values(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  vegaUtil.inherits(Values, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const run = !this.value\n        || _.modified('field')\n        || _.modified('sort')\n        || pulse.changed()\n        || (_.sort && pulse.modified(_.sort.fields));\n\n      if (run) {\n        this.value = (_.sort\n          ? pulse.source.slice().sort(vegaDataflow.stableCompare(_.sort))\n          : pulse.source).map(_.field);\n      }\n    }\n  });\n\n  function WindowOp(op, field, param, as) {\n    const fn = WindowOps[op](field, param);\n    return {\n      init:   fn.init || vegaUtil.zero,\n      update: function(w, t) { t[as] = fn.next(w); }\n    };\n  }\n\n  const WindowOps = {\n    row_number: function() {\n      return {\n        next: w => w.index + 1\n      };\n    },\n    rank: function() {\n      let rank;\n      return {\n        init: () => rank = 1,\n        next: w => {\n          const i = w.index,\n                data = w.data;\n          return (i && w.compare(data[i - 1], data[i])) ? (rank = i + 1) : rank;\n        }\n      };\n    },\n    dense_rank: function() {\n      let drank;\n      return {\n        init: () => drank = 1,\n        next: w => {\n          const i = w.index,\n                d = w.data;\n          return (i && w.compare(d[i - 1], d[i])) ? ++drank : drank;\n        }\n      };\n    },\n    percent_rank: function() {\n      const rank = WindowOps.rank(),\n            next = rank.next;\n      return {\n        init: rank.init,\n        next: w => (next(w) - 1) / (w.data.length - 1)\n      };\n    },\n    cume_dist: function() {\n      let cume;\n      return {\n        init: () => cume = 0,\n        next: w => {\n          const d = w.data,\n                c = w.compare;\n          let i = w.index;\n          if (cume < i) {\n            while (i + 1 < d.length && !c(d[i], d[i + 1])) ++i;\n            cume = i;\n          }\n          return (1 + cume) / d.length;\n        }\n      };\n    },\n    ntile: function(field, num) {\n      num = +num;\n      if (!(num > 0)) vegaUtil.error('ntile num must be greater than zero.');\n      const cume = WindowOps.cume_dist(),\n            next = cume.next;\n      return {\n        init: cume.init,\n        next: w => Math.ceil(num * next(w))\n      };\n    },\n\n    lag: function(field, offset) {\n      offset = +offset || 1;\n      return {\n        next: w => {\n          const i = w.index - offset;\n          return i >= 0 ? field(w.data[i]) : null;\n        }\n      };\n    },\n    lead: function(field, offset) {\n      offset = +offset || 1;\n      return {\n        next: w => {\n          const i = w.index + offset,\n              d = w.data;\n          return i < d.length ? field(d[i]) : null;\n        }\n      };\n    },\n\n    first_value: function(field) {\n      return {\n        next: w => field(w.data[w.i0])\n      };\n    },\n    last_value: function(field) {\n      return {\n        next: w => field(w.data[w.i1 - 1])\n      };\n    },\n    nth_value: function(field, nth) {\n      nth = +nth;\n      if (!(nth > 0)) vegaUtil.error('nth_value nth must be greater than zero.');\n      return {\n        next: w => {\n          const i = w.i0 + (nth - 1);\n          return i < w.i1 ? field(w.data[i]) : null;\n        }\n      };\n    },\n\n    prev_value: function(field) {\n      let prev;\n      return {\n        init: () => prev = null,\n        next: w => {\n          const v = field(w.data[w.index]);\n          return v != null ? (prev = v) : prev;\n        }\n      };\n    },\n    next_value: function(field) {\n      let v, i;\n      return {\n        init: () => (v = null, i = -1),\n        next: w => {\n          const d = w.data;\n          return w.index <= i ? v\n            : (i = find(field, d, w.index)) < 0\n              ? (i = d.length, v = null)\n              : (v = field(d[i]));\n        }\n      };\n    }\n  };\n\n  function find(field, data, index) {\n    for (let n = data.length; index < n; ++index) {\n      const v = field(data[index]);\n      if (v != null) return index;\n    }\n    return -1;\n  }\n\n  const ValidWindowOps = Object.keys(WindowOps);\n\n  function WindowState(_) {\n    const ops = vegaUtil.array(_.ops),\n          fields = vegaUtil.array(_.fields),\n          params = vegaUtil.array(_.params),\n          as = vegaUtil.array(_.as),\n          outputs = this.outputs = [],\n          windows = this.windows = [],\n          inputs = {},\n          map = {},\n          counts = [],\n          measures = [];\n\n    let countOnly = true;\n\n    function visitInputs(f) {\n      vegaUtil.array(vegaUtil.accessorFields(f)).forEach(_ => inputs[_] = 1);\n    }\n    visitInputs(_.sort);\n\n    ops.forEach((op, i) => {\n      const field = fields[i],\n            mname = vegaUtil.accessorName(field),\n            name = measureName(op, mname, as[i]);\n\n      visitInputs(field);\n      outputs.push(name);\n\n      // Window operation\n      if (vegaUtil.hasOwnProperty(WindowOps, op)) {\n        windows.push(WindowOp(op, fields[i], params[i], name));\n      }\n\n      // Aggregate operation\n      else {\n        if (field == null && op !== 'count') {\n          vegaUtil.error('Null aggregate field specified.');\n        }\n        if (op === 'count') {\n          counts.push(name);\n          return;\n        }\n\n        countOnly = false;\n        let m = map[mname];\n        if (!m) {\n          m = (map[mname] = []);\n          m.field = field;\n          measures.push(m);\n        }\n        m.push(createMeasure(op, name));\n      }\n    });\n\n    if (counts.length || measures.length) {\n      this.cell = cell(measures, counts, countOnly);\n    }\n\n    this.inputs = Object.keys(inputs);\n  }\n\n  const prototype$1 = WindowState.prototype;\n\n  prototype$1.init = function() {\n    this.windows.forEach(_ => _.init());\n    if (this.cell) this.cell.init();\n  };\n\n  prototype$1.update = function(w, t) {\n    const cell = this.cell,\n          wind = this.windows,\n          data = w.data,\n          m = wind && wind.length;\n    let j;\n\n    if (cell) {\n      for (j = w.p0; j < w.i0; ++j) cell.rem(data[j]);\n      for (j = w.p1; j < w.i1; ++j) cell.add(data[j]);\n      cell.set(t);\n    }\n    for (j = 0; j < m; ++j) wind[j].update(w, t);\n  };\n\n  function cell(measures, counts, countOnly) {\n    measures = measures.map(m => compileMeasures(m, m.field));\n\n    const cell = {\n      num:   0,\n      agg:   null,\n      store: false,\n      count: counts\n    };\n\n    if (!countOnly) {\n      var n = measures.length,\n          a = cell.agg = Array(n),\n          i = 0;\n      for (; i<n; ++i) a[i] = new measures[i](cell);\n    }\n\n    if (cell.store) {\n      var store = cell.data = new TupleStore();\n    }\n\n    cell.add = function(t) {\n      cell.num += 1;\n      if (countOnly) return;\n      if (store) store.add(t);\n      for (let i=0; i<n; ++i) {\n        a[i].add(a[i].get(t), t);\n      }\n    };\n\n    cell.rem = function(t) {\n      cell.num -= 1;\n      if (countOnly) return;\n      if (store) store.rem(t);\n      for (let i=0; i<n; ++i) {\n        a[i].rem(a[i].get(t), t);\n      }\n    };\n\n    cell.set = function(t) {\n      let i, n;\n\n      // consolidate stored values\n      if (store) store.values();\n\n      // update tuple properties\n      for (i=0, n=counts.length; i<n; ++i) t[counts[i]] = cell.num;\n      if (!countOnly) for (i=0, n=a.length; i<n; ++i) a[i].set(t);\n    };\n\n    cell.init = function() {\n      cell.num = 0;\n      if (store) store.reset();\n      for (let i=0; i<n; ++i) a[i].init();\n    };\n\n    return cell;\n  }\n\n  /**\n   * Perform window calculations and write results to the input stream.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.\n   * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.\n   * @param {Array<function(object): *>} [params.fields] - An array of accessors\n   *   for data fields to use as inputs to window operations.\n   * @param {Array<*>} [params.params] - An array of parameter values for window operations.\n   * @param {Array<string>} [params.as] - An array of output field names for window operations.\n   * @param {Array<number>} [params.frame] - Window frame definition as two-element array.\n   * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row\n   *   number alone, ignoring peers with identical sort values. If false (default),\n   *   the window boundaries will be adjusted to include peer values.\n   */\n  function Window(params) {\n    vegaDataflow.Transform.call(this, {}, params);\n    this._mlen = 0;\n    this._mods = [];\n  }\n\n  Window.Definition = {\n    'type': 'Window',\n    'metadata': {'modifies': true},\n    'params': [\n      { 'name': 'sort', 'type': 'compare' },\n      { 'name': 'groupby', 'type': 'field', 'array': true },\n      { 'name': 'ops', 'type': 'enum', 'array': true, 'values': ValidWindowOps.concat(ValidAggregateOps) },\n      { 'name': 'params', 'type': 'number', 'null': true, 'array': true },\n      { 'name': 'fields', 'type': 'field', 'null': true, 'array': true },\n      { 'name': 'as', 'type': 'string', 'null': true, 'array': true },\n      { 'name': 'frame', 'type': 'number', 'null': true, 'array': true, 'length': 2, 'default': [null, 0] },\n      { 'name': 'ignorePeers', 'type': 'boolean', 'default': false }\n    ]\n  };\n\n  vegaUtil.inherits(Window, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      this.stamp = pulse.stamp;\n\n      const mod = _.modified(),\n            cmp = vegaDataflow.stableCompare(_.sort),\n            key = groupkey(_.groupby),\n            group = t => this.group(key(t));\n\n      // initialize window state\n      let state = this.state;\n      if (!state || mod) {\n        state = this.state = new WindowState(_);\n      }\n\n      // partition input tuples\n      if (mod || pulse.modified(state.inputs)) {\n        this.value = {};\n        pulse.visit(pulse.SOURCE, t => group(t).add(t));\n      } else {\n        pulse.visit(pulse.REM, t => group(t).remove(t));\n        pulse.visit(pulse.ADD, t => group(t).add(t));\n      }\n\n      // perform window calculations for each modified partition\n      for (let i=0, n=this._mlen; i<n; ++i) {\n        processPartition(this._mods[i], state, cmp, _);\n      }\n      this._mlen = 0;\n      this._mods = [];\n\n      // TODO don't reflow everything?\n      return pulse.reflow(mod).modifies(state.outputs);\n    },\n\n    group(key) {\n      let group = this.value[key];\n\n      if (!group) {\n        group = this.value[key] = SortedList(vegaDataflow.tupleid);\n        group.stamp = -1;\n      }\n\n      if (group.stamp < this.stamp) {\n        group.stamp = this.stamp;\n        this._mods[this._mlen++] = group;\n      }\n\n      return group;\n    }\n  });\n\n  function processPartition(list, state, cmp, _) {\n    const sort = _.sort,\n          range = sort && !_.ignorePeers,\n          frame = _.frame || [null, 0],\n          data = list.data(cmp), // use cmp for stable sort\n          n = data.length,\n          b = range ? d3Array.bisector(sort) : null,\n          w = {\n            i0: 0, i1: 0, p0: 0, p1: 0, index: 0,\n            data: data, compare: sort || vegaUtil.constant(-1)\n          };\n\n    state.init();\n    for (let i=0; i<n; ++i) {\n      setWindow(w, frame, i, n);\n      if (range) adjustRange(w, b);\n      state.update(w, data[i]);\n    }\n  }\n\n  function setWindow(w, f, i, n) {\n    w.p0 = w.i0;\n    w.p1 = w.i1;\n    w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));\n    w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);\n    w.index = i;\n  }\n\n  // if frame type is 'range', adjust window for peer values\n  function adjustRange(w, bisect) {\n    const r0 = w.i0,\n          r1 = w.i1 - 1,\n          c = w.compare,\n          d = w.data,\n          n = d.length - 1;\n\n    if (r0 > 0 && !c(d[r0], d[r0-1])) w.i0 = bisect.left(d, d[r0]);\n    if (r1 < n && !c(d[r1], d[r1+1])) w.i1 = bisect.right(d, d[r1]);\n  }\n\n  exports.aggregate = Aggregate;\n  exports.bin = Bin;\n  exports.collect = Collect;\n  exports.compare = Compare;\n  exports.countpattern = CountPattern;\n  exports.cross = Cross;\n  exports.density = Density;\n  exports.dotbin = DotBin;\n  exports.expression = Expression;\n  exports.extent = Extent;\n  exports.facet = Facet;\n  exports.field = Field;\n  exports.filter = Filter;\n  exports.flatten = Flatten;\n  exports.fold = Fold;\n  exports.formula = Formula;\n  exports.generate = Generate;\n  exports.impute = Impute;\n  exports.joinaggregate = JoinAggregate;\n  exports.kde = KDE;\n  exports.key = Key;\n  exports.load = Load;\n  exports.lookup = Lookup;\n  exports.multiextent = MultiExtent;\n  exports.multivalues = MultiValues;\n  exports.params = Params;\n  exports.pivot = Pivot;\n  exports.prefacet = PreFacet;\n  exports.project = Project;\n  exports.proxy = Proxy;\n  exports.quantile = Quantile;\n  exports.relay = Relay;\n  exports.sample = Sample;\n  exports.sequence = Sequence;\n  exports.sieve = Sieve;\n  exports.subflow = Subflow;\n  exports.timeunit = TimeUnit;\n  exports.tupleindex = TupleIndex;\n  exports.values = Values;\n  exports.window = Window;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","globalThis","self","vega","transforms","d3","vegaUtil","vegaDataflow","vegaStatistics","d3Array","vegaTime","multikey","f","x","n","length","i","k","String","groupkey","fields","measure","key","value","out","extend","name","base_op","compareIndex","a","b","idx","resolve","agg","map","forEach","getreqs","req","AggregateOps","Object","values","sort","init","missing","valid","_ops","op","add","v","t","rem","set","_out","compileMeasures","field","ctr","cell","ops","get","identity","slice","prototype","TupleStore","_key","tupleid","reset","Aggregate","params","Transform","call","_adds","_mods","_mlen","_alen","_drop","_cross","_dims","_dnames","_measures","_countOnly","_outputs","_inputs","_prev","_counts","Bin","SortedList","idFunc","source","input","data","cnt","push","remove","size","compare","resort","filter","merge","concat","Collect","Compare","Operator","update","_","modified","orders","CountPattern","Cross","parse","def","func","FUNCTION","hasOwnProperty","Distributions","error","d","FIELD","from","DISTRIBUTIONS","Density","pulse","materialize","SOURCE","fieldNames","as","accessorName","partition","groupby","groups","g","dims","DotBin","Expression","update$1","expr","accessor","datum","accessorFields","Extent","undefined","Subflow","parent","count","Facet","_keys","fastmap","_targets","active","a.forEach","Field","update$2","isArray","array","Filter","Flatten","Fold","Formula","Generate","Impute","getValue","m","method","Methods","getField","NaN","partition$1","keyvals","domain","kMap","gMap","group","j","gKey","gVals","Empty","JoinAggregate","KDE","Key","update$3","flat","Load","_pending","stop","output","ingest","fork","NO_FIELDS","NO_SOURCE","clean","Lookup","MultiExtent","update$4","ext","extents","min","Infinity","max","e","MultiValues","update$5","reduce","Params","Pivot","aggregateParams","keys","pivotKeys","limit","changed","bind","list","visit","ascending","PreFacet","Project","Proxy","Quantile","Relay","Sample","Sequence","Sieve","TimeUnit","TupleIndex","Values","WindowOp","param","fn","WindowOps","zero","w","next","WindowState","visitInputs","inputs","outputs","windows","counts","measures","countOnly","mname","num","store","Array","cell.add","cell.rem","cell.set","cell.init","Window","processPartition","state","cmp","range","ignorePeers","frame","bisector","i0","i1","p0","p1","index","constant","Math","abs","r0","r1","c","left","right","noop","__count__","sum","product","mean","mean_d","average","variance","dev","variancep","stdev","sqrt","stdevp","stderr","distinct","ci0","ci1","median","q2","q1","q3","Number","isNaN","argmin","argmax","ValidAggregateOps","prototype.reset","_add","_rem","_q","_get","_ext","prototype.add","prototype.rem","prototype.values","r","prototype.distinct","s","extent","prototype.extent","extentIndex","prototype.argmin","prototype.argmax","prototype.min","prototype.max","quartile","prototype.quartile","quartiles","prototype.q1","prototype.q2","prototype.q3","ci","prototype.ci","_ci","bootstrapCI","prototype.ci0","prototype.ci1","Definition","inherits","transform","aggr","mod","stamp","REM","ADD","modifies","drop","cross","runAfter","changes","collect","cells","tuple","vals","generate","base","curr","inputVisit","inputMap","dname","cellkey","outname","newcell","newtuple","p","names","replace","celltuple","adds","mods","prev","band","interval","bins","_bins","start","step","b0","b1","reflow","flag","ADD_MOD","bin","ceil","anchor","floor","toNumber","EPSILON","ALL","stableCompare","root","process","case","text","toUpperCase","toLowerCase","tokens","match","test","_parameterCheck","_match","_stop","_finish","RegExp","stopwords","pattern","tuples","_tuples","ADD_REM","truthy","kde","randomKDE","mixture","randomMixture","normal","randomNormal","lognormal","randomLogNormal","uniform","randomUniform","distributions","dist","distribution","minsteps","steps","maxsteps","sampleCurve","Output","smooth","span","dotbin","isFinite","dataflow","warn","connect","target","detachSubflow","targets","evaluate","activate","flow","subflow","flows","sf","_group","df","detach","initTargets","cache","rekey","id","delete","MOD","k0","k1","REFLOW","empty","cleanThreshold","revisit","isMod","has","arrays","maxlen","l","derive","fnames","initonly","gen","generator","impute","fName","kName","gNames","kVal","_impute","bandwidth","cumulative","density","scale","local","StopPropagation","format","async","request","url","then","res","touch","defaultValue","default","some","_transform","rederive","lut","addAll","dt","probs","EPSILON$1","q","quantiles","random","cap","OUTPUT","TIME_UNITS","utc","timezone","_floor","offset","utcInterval","timeInterval","unit","u0","u1","units","timeBin","maxbins","tunits","timeUnits","utcFloor","timeFloor","peek","clear","row_number","rank","dense_rank","drank","percent_rank","cume_dist","cume","ntile","lag","lead","first_value","last_value","nth_value","nth","prev_value","next_value","ValidWindowOps","prototype$1","prototype$1.init","prototype$1.update","wind","aggregate","countpattern","expression","facet","flatten","fold","formula","joinaggregate","load","lookup","multiextent","multivalues","pivot","prefacet","project","proxy","quantile","relay","sample","sequence","sieve","timeunit","tupleindex","window","defineProperty"]
}
