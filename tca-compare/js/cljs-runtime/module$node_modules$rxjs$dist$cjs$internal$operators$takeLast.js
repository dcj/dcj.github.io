shadow$provide.module$node_modules$rxjs$dist$cjs$internal$operators$takeLast=function(global,require,module,exports){var __extends=this&&this.__extends||function(){var extendStatics=function(d$jscomp$0,b$jscomp$0){extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)Object.prototype.hasOwnProperty.call(b,p)&&(d[p]=b[p])};return extendStatics(d$jscomp$0,b$jscomp$0)};return function(d,b){function __(){this.constructor=d}extendStatics(d,
b);d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)}}();Object.defineProperty(exports,"__esModule",{value:!0});exports.takeLast=void 0;global=require("module$node_modules$rxjs$dist$cjs$internal$Subscriber");var ArgumentOutOfRangeError_1=require("module$node_modules$rxjs$dist$cjs$internal$util$ArgumentOutOfRangeError"),empty_1=require("module$node_modules$rxjs$dist$cjs$internal$observable$empty"),lift_1=require("module$node_modules$rxjs$dist$cjs$internal$util$lift");exports.takeLast=
function(count){if(isNaN(count))throw new TypeError("'count' is not a number");if(0>count)throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;return function(source){return 0===count?empty_1.EMPTY:lift_1.lift(source,new TakeLastOperator(count))}};var TakeLastOperator=function(){function TakeLastOperator(total){this.total=total}TakeLastOperator.prototype.call=function(subscriber,source){return source.subscribe(new TakeLastSubscriber(subscriber,this.total))};return TakeLastOperator}(),TakeLastSubscriber=
function(_super){function TakeLastSubscriber(destination,total){destination=_super.call(this,destination)||this;destination.total=total;destination.ring=[];destination.count=0;return destination}__extends(TakeLastSubscriber,_super);TakeLastSubscriber.prototype._next=function(value){var ring=this.ring,total=this.total,count=this.count++;ring.length<total?ring.push(value):ring[count%total]=value};TakeLastSubscriber.prototype._complete=function(){var destination=this.destination,count=this.count;if(0<
count)for(var total=this.count>=this.total?this.total:this.count,ring=this.ring,i=0;i<total;i++){var idx=count++%total;destination.next(ring[idx])}destination.complete()};return TakeLastSubscriber}(global.Subscriber)}
//# sourceMappingURL=module$node_modules$rxjs$dist$cjs$internal$operators$takeLast.js.map
