{
"version":3,
"file":"module$node_modules$vega_projection$build$vega_projection.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/vega-projection/build/vega-projection.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_projection$build$vega_projection\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-geo'), require('d3-geo-projection')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'd3-geo', 'd3-geo-projection'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.d3, global.d3));\n}(this, (function (exports, d3Geo, d3GeoProjection) { 'use strict';\n\n  const defaultPath = d3Geo.geoPath();\n\n  const projectionProperties = [\n    // standard properties in d3-geo\n    'clipAngle',\n    'clipExtent',\n    'scale',\n    'translate',\n    'center',\n    'rotate',\n    'parallels',\n    'precision',\n    'reflectX',\n    'reflectY',\n\n    // extended properties in d3-geo-projections\n    'coefficient',\n    'distance',\n    'fraction',\n    'lobes',\n    'parallel',\n    'radius',\n    'ratio',\n    'spacing',\n    'tilt'\n  ];\n\n  /**\n   * Augment projections with their type and a copy method.\n   */\n  function create(type, constructor) {\n    return function projection() {\n      const p = constructor();\n\n      p.type = type;\n\n      p.path = d3Geo.geoPath().projection(p);\n\n      p.copy = p.copy || function() {\n        const c = projection();\n        projectionProperties.forEach(prop => {\n          if (p[prop]) c[prop](p[prop]());\n        });\n        c.path.pointRadius(p.path.pointRadius());\n        return c;\n      };\n\n      return p;\n    };\n  }\n\n  function projection(type, proj) {\n    if (!type || typeof type !== 'string') {\n      throw new Error('Projection type must be a name string.');\n    }\n    type = type.toLowerCase();\n    if (arguments.length > 1) {\n      projections[type] = create(type, proj);\n      return this;\n    } else {\n      return projections[type] || null;\n    }\n  }\n\n  function getProjectionPath(proj) {\n    return (proj && proj.path) || defaultPath;\n  }\n\n  const projections = {\n    // base d3-geo projection types\n    albers:               d3Geo.geoAlbers,\n    albersusa:            d3Geo.geoAlbersUsa,\n    azimuthalequalarea:   d3Geo.geoAzimuthalEqualArea,\n    azimuthalequidistant: d3Geo.geoAzimuthalEquidistant,\n    conicconformal:       d3Geo.geoConicConformal,\n    conicequalarea:       d3Geo.geoConicEqualArea,\n    conicequidistant:     d3Geo.geoConicEquidistant,\n    equalEarth:           d3Geo.geoEqualEarth,\n    equirectangular:      d3Geo.geoEquirectangular,\n    gnomonic:             d3Geo.geoGnomonic,\n    identity:             d3Geo.geoIdentity,\n    mercator:             d3Geo.geoMercator,\n    mollweide:            d3GeoProjection.geoMollweide,\n    naturalEarth1:        d3Geo.geoNaturalEarth1,\n    orthographic:         d3Geo.geoOrthographic,\n    stereographic:        d3Geo.geoStereographic,\n    transversemercator:   d3Geo.geoTransverseMercator\n  };\n\n  for (const key in projections) {\n    projection(key, projections[key]);\n  }\n\n  exports.getProjectionPath = getProjectionPath;\n  exports.projection = projection;\n  exports.projectionProperties = projectionProperties;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","globalThis","self","vega","d3","d3Geo","d3GeoProjection","create","type","constructor","projection","p","path","geoPath","copy","c","projectionProperties","forEach","prop","pointRadius","proj","Error","toLowerCase","arguments","length","projections","defaultPath","albers","geoAlbers","albersusa","geoAlbersUsa","azimuthalequalarea","geoAzimuthalEqualArea","azimuthalequidistant","geoAzimuthalEquidistant","conicconformal","geoConicConformal","conicequalarea","geoConicEqualArea","conicequidistant","geoConicEquidistant","equalEarth","geoEqualEarth","equirectangular","geoEquirectangular","gnomonic","geoGnomonic","identity","geoIdentity","mercator","geoMercator","mollweide","geoMollweide","naturalEarth1","geoNaturalEarth1","orthographic","geoOrthographic","stereographic","geoStereographic","transversemercator","geoTransverseMercator","key","getProjectionPath","Object","defineProperty","value"]
}
