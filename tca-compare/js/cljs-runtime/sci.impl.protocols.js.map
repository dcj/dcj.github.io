{"version":3,"sources":["sci/impl/protocols.cljc"],"mappings":"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","names":["var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","sci.impl.protocols/defprotocol","seq106637","G__106638","cljs.core/first","cljs.core/next","G__106639","G__106640","G__106641","self__4723__auto__","_","_ctx","protocol-name","signatures","vec__106649","cljs.core.nth","vec__106652","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core.apply","cljs.core/array-map","cljs.core/hash-set","docstring","sig","cljs.core/rest","opts","opt","cljs.core/Keyword","cljs.core/second","cljs.core/nnext","current-ns","sci.impl.vars/current-ns-name","expansion","cljs.core/with-meta","cljs.core.map","p__106668","vec__106670","seq__106671","first__106672","method-name","cljs.core/vec","fq-name","cljs.core.symbol","impls","cljs.core.conj","cljs.core.keyword","sci.impl.protocols/extend-protocol","seq106722","G__106723","G__106724","G__106725","G__106726","ctx","p1__106716#","p1__106715#","sci.impl.utils/split-when","cljs.core/seq?","protocol-var","fexpr__106743","cljs.core/deref","sci.impl.utils/eval-resolve-state","protocol-ns","pns","sci.impl.vars/getName","fq-meth-name","p__106749","vec__106751","seq__106752","first__106753","type","meths","meth","sci.impl.protocols/extend","seq106773","G__106774","G__106775","atype","proto+mmaps","seq__106782","chunk__106784","count__106785","i__106786","vec__106860","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__106900","proto","mmap","cljs.core.partition","proto-ns","seq__106865","chunk__106866","count__106867","i__106868","vec__106881","vec__106887","seq__106903","chunk__106904","count__106905","i__106906","vec__106936","vec__106949","fn-name","f","fn-sym","cljs.core/name","env","multi-method-var","cljs.core.get_in","multi-method","sci.impl.multimethods/multi-fn-add-method-impl","sci.impl.protocols/extend-type","seq106959","G__106960","G__106961","G__106962","G__106963","proto+meths","p1__106956#","p__106973","vec__106975","seq__106976","first__106977","p1__106957#","fexpr__106980","sci.impl.protocols/reify","seq106993","G__106994","G__106995","G__106996","G__106997","interface","cljs.core.into","sci.impl.protocols/satisfies?","protocol","obj","cljs.core/boolean","p1__107020#","cljs.core/some","cljs.core/get-method","sci.impl.types/type-impl","sci.impl.protocols/extends?","p1__107024#"],"sourcesContent":["(ns sci.impl.protocols\n  {:no-doc true}\n  (:refer-clojure :exclude [defprotocol extend-protocol\n                            extend extend-type reify satisfies?\n                            extends? implements?])\n  (:require [sci.impl.multimethods :as mms]\n            [sci.impl.types :as types]\n            [sci.impl.utils :as utils]\n            [sci.impl.vars :as vars]))\n\n(defn defprotocol [_ _ _ctx protocol-name & signatures]\n  (let [[docstring signatures]\n        (let [sig (first signatures)]\n          (if (string? sig) [sig (rest signatures)]\n              [nil signatures]))\n        [opts signatures]\n        (let [opt (first signatures)]\n          (if (keyword? opt) [{opt (second signatures)} (nnext signatures)]\n              [nil signatures]))\n        current-ns (str (vars/current-ns-name))\n        expansion\n        `(do\n           (def  ~(with-meta protocol-name\n                    {:doc docstring}) {:methods #{}\n                                       :ns *ns*})\n           ~@(map (fn [[method-name & _]]\n                    (let [fq-name (symbol (str current-ns) (str method-name))\n                          impls [`(defmulti ~method-name clojure.core/protocol-type-impl)\n                                 `(defmethod ~method-name :sci.impl.protocols/reified [x# & args#]\n                                    (let [methods# (clojure.core/-reified-methods x#)]\n                                      (apply (get methods# '~method-name) x# args#)))]\n                          impls (if (:extend-via-metadata opts)\n                                  (conj impls\n                                        `(defmethod ~method-name :default [x# & args#]\n                                           (let [meta# (meta x#)\n                                                 method# (get meta# '~fq-name)]\n                                             (if method#\n                                               (apply method# x# args#)\n                                               (throw (new #?(:clj IllegalArgumentException\n                                                              :cljs js/Error)\n                                                           (str \"No implementation of method: \"\n                                                                ~(keyword method-name) \" of protocol: \"\n                                                                (var ~protocol-name) \" found for: \"\n                                                                (clojure.core/protocol-type-impl x#))))))))\n                                  impls)]\n                      `(do\n                         ~@impls\n                         #?(:clj (alter-var-root (var ~protocol-name)\n                                                 update :methods conj ~method-name)\n                            :cljs (def ~protocol-name\n                                    (update ~protocol-name :methods conj ~method-name))))))\n                  signatures))]\n    expansion))\n\n(defn extend-protocol [_ _ ctx protocol-name & impls]\n  (let [impls (utils/split-when #(not (seq? %)) impls)\n        protocol-var (@utils/eval-resolve-state ctx protocol-name)\n        protocol-ns (-> protocol-var deref :ns)\n        pns (str (vars/getName protocol-ns))\n        fq-meth-name #(symbol pns %)\n        expansion\n        `(do ~@(map (fn [[type & meths]]\n                      `(do\n                         ~@(map (fn [meth]\n                                  `(defmethod ~(fq-meth-name (str (first meth)))\n                                     ~type\n                                     ~(second meth) ~@(nnext meth)))\n                                meths)))\n                    impls))]\n    #_(prn expansion)\n    expansion))\n\n(defn extend [ctx atype & proto+mmaps]\n  (doseq [[proto mmap] (partition 2 proto+mmaps)\n          :let [proto-ns (:ns proto)\n                pns (vars/getName proto-ns)]]\n    #_(when-not (protocol? proto)\n        (throw (new #?(:clj IllegalArgumentException\n                       :cljs js/Error)\n                    (str proto \" is not a protocol\"))))\n    #_(when (implements? proto atype)\n        (throw (new #?(:clj IllegalArgumentException\n                       :cljs js/Error)\n                    (str atype \" already directly implements \" (:on-interface proto) \" for protocol:\"\n                         (:var proto)))))\n    (doseq [[fn-name f] mmap]\n      (let [fn-sym (symbol (name fn-name))\n            env @(:env ctx)\n            multi-method-var (get-in env [:namespaces pns fn-sym])\n            multi-method @multi-method-var]\n        (mms/multi-fn-add-method-impl multi-method atype f))\n      )\n    #_(-reset-methods (vars/alter-var-root (:var proto) assoc-in [:impls atype] mmap))))\n\n(defn extend-type [_ _ ctx type & proto+meths]\n  (let [proto+meths (utils/split-when #(not (seq? %)) proto+meths)]\n    `(do ~@(map (fn [[proto & meths]]\n                  (let [protocol-var (@utils/eval-resolve-state ctx proto)\n                        protocol-ns (-> protocol-var deref :ns)\n                        pns (str (vars/getName protocol-ns))\n                        fq-meth-name #(symbol pns %)]\n                    `(do\n                       ~@(map (fn [meth]\n                                `(defmethod ~(fq-meth-name (str (first meth)))\n                                   ~type ~(second meth) ~@(nnext meth)))\n                              meths)))) proto+meths))))\n\n(defn reify [_ _ _ctx interface & meths]\n  (let [meths (into {} (map (fn [meth]\n                              `['~(first meth) (fn ~(second meth) ~@(nnext meth))])\n                            meths))]\n    `(clojure.core/-reified ~interface ~meths)))\n\n(defn satisfies? [protocol obj]\n  (boolean (some #(get-method % (types/type-impl obj)) (:methods protocol))))\n\n(defn extends?\n  \"Returns true if atype extends protocol\"\n  [protocol atype]\n  (boolean (some #(get-method % atype) (:methods protocol))))\n"]}