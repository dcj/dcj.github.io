{"version":3,"sources":["browjure/state.cljs"],"mappings":"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","names":["browjure.state/registry","cljs.core.atom","browjure.state/combined-values","ident","dataset","cljs.core/deref","cljs.core.get_in","controls","cljs.core.conj","keyz","cljs.core/keys","valz","cljs.core.map","cljs.core/vals","deps","cljs.core.into","p__99692","vec__99693","cljs.core.nth","vec__99696","k","attribute","dep-path","cljs.core.concat","js/module$node_modules$rxjs$dist$cjs$index.combineLatest","cljs.core/to-array","js/module$node_modules$rxjs$dist$cjs$operators$index.map","vals","cljs.core/vector","browjure.state/init-leaf","path","init-val","cljs.core.swap_BANG_","cljs.core/assoc-in","js/module$node_modules$rxjs$dist$cjs$index.BehaviorSubject","js/console.log","browjure.state/get-or-create-subject","init-value","browjure.state/use-path-sub","vec__99720","subject","state","set-state","js/module$node_modules$react$index.useState","js/module$node_modules$react$index.useEffect","browjure.state/set-path-value","value","p__99723","map__99725","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","browjure.state/use-combined-sub","reduce-fn","dep-subjects","p__99732","vec__99733","dep-name","latest-combinations","new-vals","sub","combined-values"],"sourcesContent":["(ns browjure.state\n  (:require\n   [rxjs :as rx :refer [Subject BehaviorSubject of asyncScheduler combineLatest]]\n   [\"rxjs/operators\" :as ops]\n   [react :as react]))\n\n(def registry\n  (atom {}))\n\n(defn combined-values\n  [ident]\n  (let [dataset  (get-in @registry ident)\n        controls (get-in @registry (conj ident :dataset/controls))\n        keyz     (keys controls)\n        valz     (map :subject (vals controls))\n        deps     (into {}\n                       (map (fn [[k [dataset attribute]]]\n                              (let [dep-path (concat [:dataset/id dataset]\n                                                     (when attribute\n                                                       [:dataset/controls attribute])\n                                                     [:subject])]\n                                [k (get-in @registry dep-path)]))\n                            (:dataset/dependencies dataset)))]\n    (.pipe (combineLatest (to-array (concat valz (vals deps))))\n           (ops/map (fn [vals]\n                      (into {} (map vector (concat keyz (keys deps)) vals)))))))\n\n(defn init-leaf [path init-val]\n  (swap! registry assoc-in\n         (conj path :subject)\n         (BehaviorSubject. init-val))\n  (js/console.log \"register\" @registry))\n\n(defn get-or-create-subject [path init-value]\n  (if (get-in @registry (conj path :subject))\n    (get-in @registry (conj path :subject))\n    (do (init-leaf path init-value)\n        (get-in @registry (conj path :subject)))))\n\n(defn use-path-sub [path init-value]\n  (let [subject (get-or-create-subject path init-value)\n        [state set-state] (react/useState init-value)]\n    (react/useEffect (fn []\n                       (.subscribe subject set-state)\n                       (fn []))\n                     #js [init-value])\n    state))\n\n(defn set-path-value [path value]\n  (.next (get-or-create-subject path value) value))\n\n(defn use-combined-sub [{:keys [deps reduce-fn init-value path]}]\n  (let [value        (use-path-sub path init-value)\n        dep-subjects (into  {} (map (fn [[dep-name dep-path]]\n                                      [dep-name (get-or-create-subject dep-path nil)])\n                                    deps))\n        latest-combinations (.pipe (combineLatest (to-array (vals dep-subjects)))\n                                   (ops/map (fn [new-vals]\n                                              (into {} (map vector (keys deps) new-vals)))))]\n    (react/useEffect\n     (fn []\n       (let [sub (.subscribe latest-combinations (fn [combined-values]\n                                                   (js/console.log \"combined values\" combined-values)\n                                                   (set-path-value path\n                                                                   (reduce-fn combined-values))))]\n         (fn [] (.unsubscribe sub)))) #js [1])\n    value))\n"]}