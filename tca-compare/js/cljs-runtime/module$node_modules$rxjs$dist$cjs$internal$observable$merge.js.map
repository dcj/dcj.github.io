{
"version":3,
"file":"module$node_modules$rxjs$dist$cjs$internal$observable$merge.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,4DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAExHC,MAAAC,eAAA,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAAI,MAAA,CAAgB,IAAK,EACrB,KAAIC,aAAeP,OAAA,CAAQ,uDAAR,CAAnB,CACIQ,cAAgBR,OAAA,CAAQ,6DAAR,CADpB,CAEIS,WAAaT,OAAA,CAAQ,+DAAR,CAFjB,CAGIU,YAAcV,OAAA,CAAQ,iEAAR,CAuBlBE;OAAAI,MAAA,CAtBAA,QAAc,EAAG,CAEb,IADA,IAAIK,YAAc,EAAlB,CACSC,GAAK,CAAd,CAAiBA,EAAjB,CAAsBC,SAAAC,OAAtB,CAAwCF,EAAA,EAAxC,CACID,WAAA,CAAYC,EAAZ,CAAA,CAAkBC,SAAA,CAAUD,EAAV,CAElBG,GAAAA,CAAaC,QACjB,KAAIC,UAAYC,IAAAA,EAAhB,CACIC,KAAOR,WAAA,CAAYA,WAAAG,OAAZ,CAAiC,CAAjC,CACPN,cAAAY,YAAA,CAA0BD,IAA1B,CAAJ,EACIF,SACA,CADYN,WAAAU,IAAA,EACZ,CAAyB,CAAzB,CAAIV,WAAAG,OAAJ,EAA6E,QAA7E,GAA8B,MAAOH,YAAA,CAAYA,WAAAG,OAAZ,CAAiC,CAAjC,CAArC,GACIC,EADJ,CACiBJ,WAAAU,IAAA,EADjB,CAFJ,EAMyB,QANzB,GAMS,MAAOF,KANhB,GAOIJ,EAPJ,CAOiBJ,WAAAU,IAAA,EAPjB,CASA,OAAI,CAACJ,SAAL,EAAyC,CAAzC,GAAkBN,WAAAG,OAAlB,EAA8CH,WAAA,CAAY,CAAZ,CAA9C,UAAwEJ,aAAAe,WAAxE,CACWX,WAAA,CAAY,CAAZ,CADX,CAGOF,UAAAc,SAAA,CAAoBR,EAApB,CAAA,CAAgCL,WAAAc,UAAA,CAAsBb,WAAtB;AAAmCM,SAAnC,CAAhC,CApBM,CARuG;",
"sources":["node_modules/rxjs/dist/cjs/internal/observable/merge.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$rxjs$dist$cjs$internal$observable$merge\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.merge = void 0;\nvar Observable_1 = require(\"../Observable\");\nvar isScheduler_1 = require(\"../util/isScheduler\");\nvar mergeAll_1 = require(\"../operators/mergeAll\");\nvar fromArray_1 = require(\"./fromArray\");\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var concurrent = Infinity;\n    var scheduler = undefined;\n    var last = observables[observables.length - 1];\n    if (isScheduler_1.isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (!scheduler && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {\n        return observables[0];\n    }\n    return mergeAll_1.mergeAll(concurrent)(fromArray_1.fromArray(observables, scheduler));\n}\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","merge","Observable_1","isScheduler_1","mergeAll_1","fromArray_1","observables","_i","arguments","length","concurrent","Infinity","scheduler","undefined","last","isScheduler","pop","Observable","mergeAll","fromArray"]
}
