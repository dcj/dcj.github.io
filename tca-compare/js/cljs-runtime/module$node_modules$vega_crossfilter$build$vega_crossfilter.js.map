{
"version":3,
"file":"module$node_modules$vega_crossfilter$build$vega_crossfilter.js",
"lineCount":22,
"mappings":"AAAAA,cAAA,4DAAA,CAAgF,QAAQ,CAACC,eAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,gBAAvB,CAAgC,CACvH,SAAS,CAACH,MAAD,CAASI,OAAT,CAAkB,CACP,QAAnB,GAAA,MAAOD,iBAAP,EAAiD,WAAjD,GAA+B,MAAOD,OAAtC,CAA+DE,OAAA,CAAQD,gBAAR,CAAiBF,OAAA,CAAQ,4CAAR,CAAjB,CAAsCA,OAAA,CAAQ,uDAAR,CAAtC,CAAgEA,OAAA,CAAQ,+CAAR,CAAhE,CAA/D,CACkB,UAAlB,GAAA,MAAOI,OAAP,EAAgCA,MAAAC,IAAhC,CAA6CD,MAAA,CAAO,CAAC,SAAD,CAAY,UAAZ,CAAwB,eAAxB;AAAyC,WAAzC,CAAP,CAA8DD,OAA9D,CAA7C,EACCJ,MAAA,CAA+B,WAAtB,GAAA,MAAOO,WAAP,CAAoCA,UAApC,CAAiDP,MAAjD,EAA2DQ,IAApE,CAA0EJ,OAAA,EAASJ,MAAAS,KAAA,CAAcT,MAAAS,KAAd,EAA6B,EAA7B,CAAiCT,MAAAS,KAAAC,WAAjC,CAA0D,EAAnE,EAAwEV,MAAAW,GAAxE,CAAmFX,MAAAS,KAAnF,CAAgGT,MAAAS,KAAhG,CAD3E,CAF0B,CAA3B,CAAA,CAIC,IAJD,CAIQ,QAAS,CAACN,OAAD,CAAUS,OAAV,CAAmBC,YAAnB,CAAiCC,QAAjC,CAA2C,CAW3DC,QAASA,QAAO,EAAG,CAAA,IAEbC,MAAQ,CAFK,CAGbC,KAAO,EAHM,CAIbC,KAAOC,OAAA,CAAQ,CAAR,CAJM,CAKbC,KAAOC,cAAA,CAAM,CAAN,CAASL,KAAT,CALM,CAMbM,KAAOD,cAAA,CAAM,CAAN,CAASL,KAAT,CAEX,OAAO,CACLC,KAAMA,QAAA,EAAMA,CAAAA,MAAAA,KAAAA,CADP,CAGLC,KAAMA,QAAA,EAAO,CAAgBA,IAAAA,yBAAAA,IAAMK,KAAAA,OAAAN,IAAAM,OAoEjCF,yBAAAE,OAAJ,EAAoBA,MAApB;CACAC,MAEA,CAFe,IAAIH,wBAAAI,YAAJ,CAAsBF,MAAtB,CAEf,CADAC,MAAAE,IAAA,CAASL,wBAAT,CACA,CAAA,wBAAA,CAAOG,MAHP,CApEe,OAAAN,KAAA,CAAO,wBAAP,CAHR,CAKL,IAAAS,QAAG,CAACN,KAAD,CAAQ,CACT,IADS,IACAO,EAAE,CADF,CACKC,EAAEZ,IAAAM,OADP,CACoBO,EAAET,KAAAE,OADtB,CACoCQ,CAA7C,CAAgDH,CAAhD,CAAkDE,CAAlD,CAAqD,EAAEF,CAAvD,CACEG,CAEA,CAFIV,KAAA,CAAMO,CAAN,CAEJ,CADAG,CAAAC,OACA,CADWH,CAAA,EACX,CAAAZ,IAAAgB,KAAA,CAAUF,CAAV,CAJO,CALN,CAaL,OAAAG,QAAM,CAACC,GAAD,CAAMC,GAAN,CAAW,CACf,IAAMN,EAAIb,IAAAM,OACJC,IAAAA,CAAOa,KAAA,CAAMP,CAAN,CAAUK,GAAV,CADb,KAEMG,QAAUrB,IAFhB,CAGOW,CAHP,CAGUC,CAGV,KAAKD,CAAL,CAAO,CAAP,CAAU,CAACQ,GAAA,CAAIR,CAAJ,CAAX,EAAqBA,CAArB,CAAuBE,CAAvB,CAA0B,EAAEF,CAA5B,CACEJ,GAAA,CAAKI,CAAL,CACA,CADUX,IAAA,CAAKW,CAAL,CACV,CAAAU,OAAA,CAAQV,CAAR,CAAA,CAAaA,CAIf,KAAKC,CAAL,CAAOD,CAAP,CAAUA,CAAV,CAAYE,CAAZ,CAAe,EAAEF,CAAjB,CAAoB,CAClB,IAAAG,EAAId,IAAA,CAAKW,CAAL,CACCQ,IAAA,CAAIR,CAAJ,CAAL,CAOEU,OAAA,CAAQV,CAAR,CAPF,CAOe,EAPf,EACEU,OAAA,CAAQV,CAAR,CAIA,CAJaC,CAIb,CAHAT,IAAA,CAAKS,CAAL,CAGA,CAHUT,IAAA,CAAKQ,CAAL,CAGV,CAFAN,IAAA,CAAKO,CAAL,CAEA,CAFUP,IAAA,CAAKM,CAAL,CAEV;AADAJ,GAAA,CAAKK,CAAL,CACA,CADUE,CACV,CAAAA,CAAAC,OAAA,CAAWH,CAAA,EALb,CASAT,KAAA,CAAKQ,CAAL,CAAA,CAAU,CAXQ,CAcpBX,IAAA,CAAOO,GACP,OAAOc,QA5BQ,CAbZ,CA4CLC,KAAMA,QAAA,EAAMhB,CAAAA,MAAAN,KAAAM,OAAAA,CA5CP,CA8CLH,KAAMA,QAAA,EAAMA,CAAAA,MAAAA,KAAAA,CA9CP,CAgDLE,KAAMA,QAAA,EAAMA,CAAAA,MAAAA,KAAAA,CAhDP,CAkDLkB,MAAOA,QAAA,CAAAC,CAAA,CAAK,CAAA,MAAAnB,KAAA,CAAKmB,CAAL,CAAA,CAAUrB,IAAA,CAAKqB,CAAL,CAAV,CAlDP,CAoDLC,IAAKA,QAAA,EACH,CAAA,MAAQ,IAAR,CAAA1B,KAAA,CAAgB,GAAhB,CAA+B,KAAR,CAAAA,KAAA,CAAkB,KAAlB,CAA2B,UAAlD,CArDG,CAuDL,IAAAU,QAAG,CAACe,CAAD,CAAIE,GAAJ,CAAS,CAAEvB,IAAA,CAAKqB,CAAL,CAAA,EAAWE,GAAb,CAvDP,CAyDL,MAAAC,QAAK,CAACH,CAAD,CAAIE,GAAJ,CAAS,CAAEvB,IAAA,CAAKqB,CAAL,CAAA,EAAW,CAACE,GAAd,CAzDT,CA2DL,OAAAE,QAAM,CAACf,CAAD,CAAIgB,CAAJ,CAAO,CAEX,GAAIhB,CAAJ,CADUV,IAAAG,OACV,EAAauB,CAAb,CAAiB9B,KAAjB,CACEA,KAEA,CAFQ+B,IAAAC,IAAA,CAASF,CAAT,CAAY9B,KAAZ,CAER,CADAI,IACA,CADOC,cAAA,CAAMS,CAAN,CAASd,KAAT,CAAgBI,IAAhB,CACP,CAAAE,IAAA,CAAOD,cAAA,CAAMS,CAAN,CAASd,KAAT,CALE,CA3DR,CARU,CAqFnBK,QAASA,eAAK,CAACS,CAAD,CAAIgB,CAAJ,CAAOzB,KAAP,CAAc,CACpBG,CAAAA;AAAO,CAAK,GAAJ,CAAAsB,CAAA,CAAYG,MAAZ,CACJ,KAAJ,CAAAH,CAAA,CAAcI,OAAd,CACA/B,OAFO,EAEEW,CAFF,CAGTT,MAAJ,EAAWG,CAAAE,IAAA,CAASL,KAAT,CACX,OAAOG,EALmB,CAQ5B2B,QAASA,UAAS,CAACC,KAAD,CAAQxB,UAAR,CAAWyB,KAAX,CAAkB,CAClC,IAAMC,IAAO,CAAPA,EAAY1B,UAElB,OAAO,CACLe,IAASW,GADJ,CAELC,KAAS,CAACD,GAFL,CAGLE,MAASH,KAAAI,MAAA,EAHJ,CAILC,OAASN,KAAAM,OAJJ,CAKLN,MAASA,KAAAA,MALJ,CAMLb,KAASa,KAAAb,KANJ,CAQL,MAAAoB,QAAK,CAACC,KAAD,CAAQxC,IAAR,CAAc,CACjB,IACMoC,MADMK,IACEH,OAAA,CADFG,IACaL,MAAX,CAAsBI,KAAAE,MAAtB,CACRC,MAAAA,CAAMH,KAAAR,MAFZ,KAGMY,GAAKR,KAAA,CAAM,CAAN,CACLS,MAAAA,CAAKT,KAAA,CAAM,CAAN,CAJX,KAKMU,GAAKH,KAAAxC,OALX,CAMIK,CAEJ,KAAKA,CAAL,CAAO,CAAP,CAAWA,CAAX,CAAaoC,EAAb,CAAiB,EAAEpC,CAAnB,CAAsBR,IAAA,CAAK2C,KAAA,CAAInC,CAAJ,CAAL,CAAA,EAAgB0B,GACtC,KAAK1B,CAAL,CAAOqC,KAAP,CAAWrC,CAAX,CAAasC,EAAb,CAAiB,EAAEtC,CAAnB,CAAsBR,IAAA,CAAK2C,KAAA,CAAInC,CAAJ,CAAL,CAAA,EAAgB0B,GACtC,OAVYO,KADK,CARd,CAH2B,CA8BpCM,QAASA,YAAW,EAAG,CAAA,IACjBf;AAAQjC,OAAA,CAAQ,CAAR,CADS,CAEjB2C,eAAQ,EAFS,CAGjBvB,KAAO,CA2EX,OAAO,CACL6B,OA1EFA,QAAe,CAACC,GAAD,CAAMpD,IAAN,CAAYqD,IAAZ,CAAkB,CAC/B,GAAI,CAACrD,IAAAM,OAAL,CAAkB,MAAO,EAEzB,KAAMgD,GAAKhC,IAAX,CACI2B,GAAKjD,IAAAM,OADT,CAEIiD,KAAOrD,OAAA,CAAQ+C,EAAR,CAFX,CAGIO,KAAOpC,KAAA,CAAM6B,EAAN,CAHX,CAIgBtC,CAEhB,KAAKA,CAAL,CAAO,CAAP,CAAUA,CAAV,CAAYsC,EAAZ,CAAgB,EAAEtC,CAAlB,CACE6C,IAAA,CAAK7C,CAAL,CACA,CADUyC,GAAA,CAAIpD,IAAA,CAAKW,CAAL,CAAJ,CACV,CAAA4C,IAAA,CAAK5C,CAAL,CAAA,CAAUA,CAEZ6C,KAAA,CAAOC,IAAA,CAAKD,IAAL,CAAWD,IAAX,CAEP,IAAID,EAAJ,CAAQ,CACNI,GAAA,CAAOb,cACPc,KAAA,CAAOxB,cACPU,eAAA,CAAQzB,KAAA,CAAMkC,EAAN,CAAWL,EAAX,CACRd,eAAA,CAAQjC,OAAA,CAAQoD,EAAR,CAAaL,EAAb,CACoBO,EAAAA,CAAAA,IAAgBX,KAAAA,MAAAA,cAAAA,CAAOV,MAAAA,cAAPU,CAyE5Ce,GAAK,CAzEuCf,CAyEpCgB,GAAK,CAzE+BhB,CAyE5BlC,UAEpB,KAAKA,UAAL,CAAO,CAAP,CAAUiD,EAAV,CA3E4BN,EA2E5B,EAAqBO,EAArB,CA3E4CZ,EA2E5C,CAA8B,EAAEtC,UAAhC,CA3EgB+C,GA4EV,CAAOE,EAAP,CAAJ,CAAiBE,CAAA,CAAOD,EAAP,CAAjB,EACEhB,KAAA,CAAMlC,UAAN,CACA,CA9EY+C,GA6ED,CAAOE,EAAP,CACX,CAAAzB,KAAA,CAAMxB,UAAN,CAAA;AA9EkBgD,IA8EP,CAAOC,EAAA,EAAP,CAFb,GAIEf,KAAA,CAAMlC,UAAN,CACA,CADWmD,CAAA,CAAOD,EAAP,CACX,CAAA1B,KAAA,CAAMxB,UAAN,CAAA,CAjFkC4C,IAiFvB,CAAOM,EAAA,EAAP,CAAX,CAjFMR,IA4ER,CASF,KAAA,CAAOO,EAAP,CArF4BN,EAqF5B,CAAgB,EAAEM,EAAF,CAAM,EAAEjD,UAAxB,CACEkC,KAAA,CAAMlC,UAAN,CACA,CAvFc+C,GAsFH,CAAOE,EAAP,CACX,CAAAzB,KAAA,CAAMxB,UAAN,CAAA,CAvFoBgD,IAuFT,CAAOC,EAAP,CAGb,KAAA,CAAOC,EAAP,CA1F4CZ,EA0F5C,CAAgB,EAAEY,EAAF,CAAM,EAAElD,UAAxB,CACEkC,KAAA,CAAMlC,UAAN,CACA,CADWmD,CAAA,CAAOD,EAAP,CACX,CAAA1B,KAAA,CAAMxB,UAAN,CAAA,CA5FoC4C,IA4FzB,CAAOM,EAAP,CAAX,CA5FQR,IALA,CAAR,IAMO,CACL,GAAW,CAAX,CAAIA,IAAJ,CAAc,IAAK1C,CAAL,CAAO,CAAP,CAAUA,CAAV,CAAYsC,EAAZ,CAAgB,EAAEtC,CAAlB,CACZ4C,IAAA,CAAK5C,CAAL,CAAA,EAAW0C,IAEbR,eAAA,CAAQW,IACRrB,eAAA,CAAQoB,IALH,CAOPjC,IAAA,CAAOgC,EAAP,CAAYL,EAEZ,OAAO,CAACd,MAAOoB,IAAR,CAAcV,MAAOW,IAArB,CA9BwB,CAyE1B,CAELvC,OA1CFA,QAAe,CAACC,GAAD,CAAMC,GAAN,CAAW,CAExB,IAAMN,EAAIS,IAAV,CACIwB,GADJ,CACSnC,CADT,CACYC,CAGZ,KAAKD,CAAL,CAAO,CAAP,CAAU,CAACQ,GAAA,CAAIgB,cAAA,CAAMxB,CAAN,CAAJ,CAAX,EAA4BA,CAA5B,CAA8BE,CAA9B,CAAiC,EAAEF,CAAnC,EAGA,IAAKC,CAAL,CAAOD,CAAP,CAAUA,CAAV,CAAYE,CAAZ,CAAe,EAAEF,CAAjB,CACOQ,GAAA,CAAI2B,GAAJ,CAAQX,cAAA,CAAMxB,CAAN,CAAR,CAAL,GACEwB,cAAA,CAAMvB,CAAN,CAEA;AAFWkC,GAEX,CADAD,cAAA,CAAMjC,CAAN,CACA,CADWiC,cAAA,CAAMlC,CAAN,CACX,CAAA,EAAEC,CAHJ,CAOFU,KAAA,CAAOT,CAAP,CAAWK,GAjBa,CAwCnB,CAGLuB,OAjBFA,QAAe,CAACF,KAAD,CAAQnC,KAAR,CAAe,CAE5B,GAAIA,KAAJ,CACE,IAAAS,EAAIT,KAAAE,OADN,KAGEF,MACA,CADQyC,cACR,CAAAhC,CAAA,CAAIS,IAEN,OAAO,CACL3B,OAAAoE,WAAA,CAAmB3D,KAAnB,CAA0BmC,KAAA,CAAM,CAAN,CAA1B,CAAoC,CAApC,CAAuC1B,CAAvC,CADK,CAELlB,OAAAqE,YAAA,CAAoB5D,KAApB,CAA2BmC,KAAA,CAAM,CAAN,CAA3B,CAAqC,CAArC,CAAwC1B,CAAxC,CAFK,CARqB,CAcvB,CAILQ,QAxBFA,QAAgB,CAACF,GAAD,CAAM,CACpB,IADoB,IACXR,EAAE,CADS,CACNE,EAAES,IAAhB,CAAsBX,CAAtB,CAAwBE,CAAxB,CAA2B,EAAEF,CAA7B,CACEwB,cAAA,CAAMxB,CAAN,CAAA,CAAWQ,GAAA,CAAIgB,cAAA,CAAMxB,CAAN,CAAJ,CAFO,CAoBf,CAKLwB,MAASA,QAAA,EAAMA,CAAAA,MAAAA,eAAAA,CALV,CAMLb,KAASA,QAAA,EAAMA,CAAAA,MAAAA,KAAAA,CANV,CA9Ec,CAwFvBmC,QAASA,KAAI,CAACQ,MAAD,CAAS9B,KAAT,CAAgB,CAC3B8B,MAAAR,KAAAS,KAAA,CAAiB/B,KAAjB,CAAwB,QAAA,CAACgC,CAAD,CAAIC,CAAJ,CAAU,CAC1BC,CAAAA,CAAIJ,MAAA,CAAOE,CAAP,CACJG,EAAAA,CAAIL,MAAA,CAAOG,CAAP,CACV,OAAOC,EAAA,CAAIC,CAAJ,CAAQ,EAAR,CAAaD,CAAA;AAAIC,CAAJ,CAAQ,CAAR,CAAY,CAHA,CAAlC,CAKA,OAAO3E,QAAA4E,QAAA,CAAgBN,MAAhB,CAAwB9B,KAAxB,CANoB,CAwC7BqC,QAASA,YAAW,CAACC,MAAD,CAAS,CAC3B7E,YAAA8E,UAAAR,KAAA,CAA4B,IAA5B,CAAkCpE,OAAA,EAAlC,CAA6C2E,MAA7C,CAEA,KAAAE,MAAA,CADA,IAAAC,SACA,CADgB,IAFW,CA6X7BC,QAASA,cAAa,CAACJ,MAAD,CAAS,CAC7B7E,YAAA8E,UAAAR,KAAA,CAA4B,IAA5B,CAAkC,IAAlC,CAAwCO,MAAxC,CAD6B,CAjoB/B,IAAMzC,OAASA,QAAA,CAAAnB,CAAA,CAAK,CAAA,MAAA,KAAIiE,UAAJ,CAAejE,CAAf,CAAA,CAApB,CAEMoB,QAAUA,QAAA,CAAApB,CAAA,CAAK,CAAA,MAAA,KAAIkE,WAAJ,CAAgBlE,CAAhB,CAAA,CAFrB,CAIMX,QAAUA,QAAA,CAAAW,CAAA,CAAK,CAAA,MAAA,KAAImE,WAAJ,CAAgBnE,CAAhB,CAAA,CAsQrB2D,YAAAS,WAAA,CAAyB,CACvB,KAAQ,aADe,CAEvB,SAAY,EAFW,CAGvB,OAAU,CACR,CAAE,KAAQ,QAAV,CAAoB,KAAQ,OAA5B,CAAqC,MAAS,CAAA,CAA9C,CAAoD,SAAY,CAAA,CAAhE,CADQ,CAER,CAAE,KAAQ,OAAV;AAAmB,KAAQ,OAA3B,CAAoC,MAAS,CAAA,CAA7C,CAAmD,SAAY,CAAA,CAA/D,CACE,QAAW,CAAC,KAAQ,QAAT,CAAmB,MAAS,CAAA,CAA5B,CAAkC,OAAU,CAA5C,CADb,CAFQ,CAHa,CAUzBpF,SAAAqF,SAAA,CAAkBV,WAAlB,CAA+B5E,YAAA8E,UAA/B,CAAuD,CACrD,UAAAS,QAAS,CAACC,CAAD,CAAIC,KAAJ,CAAW,CAClB,MAAK,KAAAV,MAAL,CAGaS,CAAAE,SAAA,CAAW,QAAX,CAGJ,EAFEF,CAAAG,OAAAC,KAAA,CAAc,QAAA,CAAAC,CAAA,CAAK,CAAA,MAAAJ,MAAAC,SAAA,CAAeG,CAAAF,OAAf,CAAA,CAAnB,CAEF,CACH,IAAAG,OAAA,CAAYN,CAAZ,CAAeC,KAAf,CADG,CAEH,IAAAM,KAAA,CAAUP,CAAV,CAAaC,KAAb,CARN,CACS,IAAAO,KAAA,CAAUR,CAAV,CAAaC,KAAb,CAFS,CADiC,CAcrD,KAAAO,QAAI,CAACR,CAAD,CAAIC,KAAJ,CAAW,CASb,IARA,IAAME,OAASH,CAAAG,OAAf,CACMnD,MAAQgD,CAAAhD,MADd,CAEMyD,QAAU,IAAAjB,SAAViB,CAA0B,EAFhC,CAGMC,KAAO,IAAAnB,MAAPmB,CAAoB,EAH1B,CAIMjE,EAAIO,KAAA9B,OAJV,CAKIK,EAAI,CALR,CAKWyC,GAGX,CAAOzC,CAAP,CAASkB,CAAT,CAAY,EAAElB,CAAd,CACEyC,GAEA,CAFMmC,MAAA,CAAO5E,CAAP,CAAAoF,MAEN,CADA5D,GACA,CADQ0D,OAAA,CAAQzC,GAAR,CACR,GADyByC,OAAA,CAAQzC,GAAR,CACzB;AADwCF,WAAA,EACxC,EAAA4C,IAAA9E,KAAA,CAAUkB,SAAA,CAAUC,GAAV,CAAiBxB,CAAjB,CAAoByB,KAAA,CAAMzB,CAAN,CAApB,CAAV,CAGF,OAAO,KAAAgF,KAAA,CAAUP,CAAV,CAAaC,KAAb,CAfM,CAdsC,CAgCrD,OAAAK,QAAM,CAACN,CAAD,CAAIC,KAAJ,CAAW,CACf,IAAMW,OAASX,KAAAY,YAAA,EAAAC,KAAA,EAAf,CACMX,OAASH,CAAAG,OADf,CAEMnD,MAAQgD,CAAAhD,MAFd,CAGMyD,QAAU,IAAAjB,SAHhB,CAIMkB,KAAO,IAAAnB,MAJb,CAKMwB,KAAO,IAAAtD,MALb,CAMM1C,KAAOgG,IAAAhG,KAAA,EANb,CAOME,KAAO8F,IAAA9F,KAAA,EAPb,CAQMoB,IAAM0E,IAAA1E,IAAA,EARZ,CASM2E,IAAOJ,MAAAK,IAAPD,CAAoBJ,MAAAtF,IAT1B,CAUM4F,IAAMN,MAAAM,IAVZ,CAWMzE,EAAIO,KAAA9B,OAXV,CAYMiG,KAAO,EAZb,CAaSpE,KAbT,CAagBiB,GAbhB,CAa2BoD,MAG3BnG,KAAAI,IAAA,CAASN,IAAT,CAGIkF,MAAAgB,IAAA/F,OAAJ,GACEkG,MADF,CACW,IAAAvF,OAAA,CAAYmE,CAAZ,CAAeC,KAAf,CAAsBW,MAAtB,CADX,CAKIX,MAAA3E,IAAAJ,OAAJ,EACE6F,IAAAzF,IAAA,CAAS2E,KAAA3E,IAAT,CAIF,IAAI2E,KAAAiB,IAAAhG,OAAJ,CAAsB,CACpB,IAAAmG,OAAS,EACJ,KAAAC;AAAKrB,KAAAiB,IAAL,KAAgB3F,EAAE,CAAvB,KAA0BE,GAA1B,CAA4B6F,GAAApG,OAA5B,CAAyCK,CAAzC,CAA2CE,GAA3C,CAA8C,EAAEF,CAAhD,CACE8F,MAAA,CAAOC,GAAA,CAAK/F,CAAL,CAAAI,OAAP,CAAA,CAAyB,CAHP,CAQtB,IAAKJ,CAAL,CAAO,CAAP,CAAUA,CAAV,CAAYkB,CAAZ,CAAe,EAAElB,CAAjB,CAAoB,CAClB,IAAA8E,EAAIF,MAAA,CAAO5E,CAAP,CACJ,IAAI,CAACmF,IAAA,CAAKnF,CAAL,CAAL,EAAgByE,CAAAE,SAAA,CAAW,QAAX,CAAqB3E,CAArB,CAAhB,EAA2C0E,KAAAC,SAAA,CAAeG,CAAAF,OAAf,CAA3C,CACEnC,GAKA,CALMqC,CAAAM,MAKN,EAJMrF,GAIN,CAJY6F,IAAA,CAAKnD,GAAL,CAIZ,IAHEyC,OAAA,CAAQzC,GAAR,CACA,CADejB,KACf,CADuBe,WAAA,EACvB,CAAAqD,IAAA,CAAKnD,GAAL,CAAA,CAAY1C,GAAZ,CAAkByB,KAAAgB,OAAA,CAAasC,CAAb,CAAgBJ,KAAAsB,OAAhB,CAA8B,CAA9B,CAEpB,EAAAb,IAAA,CAAKnF,CAAL,CAAA,CAAUuB,SAAA,CAAUC,KAAV,CAAiBxB,CAAjB,CAAoByB,KAAA,CAAMzB,CAAN,CAApB,CAAA+B,MAAA,CAAoChC,GAApC,CAAyCP,IAAzC,CARM,CAefQ,CAAA,CAAE,CAAP,KAAUE,GAAV,CAAYsF,IAAAnG,KAAA,EAAAM,OAAZ,CAAgCK,CAAhC,CAAkCE,GAAlC,CAAqC,EAAEF,CAAvC,CACM6F,MAAA,CAAO7F,CAAP,CAAJ,GAEWN,IAAA,CAAKM,CAAL,CAAJ,GAAgBR,IAAA,CAAKQ,CAAL,CAAhB,CACLyF,GAAApF,KAAA,CAASL,CAAT,CADK,CAEI8F,MAAA,CAAO9F,CAAP,CAFJ,EAEiBR,IAAA,CAAKQ,CAAL,CAFjB,GAE6Bc,GAF7B,EAGL6E,GAAAtF,KAAA,CAASL,CAAT,CALF,CASFwF,KAAAS,KAAA,EAAa,CAAb,EAAkB/E,CAAlB,EAAuB,CACvB,OAAOmE,OAhEQ,CAhCoC,CAmGrD,KAAAL,QAAI,CAACP,CAAD,CAAIC,KAAJ,CAAW,CACb,IAAMW;AAASX,KAAAY,YAAA,EAAAC,KAAA,EAAf,CACMrE,EAAI,IAAA8C,MAAArE,OADV,CAEIsG,KAAO,CAEPvB,MAAAgB,IAAA/F,OAAJ,GACE,IAAAW,OAAA,CAAYmE,CAAZ,CAAeC,KAAf,CAAsBW,MAAtB,CACA,CAAAY,IAAA,GAAS,CAAT,EAAc/E,CAAd,EAAmB,CAFrB,CAKIuD,EAAAE,SAAA,CAAW,OAAX,CAAJ,EAA2B,CAACF,CAAAE,SAAA,CAAW,QAAX,CAA5B,GACEsB,IADF,EACU,IAAAC,OAAA,CAAYzB,CAAZ,CAAeC,KAAf,CAAsBW,MAAtB,CADV,CAIIX,MAAA3E,IAAAJ,OAAJ,GACE,IAAA6C,OAAA,CAAYiC,CAAZ,CAAeC,KAAf,CAAsBW,MAAtB,CACA,CAAAY,IAAA,GAAS,CAAT,EAAc/E,CAAd,EAAmB,CAFrB,CAKIwD,MAAAiB,IAAAhG,OAAJ,GACE,IAAAwG,OAAA,CAAYzB,KAAZ,CAAmBW,MAAnB,CACA,CAAAY,IAAA,GAAS,CAAT,EAAc/E,CAAd,EAAmB,CAFrB,CAKA,KAAAgB,MAAA+D,KAAA,CAAkBA,IAClB,OAAOZ,OAzBM,CAnGsC,CA+HrD,OAAA7C,QAAM,CAACiC,CAAD,CAAIC,KAAJ,CAAWW,MAAX,CAAmB,CACjBe,KAAAA,CAAS1B,KAAA3E,IAAf,KACMyF,KAAO,IAAAtD,MADb,CAEMiD,KAAO,IAAAnB,MAFb,CAGMkB,QAAU,IAAAjB,SACVW,EAAAA,CAASH,CAAAG,OAJf,KAKMgB,KAAO,EACPH,OAAAA,CAAMJ,MAAAtF,IANZ;IAOMG,EAAIsF,IAAA7E,KAAA,EAAJT,CAAkBkG,KAAAzG,OAPxB,CAQMuB,EAAIiE,IAAAxF,OARV,CASIkB,EAAI2E,IAAA7E,KAAA,EAGR6E,KAAAvE,OAAA,CAAYf,CAAZ,CAAegB,CAAf,CACAsE,KAAAzF,IAAA,CAASqG,KAAT,CAEA,KAAM5G,KAAOgG,IAAAhG,KAAA,EAAb,CACME,KAAO8F,IAAA9F,KAAA,EADb,CAEMoB,IAAO0E,IAAA1E,IAAA,EAGb,KAAKb,IAAL,CAAO,CAAP,CAAUA,IAAV,CAAYiB,CAAZ,CAAe,EAAEjB,IAAjB,CAAoB,CAClB,IAAAwC,IAAMmC,CAAA,CAAO3E,IAAP,CAAAmF,MACNrF,IAAA,CAAM6F,IAAA,CAAKnD,GAAL,CAAN,GAAoBmD,IAAA,CAAKnD,GAAL,CAApB,CAAgCyC,OAAA,CAAQzC,GAAR,CAAAD,OAAA,CAAoBoC,CAAA,CAAO3E,IAAP,CAApB,CAA+BmG,KAA/B,CAAuCvF,CAAvC,CAAhC,CACAsE,KAAA,CAAKlF,IAAL,CAAA8B,MAAA,CAAchC,GAAd,CAAmBP,IAAnB,CAHkB,CAOpB,IAAA,CAAOqB,CAAP,CAAWX,CAAX,CAAc,EAAEW,CAAhB,CACEnB,IAAA,CAAKmB,CAAL,CACA,CADUC,GACV,CAAItB,IAAA,CAAKqB,CAAL,CAAJ,GAAgBC,GAAhB,EAAqB2E,MAAApF,KAAA,CAASQ,CAAT,CA9BA,CA/H4B,CAiKrD,OAAAsF,QAAM,CAACzB,KAAD,CAAQW,MAAR,CAAgB,CACdI,MAAAA,CAAMJ,MAAAM,IAAZ,KACMH,KAAO,IAAAtD,MADb,CAEM1C,KAAOgG,IAAAhG,KAAA,EACPsB,KAAAA,CAAO0E,IAAA1E,IAAA,EACPsF,MAAAA,CAAS1B,KAAAiB,IALK,KAMbzF,CAEF,KAAAF,EAAE,CAAP,KAAUE,CAAV,CAAYkG,KAAAzG,OAAZ,CAA2BK,CAA3B,CAA6BE,CAA7B,CAAgC,EAAEF,CAAlC,CAAqC,CACnC,IAAAa;AAAIuF,KAAA,CAAOpG,CAAP,CAAAI,OACAZ,KAAA,CAAKqB,CAAL,CAAJ,GAAgBC,IAAhB,EAAqB2E,MAAApF,KAAA,CAASQ,CAAT,CAFc,CARjB,CAjK+B,CA+KrD,OAAAP,QAAM,CAACmE,CAAD,CAAIC,KAAJ,CAAWW,MAAX,CAAmB,CACjBH,CAAAA,CAAU,IAAAjB,SAAhB,KACMuB,KAAO,IAAAtD,MADb,CAEM1C,KAAOgG,IAAAhG,KAAA,EAFb,CAGME,KAAO8F,IAAA9F,KAAA,EACPoB,KAAAA,CAAO0E,IAAA1E,IAAA,EAJb,KAKMN,IAAM,EACNiF,OAAAA,CAAMJ,MAAAK,IANZ,KAOMU,OAAS1B,KAAAgB,IAPf,CAQOxF,CARP,CAQa4E,CAGR,KAAA9E,EAAE,CAAP,KAAUE,CAAV,CAAYkG,MAAAzG,OAAZ,CAA2BK,CAA3B,CAA6BE,CAA7B,CAAgC,EAAEF,CAAlC,CAAqC,CACnC,IAAAa,EAAIuF,MAAA,CAAOpG,CAAP,CAAAI,OACJI,IAAA,CAAIK,CAAJ,CAAA,CAAS,CACTnB,KAAA,CAAKmB,CAAL,CAAA,CAAWiE,CAAX,CAAetF,IAAA,CAAKqB,CAAL,CACfrB,KAAA,CAAKqB,CAAL,CAAA,CAAUC,IACNgE,EAAJ,GAAUhE,IAAV,EAAe2E,MAAApF,KAAA,CAASQ,CAAT,CALoB,CASrC,IAAKA,CAAL,GAAUqE,EAAV,CACEA,CAAA,CAAQrE,CAAR,CAAAP,OAAA,CAAkBJ,CAAlB,CAAqBM,GAArB,CAGF,KAAAE,QAAA,CAAagE,KAAb,CAAoBxE,CAApB,CAAuBM,GAAvB,CACA,OAAOA,IA1BgB,CA/K4B,CA6MrD,QAAAE,QAAO,CAACgE,KAAD,CAAQnE,GAAR,CAAaC,GAAb,CAAkB,CACvB,IAAM0E,QAAU,IAAAjB,SAAhB,CACMuB,KAAO,IAAAtD,MAEbwC,MAAA2B,SAAA,CAAe,QAAA,EAAM,CACnB,IAAMC;AAAWd,IAAAlF,OAAA,CAAYC,GAAZ,CAAiBC,GAAjB,CAAjB,CACWiC,GAAX,KAAWA,GAAX,GAAkByC,QAAlB,CAA2BA,OAAA,CAAQzC,GAAR,CAAA/B,QAAA,CAAqB4F,QAArB,CAFR,CAArB,CAJuB,CA7M4B,CAuNrD,OAAAJ,QAAM,CAACzB,CAAD,CAAIC,KAAJ,CAAWW,MAAX,CAAmB,CACvB,IAAMF,KAAO,IAAAnB,MAAb,CACMvC,MAAQgD,CAAAhD,MACR8E,MAAAA,CAAQ7B,KAAA6B,MAFd,KAGMrF,EAAIiE,IAAAxF,OAHV,CAIIsG,KAAO,CAJX,CAIiBO,CAIjB,KAAKA,CAAL,CADAnB,MAAAoB,QACA,CADiB,CACjB,CAAUD,CAAV,CAAYtF,CAAZ,CAAe,EAAEsF,CAAjB,CACE,GAAI/B,CAAAE,SAAA,CAAW,OAAX,CAAoB6B,CAApB,CAAJ,CAA4B,CAAE,IAAAxG,EAAIwG,CAAG,GAAEP,IAAX,CAG9B,GAAa,CAAb,GAAIA,IAAJ,CAEEA,IACA,CADOd,IAAA,CAAKnF,CAAL,CAAAe,IACP,CAAA,IAAA2F,aAAA,CAAkBvB,IAAA,CAAKnF,CAAL,CAAlB,CAA2ByB,KAAA,CAAMzB,CAAN,CAA3B,CAAqCqF,MAAAtF,IAArC,CAAiDsF,MAAAK,IAAjD,CAHF,KAME,KAAUO,IAAV,CAAKO,CAAL,CAAO,CAAP,CAAkBA,CAAlB,CAAoBtF,CAApB,CAAuB,EAAEsF,CAAzB,CACO/B,CAAAE,SAAA,CAAW,OAAX,CAAoB6B,CAApB,CAAL,GACAP,IAEA,EAFQd,IAAA,CAAKqB,CAAL,CAAAzF,IAER,CADA,IAAA4F,aAAA,CAAkBxB,IAAA,CAAKqB,CAAL,CAAlB,CAA2B/E,KAAA,CAAM+E,CAAN,CAA3B,CAAqCD,KAArC,CAA4ClB,MAAAtF,IAA5C,CACA,CAAAsF,MAAAK,IAAA,CAAaL,MAAAtF,IAHb,CAOJ,OAAOkG,KA3BgB,CAvN4B;AAqPrD,aAAAU,QAAY,CAAC1E,GAAD,CAAMR,KAAN,CAAa8E,KAAb,CAAoBd,GAApB,CAAyB,CACnC,IAAMD,KAAO,IAAAtD,MAAb,CACM5C,KAAOkG,IAAAlG,KAAA,EADb,CAEME,KAAOgG,IAAAhG,KAAA,EACPE,KAAAA,CAAO8F,IAAA9F,KAAA,EAHb,KAIM8B,MAAQS,GAAAT,MAAA,EAJd,CAKMoF,IAAM3E,GAAAH,OAAA,CAAWG,GAAAL,MAAX,CALZ,CAMMA,MAAQK,GAAAH,OAAA,CAAWL,KAAX,CANd,CAOMoF,IAAMjF,KAAA,CAAM,CAAN,CACNkF,MAAAA,CAAMlF,KAAA,CAAM,CAAN,CARZ,KASMmF,IAAMH,GAAA,CAAI,CAAJ,CACNI,IAAAA,CAAMJ,GAAA,CAAI,CAAJ,CAVZ,KAWM7F,IAAMkB,GAAAlB,IAXZ,CAYOd,CAGP,IAAI4G,GAAJ,CAAUE,GAAV,CAAe,CACR,IAAA/G,EAAI6G,GAAT,KAAc5G,CAAd,CAAkBkB,IAAA8F,IAAA,CAASF,GAAT,CAAcD,KAAd,CAAlB,CAAsC9G,CAAtC,CAA0CC,CAA1C,CAA6C,EAAED,CAA/C,CAAkD,CAChD,IAAAa,EAAIW,KAAA,CAAMxB,CAAN,CACAV,KAAA,CAAKuB,CAAL,CAAJ,GAAgB0F,KAAhB,GACE7G,IAAA,CAAKmB,CAAL,CAEA,CAFUrB,IAAA,CAAKqB,CAAL,CAEV,CADAvB,IAAA,CAAKuB,CAAL,CACA,CADU0F,KACV,CAAAd,GAAApF,KAAA,CAASQ,CAAT,CAHF,CAKArB,KAAA,CAAKqB,CAAL,CAAA,EAAWE,GAPqC,CADrC,CAAf,IAUO,IAAI8F,GAAJ,CAAUE,GAAV,CACL,IAAK/G,CAAS,CAAL+G,GAAK,CAAA9G,CAAA,CAAIkB,IAAA8F,IAAA,CAASJ,GAAT,CAAcG,GAAd,CAAlB,CAAsChH,CAAtC,CAA0CC,CAA1C,CAA6C,EAAED,CAA/C,CACEa,CAMA,CANIW,KAAA,CAAMxB,CAAN,CAMJ,CALIV,IAAA,CAAKuB,CAAL,CAKJ,GALgB0F,KAKhB,GAJE7G,IAAA,CAAKmB,CAAL,CAEA,CAFUrB,IAAA,CAAKqB,CAAL,CAEV;AADAvB,IAAA,CAAKuB,CAAL,CACA,CADU0F,KACV,CAAAd,GAAApF,KAAA,CAASQ,CAAT,CAEF,EAAArB,IAAA,CAAKqB,CAAL,CAAA,EAAWE,GAKf,IAAI+F,KAAJ,CAAUE,GAAV,CACE,IAAKhH,CAAwB,CAApBmB,IAAAC,IAAA,CAASyF,GAAT,CAAcG,GAAd,CAAoB,CAAA/G,CAAA,CAAI6G,KAAjC,CAAsC9G,CAAtC,CAA0CC,CAA1C,CAA6C,EAAED,CAA/C,CACEa,CAMA,CANIW,KAAA,CAAMxB,CAAN,CAMJ,CALIV,IAAA,CAAKuB,CAAL,CAKJ,GALgB0F,KAKhB,GAJE7G,IAAA,CAAKmB,CAAL,CAEA,CAFUrB,IAAA,CAAKqB,CAAL,CAEV,CADAvB,IAAA,CAAKuB,CAAL,CACA,CADU0F,KACV,CAAAd,GAAApF,KAAA,CAASQ,CAAT,CAEF,EAAArB,IAAA,CAAKqB,CAAL,CAAA,EAAWE,GARf,KAUO,IAAI+F,KAAJ,CAAUE,GAAV,CACL,IAAKhH,CAAwB,CAApBmB,IAAAC,IAAA,CAAS2F,GAAT,CAAcD,KAAd,CAAoB,CAAA7G,CAAA,CAAI+G,GAAjC,CAAsChH,CAAtC,CAA0CC,CAA1C,CAA6C,EAAED,CAA/C,CACEa,CAMA,CANIW,KAAA,CAAMxB,CAAN,CAMJ,CALIV,IAAA,CAAKuB,CAAL,CAKJ,GALgB0F,KAKhB,GAJE7G,IAAA,CAAKmB,CAAL,CAEA,CAFUrB,IAAA,CAAKqB,CAAL,CAEV,CADAvB,IAAA,CAAKuB,CAAL,CACA,CADU0F,KACV,CAAAd,GAAApF,KAAA,CAASQ,CAAT,CAEF,EAAArB,IAAA,CAAKqB,CAAL,CAAA,EAAWE,GAIfkB,IAAAL,MAAA,CAAYH,KAAAI,MAAA,EA7DuB,CArPgB,CAqTrD,aAAA6E,QAAY,CAACzE,GAAD,CAAMR,KAAN,CAAa1B,GAAb,CAAkB2F,GAAlB,CAAuB,CACjC,IACMlG,KADO,IAAA0C,MACA1C,KAAA,EADb,CAEMgC,MAAQS,GAAAT,MAAA,EAFd,CAGMoF,IAAM3E,GAAAH,OAAA,CAAWG,GAAAL,MAAX,CAHZ,CAIMA,MAAQK,GAAAH,OAAA,CAAWL,KAAX,CAJd,CAKMoF,IAAMjF,KAAA,CAAM,CAAN,CACNkF,MAAAA;AAAMlF,KAAA,CAAM,CAAN,CANZ,KAOMmF,IAAMH,GAAA,CAAI,CAAJ,CACNI,IAAAA,CAAMJ,GAAA,CAAI,CAAJ,CARZ,KASM7F,IAAMkB,GAAAlB,IATZ,CAUOd,CAGP,IAAI4G,GAAJ,CAAUE,GAAV,CAAe,CACR,IAAA/G,EAAI6G,GAAT,KAAc5G,CAAd,CAAkBkB,IAAA8F,IAAA,CAASF,GAAT,CAAcD,KAAd,CAAlB,CAAsC9G,CAAtC,CAA0CC,CAA1C,CAA6C,EAAED,CAA/C,CAAkD,CAChD,IAAAa,EAAIW,KAAA,CAAMxB,CAAN,CACJR,KAAA,CAAKqB,CAAL,CAAA,EAAWE,GACXhB,IAAAM,KAAA,CAASQ,CAAT,CAHgD,CADrC,CAAf,IAMO,IAAIgG,GAAJ,CAAUE,GAAV,CACL,IAAK/G,CAAS,CAAL+G,GAAK,CAAA9G,CAAA,CAAIkB,IAAA8F,IAAA,CAASJ,GAAT,CAAcG,GAAd,CAAlB,CAAsChH,CAAtC,CAA0CC,CAA1C,CAA6C,EAAED,CAA/C,CACEa,CAEA,CAFIW,KAAA,CAAMxB,CAAN,CAEJ,CADAR,IAAA,CAAKqB,CAAL,CACA,EADWE,GACX,CAAA2E,GAAArF,KAAA,CAASQ,CAAT,CAKJ,IAAIiG,KAAJ,CAAUE,GAAV,CACE,IAAKhH,CAAwB,CAApBmB,IAAAC,IAAA,CAASyF,GAAT,CAAcG,GAAd,CAAoB,CAAA/G,CAAA,CAAI6G,KAAjC,CAAsC9G,CAAtC,CAA0CC,CAA1C,CAA6C,EAAED,CAA/C,CACEa,CAEA,CAFIW,KAAA,CAAMxB,CAAN,CAEJ,CADAR,IAAA,CAAKqB,CAAL,CACA,EADWE,GACX,CAAAhB,GAAAM,KAAA,CAASQ,CAAT,CAJJ,KAMO,IAAIiG,KAAJ,CAAUE,GAAV,CACL,IAAKhH,CAAwB,CAApBmB,IAAAC,IAAA,CAAS2F,GAAT,CAAcD,KAAd,CAAoB,CAAA7G,CAAA,CAAI+G,GAAjC,CAAsChH,CAAtC,CAA0CC,CAA1C,CAA6C,EAAED,CAA/C,CACEa,CAEA,CAFIW,KAAA,CAAMxB,CAAN,CAEJ,CADAR,IAAA,CAAKqB,CAAL,CACA,EADWE,GACX,CAAA2E,GAAArF,KAAA,CAASQ,CAAT,CAIJoB,IAAAL,MAAA,CAAYH,KAAAI,MAAA,EA3CqB,CArTkB,CAAvD,CAiXAqC,cAAAI,WAAA,CAA2B,CACzB,KAAQ,eADiB,CAEzB,SAAY,EAFa;AAGzB,OAAU,CACR,CAAE,KAAQ,QAAV,CAAoB,KAAQ,QAA5B,CAAsC,SAAY,CAAA,CAAlD,CACE,YAAe,gDADjB,CADQ,CAGR,CAAE,KAAQ,QAAV,CAAoB,KAAQ,QAA5B,CAAsC,SAAY,CAAA,CAAlD,CACE,YAAe,wDADjB,CAHQ,CAHe,CAW3BpF,SAAAqF,SAAA,CAAkBL,aAAlB,CAAiCjF,YAAA8E,UAAjC,CAAyD,CACvD,UAAAS,QAAS,CAACC,CAAD,CAAIC,KAAJ,CAAW,CAClB,IAAMwC,OAAS,EAAEzC,CAAAyC,OAAF,EAAc,CAAd,CACTC,EAAAA,CAAS1C,CAAA2C,OADf,KAEMnB,KAAOkB,CAAAlB,KAGb,IAAwB,CAAxB,IAAKA,IAAL,CAAYiB,MAAZ,EAA2B,MAAOxC,MAAA2C,gBAE5BhC,MAAAA,CAASX,KAAAa,KAAA,CAAWb,KAAA4C,IAAX,CAAf,KACMjI,KAAO8H,CAAA9H,KAAA,EADb,CAEMG,KAAO2H,CAAA3H,KAAA,EAFb,CAGME,KAAOyH,CAAAzH,KAAA,EAHb,CAIM6H,KAAOA,QAAA,CAAA1G,CAAA,CAAK,CAAA,MAAErB,KAAA,CAAKqB,CAAL,CAAF;AAAYqG,MAAZ,CAAgC,IAAhC,CAAsB7H,IAAA,CAAKwB,CAAL,CAAtB,CAGlBwE,MAAA+B,OAAA,CAAc/B,KAAAmC,IAAd,CAA0BD,IAA1B,CAMMtB,KAAN,CAAcA,IAAd,CAAmB,CAAnB,EAMEZ,KAAA+B,OAAA,CAAc/B,KAAAoC,IAAd,CAA0B,QAAA,CAAA5G,CAAA,CAAK,CAC7B,IAAM6G,EAAIlI,IAAA,CAAKqB,CAAL,CAAJ6G,CAAcR,MAEpB,OADU,CAACQ,CACJ,EADUA,CACV,CADehI,IAAA,CAAKmB,CAAL,CACf,CADyBqG,MACzB,CAAI7H,IAAA,CAAKwB,CAAL,CAAJ,CAAc,IAHQ,CAA/B,CAKA,CAAAwE,KAAA+B,OAAA,CAAc/B,KAAAsC,IAAd,CAA0B,QAAA,CAAA9G,CAAA,CAAK,CAC7B,IAAM6G,EAAIlI,IAAA,CAAKqB,CAAL,CAAJ6G,CAAcR,MAEpB,OADUQ,CAAAA,CACH,EADUA,CACV,CADeA,CACf,CADoBhI,IAAA,CAAKmB,CAAL,CACpB,CAD8BqG,MAC9B,CAAc,IAAd,CAAI7H,IAAA,CAAKwB,CAAL,CAHkB,CAA/B,CAXF,GACEwE,KAAA+B,OAAA,CAAc/B,KAAAoC,IAAd,CAA0BF,IAA1B,CACA,CAAAlC,KAAA+B,OAAA,CAAc/B,KAAAsC,IAAd,CAA0B,QAAA,CAAA9G,CAAA,CACxB,CAAA,MAAA,CAACrB,IAAA,CAAKqB,CAAL,CAAD,CAAWqG,MAAX,IAAuBjB,IAAvB,CAA8B5G,IAAA,CAAKwB,CAAL,CAA9B,CAAwC,IAAxC,CADF,CAFF,CAmBA,OAAOwE,MAAA+B,OAAA,CAAc/B,KAAAuC,OAAd,CAA6B,QAAA,CAAAzH,CAAA,CAAK,CAAA,MAAAoH,KAAA,CAAKpH,CAAAC,OAAL,CAAA,CAAlC,CAxCW,CADmC,CAAzD,CA6CA7B,QAAAsJ,YAAA,CAAsBhE,WACtBtF,QAAAuJ,cAAA,CAAwB5D,aAExB6D;MAAAC,eAAA,CAAsBzJ,OAAtB,CAA+B,YAA/B,CAA6C,CAAE2D,MAAO,CAAA,CAAT,CAA7C,CAlsB2D,CAJ5D,CADuH;",
"sources":["node_modules/vega-crossfilter/build/vega-crossfilter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_crossfilter$build$vega_crossfilter\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array'), require('vega-dataflow'), require('vega-util')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'd3-array', 'vega-dataflow', 'vega-util'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.vega = global.vega || {}, global.vega.transforms = {}), global.d3, global.vega, global.vega));\n}(this, (function (exports, d3Array, vegaDataflow, vegaUtil) { 'use strict';\n\n  const array8 = n => new Uint8Array(n);\n\n  const array16 = n => new Uint16Array(n);\n\n  const array32 = n => new Uint32Array(n);\n\n  /**\n   * Maintains CrossFilter state.\n   */\n  function Bitmaps() {\n\n    let width = 8,\n        data = [],\n        seen = array32(0),\n        curr = array(0, width),\n        prev = array(0, width);\n\n    return {\n      data: () => data,\n\n      seen: () => (seen = lengthen(seen, data.length)),\n\n      add(array) {\n        for (let i=0, j=data.length, n=array.length, t; i<n; ++i) {\n          t = array[i];\n          t._index = j++;\n          data.push(t);\n        }\n      },\n\n      remove(num, map) { // map: index -> boolean (true => remove)\n        const n = data.length,\n              copy = Array(n - num),\n              reindex = data; // reuse old data array for index map\n        let t, i, j;\n\n        // seek forward to first removal\n        for (i=0; !map[i] && i<n; ++i) {\n          copy[i] = data[i];\n          reindex[i] = i;\n        }\n\n        // condense arrays\n        for (j=i; i<n; ++i) {\n          t = data[i];\n          if (!map[i]) {\n            reindex[i] = j;\n            curr[j] = curr[i];\n            prev[j] = prev[i];\n            copy[j] = t;\n            t._index = j++;\n          } else {\n            reindex[i] = -1;\n          }\n          curr[i] = 0; // clear unused bits\n        }\n\n        data = copy;\n        return reindex;\n      },\n\n      size: () => data.length,\n\n      curr: () => curr,\n\n      prev: () => prev,\n\n      reset: k => prev[k] = curr[k],\n\n      all: () =>\n        width < 0x101 ? 0xff : width < 0x10001 ? 0xffff : 0xffffffff,\n\n      set(k, one) { curr[k] |= one; },\n\n      clear(k, one) { curr[k] &= ~one; },\n\n      resize(n, m) {\n        const k = curr.length;\n        if (n > k || m > width) {\n          width = Math.max(m, width);\n          curr = array(n, width, curr);\n          prev = array(n, width);\n        }\n      }\n    };\n  }\n\n  function lengthen(array, length, copy) {\n    if (array.length >= length) return array;\n    copy = copy || new array.constructor(length);\n    copy.set(array);\n    return copy;\n  }\n\n  function array(n, m, array) {\n    const copy = (m < 0x101 ? array8\n        : m < 0x10001 ? array16\n        : array32)(n);\n    if (array) copy.set(array);\n    return copy;\n  }\n\n  function Dimension(index, i, query) {\n    const bit = (1 << i);\n\n    return {\n      one:     bit,\n      zero:    ~bit,\n      range:   query.slice(),\n      bisect:  index.bisect,\n      index:   index.index,\n      size:    index.size,\n\n      onAdd(added, curr) {\n        const dim = this,\n              range = dim.bisect(dim.range, added.value),\n              idx = added.index,\n              lo = range[0],\n              hi = range[1],\n              n1 = idx.length;\n        let i;\n\n        for (i=0;  i<lo; ++i) curr[idx[i]] |= bit;\n        for (i=hi; i<n1; ++i) curr[idx[i]] |= bit;\n        return dim;\n      }\n    };\n  }\n\n  /**\n   * Maintains a list of values, sorted by key.\n   */\n  function SortedIndex() {\n    let index = array32(0),\n        value = [],\n        size = 0;\n\n    function insert(key, data, base) {\n      if (!data.length) return [];\n\n      const n0 = size,\n          n1 = data.length,\n          addi = array32(n1);\n      let addv = Array(n1),\n          oldv, oldi, i;\n\n      for (i=0; i<n1; ++i) {\n        addv[i] = key(data[i]);\n        addi[i] = i;\n      }\n      addv = sort(addv, addi);\n\n      if (n0) {\n        oldv = value;\n        oldi = index;\n        value = Array(n0 + n1);\n        index = array32(n0 + n1);\n        merge(base, oldv, oldi, n0, addv, addi, n1, value, index);\n      } else {\n        if (base > 0) for (i=0; i<n1; ++i) {\n          addi[i] += base;\n        }\n        value = addv;\n        index = addi;\n      }\n      size = n0 + n1;\n\n      return {index: addi, value: addv};\n    }\n\n    function remove(num, map) {\n      // map: index -> remove\n      const n = size;\n      let idx, i, j;\n\n      // seek forward to first removal\n      for (i=0; !map[index[i]] && i<n; ++i);\n\n      // condense index and value arrays\n      for (j=i; i<n; ++i) {\n        if (!map[idx=index[i]]) {\n          index[j] = idx;\n          value[j] = value[i];\n          ++j;\n        }\n      }\n\n      size = n - num;\n    }\n\n    function reindex(map) {\n      for (let i=0, n=size; i<n; ++i) {\n        index[i] = map[index[i]];\n      }\n    }\n\n    function bisect(range, array) {\n      let n;\n      if (array) {\n        n = array.length;\n      } else {\n        array = value;\n        n = size;\n      }\n      return [\n        d3Array.bisectLeft(array, range[0], 0, n),\n        d3Array.bisectRight(array, range[1], 0, n)\n      ];\n    }\n\n    return {\n      insert:  insert,\n      remove:  remove,\n      bisect:  bisect,\n      reindex: reindex,\n      index:   () => index,\n      size:    () => size\n    };\n  }\n\n  function sort(values, index) {\n    values.sort.call(index, (a, b) => {\n      const x = values[a],\n            y = values[b];\n      return x < y ? -1 : x > y ? 1 : 0;\n    });\n    return d3Array.permute(values, index);\n  }\n\n  function merge(base, value0, index0, n0, value1, index1, n1, value, index) {\n    let i0 = 0, i1 = 0, i;\n\n    for (i=0; i0 < n0 && i1 < n1; ++i) {\n      if (value0[i0] < value1[i1]) {\n        value[i] = value0[i0];\n        index[i] = index0[i0++];\n      } else {\n        value[i] = value1[i1];\n        index[i] = index1[i1++] + base;\n      }\n    }\n\n    for (; i0 < n0; ++i0, ++i) {\n      value[i] = value0[i0];\n      index[i] = index0[i0];\n    }\n\n    for (; i1 < n1; ++i1, ++i) {\n      value[i] = value1[i1];\n      index[i] = index1[i1] + base;\n    }\n  }\n\n  /**\n   * An indexed multi-dimensional filter.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} params.fields - An array of dimension accessors to filter.\n   * @param {Array} params.query - An array of per-dimension range queries.\n   */\n  function CrossFilter(params) {\n    vegaDataflow.Transform.call(this, Bitmaps(), params);\n    this._indices = null;\n    this._dims = null;\n  }\n\n  CrossFilter.Definition = {\n    'type': 'CrossFilter',\n    'metadata': {},\n    'params': [\n      { 'name': 'fields', 'type': 'field', 'array': true, 'required': true },\n      { 'name': 'query', 'type': 'array', 'array': true, 'required': true,\n        'content': {'type': 'number', 'array': true, 'length': 2} }\n    ]\n  };\n\n  vegaUtil.inherits(CrossFilter, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (!this._dims) {\n        return this.init(_, pulse);\n      } else {\n        var init = _.modified('fields')\n              || _.fields.some(f => pulse.modified(f.fields));\n\n        return init\n          ? this.reinit(_, pulse)\n          : this.eval(_, pulse);\n      }\n    },\n\n    init(_, pulse) {\n      const fields = _.fields,\n            query = _.query,\n            indices = this._indices = {},\n            dims = this._dims = [],\n            m = query.length;\n      let i = 0, key, index;\n\n      // instantiate indices and dimensions\n      for (; i<m; ++i) {\n        key = fields[i].fname;\n        index = indices[key] || (indices[key] = SortedIndex());\n        dims.push(Dimension(index, i, query[i]));\n      }\n\n      return this.eval(_, pulse);\n    },\n\n    reinit(_, pulse) {\n      const output = pulse.materialize().fork(),\n            fields = _.fields,\n            query = _.query,\n            indices = this._indices,\n            dims = this._dims,\n            bits = this.value,\n            curr = bits.curr(),\n            prev = bits.prev(),\n            all = bits.all(),\n            out = (output.rem = output.add),\n            mod = output.mod,\n            m = query.length,\n            adds = {};\n      let add, index, key, mods, remMap, modMap, i, n, f;\n\n      // set prev to current state\n      prev.set(curr);\n\n      // if pulse has remove tuples, process them first\n      if (pulse.rem.length) {\n        remMap = this.remove(_, pulse, output);\n      }\n\n      // if pulse has added tuples, add them to state\n      if (pulse.add.length) {\n        bits.add(pulse.add);\n      }\n\n      // if pulse has modified tuples, create an index map\n      if (pulse.mod.length) {\n        modMap = {};\n        for (mods=pulse.mod, i=0, n=mods.length; i<n; ++i) {\n          modMap[mods[i]._index] = 1;\n        }\n      }\n\n      // re-initialize indices as needed, update curr bitmap\n      for (i=0; i<m; ++i) {\n        f = fields[i];\n        if (!dims[i] || _.modified('fields', i) || pulse.modified(f.fields)) {\n          key = f.fname;\n          if (!(add = adds[key])) {\n            indices[key] = index = SortedIndex();\n            adds[key] = add = index.insert(f, pulse.source, 0);\n          }\n          dims[i] = Dimension(index, i, query[i]).onAdd(add, curr);\n        }\n      }\n\n      // visit each tuple\n      // if filter state changed, push index to add/rem\n      // else if in mod and passes a filter, push index to mod\n      for (i=0, n=bits.data().length; i<n; ++i) {\n        if (remMap[i]) { // skip if removed tuple\n          continue;\n        } else if (prev[i] !== curr[i]) { // add if state changed\n          out.push(i);\n        } else if (modMap[i] && curr[i] !== all) { // otherwise, pass mods through\n          mod.push(i);\n        }\n      }\n\n      bits.mask = (1 << m) - 1;\n      return output;\n    },\n\n    eval(_, pulse) {\n      const output = pulse.materialize().fork(),\n            m = this._dims.length;\n      let mask = 0;\n\n      if (pulse.rem.length) {\n        this.remove(_, pulse, output);\n        mask |= (1 << m) - 1;\n      }\n\n      if (_.modified('query') && !_.modified('fields')) {\n        mask |= this.update(_, pulse, output);\n      }\n\n      if (pulse.add.length) {\n        this.insert(_, pulse, output);\n        mask |= (1 << m) - 1;\n      }\n\n      if (pulse.mod.length) {\n        this.modify(pulse, output);\n        mask |= (1 << m) - 1;\n      }\n\n      this.value.mask = mask;\n      return output;\n    },\n\n    insert(_, pulse, output) {\n      const tuples = pulse.add,\n            bits = this.value,\n            dims = this._dims,\n            indices = this._indices,\n            fields = _.fields,\n            adds = {},\n            out = output.add,\n            n = bits.size() + tuples.length,\n            m = dims.length;\n      let k = bits.size(), j, key, add;\n\n      // resize bitmaps and add tuples as needed\n      bits.resize(n, m);\n      bits.add(tuples);\n\n      const curr = bits.curr(),\n            prev = bits.prev(),\n            all  = bits.all();\n\n      // add to dimensional indices\n      for (j=0; j<m; ++j) {\n        key = fields[j].fname;\n        add = adds[key] || (adds[key] = indices[key].insert(fields[j], tuples, k));\n        dims[j].onAdd(add, curr);\n      }\n\n      // set previous filters, output if passes at least one filter\n      for (; k < n; ++k) {\n        prev[k] = all;\n        if (curr[k] !== all) out.push(k);\n      }\n    },\n\n    modify(pulse, output) {\n      const out = output.mod,\n            bits = this.value,\n            curr = bits.curr(),\n            all  = bits.all(),\n            tuples = pulse.mod;\n      let i, n, k;\n\n      for (i=0, n=tuples.length; i<n; ++i) {\n        k = tuples[i]._index;\n        if (curr[k] !== all) out.push(k);\n      }\n    },\n\n    remove(_, pulse, output) {\n      const indices = this._indices,\n            bits = this.value,\n            curr = bits.curr(),\n            prev = bits.prev(),\n            all  = bits.all(),\n            map = {},\n            out = output.rem,\n            tuples = pulse.rem;\n      let i, n, k, f;\n\n      // process tuples, output if passes at least one filter\n      for (i=0, n=tuples.length; i<n; ++i) {\n        k = tuples[i]._index;\n        map[k] = 1; // build index map\n        prev[k] = (f = curr[k]);\n        curr[k] = all;\n        if (f !== all) out.push(k);\n      }\n\n      // remove from dimensional indices\n      for (k in indices) {\n        indices[k].remove(n, map);\n      }\n\n      this.reindex(pulse, n, map);\n      return map;\n    },\n\n    // reindex filters and indices after propagation completes\n    reindex(pulse, num, map) {\n      const indices = this._indices,\n            bits = this.value;\n\n      pulse.runAfter(() => {\n        const indexMap = bits.remove(num, map);\n        for (const key in indices) indices[key].reindex(indexMap);\n      });\n    },\n\n    update(_, pulse, output) {\n      const dims = this._dims,\n            query = _.query,\n            stamp = pulse.stamp,\n            m = dims.length;\n      let mask = 0, i, q;\n\n      // survey how many queries have changed\n      output.filters = 0;\n      for (q=0; q<m; ++q) {\n        if (_.modified('query', q)) { i = q; ++mask; }\n      }\n\n      if (mask === 1) {\n        // only one query changed, use more efficient update\n        mask = dims[i].one;\n        this.incrementOne(dims[i], query[i], output.add, output.rem);\n      } else {\n        // multiple queries changed, perform full record keeping\n        for (q=0, mask=0; q<m; ++q) {\n          if (!_.modified('query', q)) continue;\n          mask |= dims[q].one;\n          this.incrementAll(dims[q], query[q], stamp, output.add);\n          output.rem = output.add; // duplicate add/rem for downstream resolve\n        }\n      }\n\n      return mask;\n    },\n\n    incrementAll(dim, query, stamp, out) {\n      const bits = this.value,\n            seen = bits.seen(),\n            curr = bits.curr(),\n            prev = bits.prev(),\n            index = dim.index(),\n            old = dim.bisect(dim.range),\n            range = dim.bisect(query),\n            lo1 = range[0],\n            hi1 = range[1],\n            lo0 = old[0],\n            hi0 = old[1],\n            one = dim.one;\n      let i, j, k;\n\n      // Fast incremental update based on previous lo index.\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          k = index[i];\n          if (seen[k] !== stamp) {\n            prev[k] = curr[k];\n            seen[k] = stamp;\n            out.push(k);\n          }\n          curr[k] ^= one;\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          k = index[i];\n          if (seen[k] !== stamp) {\n            prev[k] = curr[k];\n            seen[k] = stamp;\n            out.push(k);\n          }\n          curr[k] ^= one;\n        }\n      }\n\n      // Fast incremental update based on previous hi index.\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          k = index[i];\n          if (seen[k] !== stamp) {\n            prev[k] = curr[k];\n            seen[k] = stamp;\n            out.push(k);\n          }\n          curr[k] ^= one;\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          k = index[i];\n          if (seen[k] !== stamp) {\n            prev[k] = curr[k];\n            seen[k] = stamp;\n            out.push(k);\n          }\n          curr[k] ^= one;\n        }\n      }\n\n      dim.range = query.slice();\n    },\n\n    incrementOne(dim, query, add, rem) {\n      const bits = this.value,\n            curr = bits.curr(),\n            index = dim.index(),\n            old = dim.bisect(dim.range),\n            range = dim.bisect(query),\n            lo1 = range[0],\n            hi1 = range[1],\n            lo0 = old[0],\n            hi0 = old[1],\n            one = dim.one;\n      let i, j, k;\n\n      // Fast incremental update based on previous lo index.\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          k = index[i];\n          curr[k] ^= one;\n          add.push(k);\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          k = index[i];\n          curr[k] ^= one;\n          rem.push(k);\n        }\n      }\n\n      // Fast incremental update based on previous hi index.\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          k = index[i];\n          curr[k] ^= one;\n          add.push(k);\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          k = index[i];\n          curr[k] ^= one;\n          rem.push(k);\n        }\n      }\n\n      dim.range = query.slice();\n    }\n  });\n\n  /**\n   * Selectively filters tuples by resolving against a filter bitmap.\n   * Useful for processing the output of a cross-filter transform.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {object} params.ignore - A bit mask indicating which filters to ignore.\n   * @param {object} params.filter - The per-tuple filter bitmaps. Typically this\n   *   parameter value is a reference to a {@link CrossFilter} transform.\n   */\n  function ResolveFilter(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  ResolveFilter.Definition = {\n    'type': 'ResolveFilter',\n    'metadata': {},\n    'params': [\n      { 'name': 'ignore', 'type': 'number', 'required': true,\n        'description': 'A bit mask indicating which filters to ignore.' },\n      { 'name': 'filter', 'type': 'object', 'required': true,\n        'description': 'Per-tuple filter bitmaps from a CrossFilter transform.' }\n    ]\n  };\n\n  vegaUtil.inherits(ResolveFilter, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const ignore = ~(_.ignore || 0), // bit mask where zeros -> dims to ignore\n            bitmap = _.filter,\n            mask = bitmap.mask;\n\n      // exit early if no relevant filter changes\n      if ((mask & ignore) === 0) return pulse.StopPropagation;\n\n      const output = pulse.fork(pulse.ALL),\n            data = bitmap.data(),\n            curr = bitmap.curr(),\n            prev = bitmap.prev(),\n            pass = k => !(curr[k] & ignore) ? data[k] : null;\n\n      // propagate all mod tuples that pass the filter\n      output.filter(output.MOD, pass);\n\n      // determine add & rem tuples via filter functions\n      // for efficiency, we do *not* populate new arrays,\n      // instead we add filter functions applied downstream\n\n      if (!(mask & (mask-1))) { // only one filter changed\n        output.filter(output.ADD, pass);\n        output.filter(output.REM, k =>\n          (curr[k] & ignore) === mask ? data[k] : null);\n\n      } else { // multiple filters changed\n        output.filter(output.ADD, k => {\n          const c = curr[k] & ignore,\n                f = !c && (c ^ (prev[k] & ignore));\n          return f ? data[k] : null;\n        });\n        output.filter(output.REM, k => {\n          const c = curr[k] & ignore,\n                f = c && !(c ^ (c ^ (prev[k] & ignore)));\n          return f ? data[k] : null;\n        });\n      }\n\n      // add filter to source data in case of reflow...\n      return output.filter(output.SOURCE, t => pass(t._index));\n    }\n  });\n\n  exports.crossfilter = CrossFilter;\n  exports.resolvefilter = ResolveFilter;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","globalThis","self","vega","transforms","d3","d3Array","vegaDataflow","vegaUtil","Bitmaps","width","data","seen","array32","curr","array","prev","length","copy","constructor","set","add","i","j","n","t","_index","push","remove","num","map","Array","reindex","size","reset","k","all","one","clear","resize","m","Math","max","array8","array16","Dimension","index","query","bit","zero","range","slice","bisect","onAdd","added","dim","value","idx","lo","hi","n1","SortedIndex","insert","key","base","n0","addi","addv","sort","oldv","oldi","i0","i1","value1","bisectLeft","bisectRight","values","call","a","b","x","y","permute","CrossFilter","params","Transform","_dims","_indices","ResolveFilter","Uint8Array","Uint16Array","Uint32Array","Definition","inherits","transform","_","pulse","modified","fields","some","f","reinit","eval","init","indices","dims","fname","output","materialize","fork","bits","out","rem","mod","adds","remMap","modMap","mods","source","mask","update","modify","tuples","runAfter","indexMap","stamp","q","filters","incrementOne","incrementAll","old","lo1","hi1","lo0","hi0","min","ignore","bitmap","filter","StopPropagation","ALL","pass","MOD","ADD","c","REM","SOURCE","crossfilter","resolvefilter","Object","defineProperty"]
}
