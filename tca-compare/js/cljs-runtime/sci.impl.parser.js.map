{"version":3,"sources":["sci/impl/parser.cljc"],"mappings":"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","names":["sci.impl.parser/opts","edamame.impl.parser/normalize-opts","sci.impl.parser/fully-qualify","ctx","sym","cljs.core/deref","env","sym-ns","temp__5735__auto__","n","cljs.core/namespace","cljs.core.symbol","sym-name-str","cljs.core/name","current-ns","sci.impl.vars/current-ns-name","current-ns-str","namespaces","cljs.core.get","the-current-ns","aliases","ret","cljs.core/not","or__4126__auto__","cljs.core/contains?","sci.impl.analyzer/macros","sci.impl.interop/fully-qualify-class","v","m","cljs.core/meta","var-name","ns","sci.impl.vars/getName","cljs.core.get_in","temp__5733__auto__","var_args","G__107398","sci.impl.parser/parse-next","js/Error","r","edamame.impl.parser/parse-next","features","readers","sci.impl.vars/var?","env-val","auto-resolve","cljs.core.assoc","parse-opts","p1__107394#"],"sourcesContent":["(ns sci.impl.parser\n  {:no-doc true}\n  (:refer-clojure :exclude [read-string])\n  (:require\n   [edamame.impl.parser :as parser]\n   [sci.impl.analyzer :as ana]\n   [sci.impl.interop :as interop]\n   [sci.impl.vars :as vars]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(def opts\n  (parser/normalize-opts\n   {:all true\n    :read-eval false\n    :row-key :line\n    :col-key :column\n    :end-row-key :end-line\n    :end-col-key :end-column}))\n\n(defn fully-qualify [ctx sym]\n  (let [env @(:env ctx)\n        sym-ns (when-let [n (namespace sym)]\n                 (symbol n))\n        sym-name-str (name sym)\n        current-ns (vars/current-ns-name)\n        current-ns-str (str current-ns)\n        namespaces (get env :namespaces)\n        the-current-ns (get namespaces current-ns)\n        aliases (:aliases the-current-ns)\n        ret (if-not sym-ns\n              (or (when (or (get (get namespaces 'clojure.core) sym)\n                            (contains? ana/macros sym))\n                    (symbol \"clojure.core\" sym-name-str))\n                  (interop/fully-qualify-class ctx sym)\n                  (when-let [v (get the-current-ns sym)]\n                    (when-let [m (meta v)]\n                      (when-let [var-name (:name m)]\n                        (when-let [ns (:ns m)]\n                          (symbol (str (vars/getName ns))\n                                  (str var-name))))))\n                  ;; all unresolvable symbols all resolved in the current namespace\n                  (symbol current-ns-str sym-name-str))\n              (if (get-in env [:namespaces sym-ns])\n                sym\n                (if-let [ns (get aliases sym-ns)]\n                  (symbol (str ns) sym-name-str)\n                  sym)))]\n    ret))\n\n(defn parse-next\n  ([r]\n   (parser/parse-next opts r))\n  ([ctx r]\n   (let [features (:features ctx)\n         readers (:readers ctx)\n         readers (if (vars/var? readers) @readers readers)\n         env (:env ctx)\n         env-val @env\n         current-ns (vars/current-ns-name)\n         the-current-ns (get-in env-val [:namespaces current-ns])\n         aliases (:aliases the-current-ns)\n         auto-resolve (assoc aliases\n                             :current current-ns)\n         parse-opts (assoc opts\n                           :read-cond :allow\n                           :features features\n                           :auto-resolve auto-resolve\n                           :syntax-quote {:resolve-symbol #(fully-qualify ctx %)}\n                           :readers readers)\n         ret (parser/parse-next parse-opts\n                                r)]\n     ;; (prn \"ret\" ret)\n     ret)))\n\n;;;; Scratch\n\n(comment\n  )\n"]}